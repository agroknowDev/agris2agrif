/* The following code was generated by JFlex 1.4.1 on 14/3/2015 2:06 μμ */

package gr.agroknow.metadata.transformer.agris2agrif;

import gr.agroknow.metadata.agrif.Agrif;
import gr.agroknow.metadata.agrif.Citation;
import gr.agroknow.metadata.agrif.ControlledBlock;
import gr.agroknow.metadata.agrif.Creator;
import gr.agroknow.metadata.agrif.Expression;
import gr.agroknow.metadata.agrif.Item;
import gr.agroknow.metadata.agrif.LanguageBlock;
import gr.agroknow.metadata.agrif.Manifestation;
import gr.agroknow.metadata.agrif.Relation;
import gr.agroknow.metadata.agrif.Rights;

import gr.agroknow.metadata.transformer.ParamManager;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.ArrayList;

import net.zettadata.generator.tools.Toolbox;
import net.zettadata.generator.tools.ToolboxException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 14/3/2015 2:06 μμ from the specification file
 * <tt>C:/Users/nimas/Documents/NetBeansProjects/GitRepositories/agris2agrif/src/conf/agris2agrif.jflex</tt>
 */
class AGRIS2AGRIF {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CLASS = 13;
  public static final int ARN = 2;
  public static final int DATE = 8;
  public static final int COVERAGE = 23;
  public static final int THESAURUS = 10;
  public static final int URL = 24;
  public static final int LABSTRACT = 16;
  public static final int LNOTE = 18;
  public static final int PUBLISHER = 7;
  public static final int AVAILABILITY = 19;
  public static final int AGRIF = 3;
  public static final int LCITATIONTITLE = 27;
  public static final int LKEYWORD = 25;
  public static final int KEYWORD = 26;
  public static final int DESCRIPTION = 14;
  public static final int RESOURCES = 1;
  public static final int TITLE = 5;
  public static final int DESCRIPTOR = 11;
  public static final int CITATION = 22;
  public static final int CLASSIFICATION = 12;
  public static final int LTITLE = 4;
  public static final int DESCRIPTIONNOTE = 17;
  public static final int ABSTRACT = 15;
  public static final int FORMAT = 21;
  public static final int SUBJECT = 9;
  public static final int AVAILOCATION = 20;
  public static final int YYINITIAL = 0;
  public static final int CREATOR = 6;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\13\25\0\1\23\1\62\1\20\3\0\1\60\6\0\1\51"+
    "\1\35\1\21\1\0\1\36\1\52\1\47\2\0\1\46\2\0\1\50"+
    "\1\5\1\61\1\1\1\17\1\22\2\0\1\14\1\0\1\64\1\65"+
    "\1\0\1\72\2\0\1\43\2\0\1\70\1\0\1\16\1\45\1\73"+
    "\1\0\1\15\1\44\1\66\1\42\1\0\1\71\3\0\1\63\1\0"+
    "\1\67\1\0\1\57\1\0\1\2\1\37\1\12\1\24\1\7\1\41"+
    "\1\3\1\33\1\26\1\40\1\56\1\27\1\31\1\32\1\10\1\34"+
    "\1\0\1\6\1\4\1\25\1\11\1\53\1\55\1\30\1\54\uff86\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\34\0\3\1\2\2\1\1\3\2\3\1\2\3\4\2"+
    "\1\1\4\2\1\1\1\2\1\4\3\1\4\2\1\5"+
    "\1\2\2\1\3\0\1\6\3\0\1\7\15\0\1\10"+
    "\1\0\1\11\5\0\1\12\1\0\1\13\15\0\1\14"+
    "\11\0\1\15\u011d\0\1\16\100\0\1\17\60\0\1\20"+
    "\1\0\1\21\45\0\1\22\1\0\1\23\4\0\1\15"+
    "\2\0\1\15\53\0\1\24\21\0\1\25\24\0\1\26"+
    "\2\0\1\27\3\0\1\30\15\0\1\31\46\0\1\32"+
    "\51\0\1\33\7\0\1\34\6\0\1\35\46\0\1\36"+
    "\65\0\1\37\34\0\1\40\61\0\1\41\3\0\1\42"+
    "\25\0\1\43\1\0\1\43\1\44\131\0\1\45\21\0"+
    "\1\46\2\0\1\47\21\0\1\50\1\51\27\0\1\52"+
    "\3\0\1\53\16\0\1\54\35\0\1\55\1\56\102\0"+
    "\1\57\6\0\1\60\45\0\1\61\37\0\1\62\1\0"+
    "\1\63\174\0\1\46\1\64\70\0\1\65\1\0\1\55"+
    "\1\56\42\0\1\66\24\0\1\67\22\0\1\46\54\0"+
    "\1\70\21\0\1\71\1\72\10\0\1\14\35\0\1\73"+
    "\1\74\2\0\1\75\33\0\1\76\25\0\1\77\2\0"+
    "\1\100\26\0\1\101\21\0\1\102\2\0\1\103\1\0"+
    "\1\104\70\0\1\105\22\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1864];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0690"+
    "\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8"+
    "\0\u0690\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0690\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0690\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0690\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158"+
    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12c0\0\u12fc"+
    "\0\u0690\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u0690\0\u1464"+
    "\0\u0690\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608"+
    "\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u0690\0\u17ac"+
    "\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c"+
    "\0\u0690\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30"+
    "\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10"+
    "\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0"+
    "\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0"+
    "\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0"+
    "\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490"+
    "\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670"+
    "\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850"+
    "\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30"+
    "\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10"+
    "\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0"+
    "\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0"+
    "\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0"+
    "\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390"+
    "\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570"+
    "\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750"+
    "\0\u378c\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930"+
    "\0\u396c\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10"+
    "\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0"+
    "\0\u3d2c\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0"+
    "\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u40b0"+
    "\0\u40ec\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290"+
    "\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434\0\u4470"+
    "\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614\0\u4650"+
    "\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8\0\u47f4\0\u4830"+
    "\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998\0\u49d4\0\u4a10"+
    "\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78\0\u4bb4\0\u4bf0"+
    "\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58\0\u4d94\0\u4dd0"+
    "\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38\0\u4f74\0\u4fb0"+
    "\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc\0\u5118\0\u5154\0\u5190"+
    "\0\u51cc\0\u5208\0\u5244\0\u5280\0\u52bc\0\u52f8\0\u5334\0\u5370"+
    "\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c\0\u54d8\0\u5514\0\u5550"+
    "\0\u558c\0\u55c8\0\u5604\0\u5640\0\u567c\0\u56b8\0\u56f4\0\u5730"+
    "\0\u576c\0\u57a8\0\u57e4\0\u5820\0\u585c\0\u5898\0\u58d4\0\u5910"+
    "\0\u594c\0\u5988\0\u59c4\0\u5a00\0\u5a3c\0\u5a78\0\u5ab4\0\u5af0"+
    "\0\u5b2c\0\u5b68\0\u5ba4\0\u5be0\0\u5c1c\0\u5c58\0\u0690\0\u5c94"+
    "\0\u5cd0\0\u5d0c\0\u5d48\0\u5d84\0\u5dc0\0\u5dfc\0\u5e38\0\u5e74"+
    "\0\u5eb0\0\u5eec\0\u5f28\0\u5f64\0\u5fa0\0\u5fdc\0\u6018\0\u6054"+
    "\0\u6090\0\u60cc\0\u6108\0\u6144\0\u6180\0\u61bc\0\u61f8\0\u6234"+
    "\0\u6270\0\u62ac\0\u62e8\0\u6324\0\u6360\0\u639c\0\u63d8\0\u6414"+
    "\0\u6450\0\u648c\0\u64c8\0\u6504\0\u6540\0\u657c\0\u65b8\0\u65f4"+
    "\0\u6630\0\u666c\0\u66a8\0\u66e4\0\u6720\0\u675c\0\u6798\0\u67d4"+
    "\0\u6810\0\u684c\0\u6888\0\u68c4\0\u6900\0\u693c\0\u6978\0\u69b4"+
    "\0\u69f0\0\u6a2c\0\u6a68\0\u6aa4\0\u6ae0\0\u6b1c\0\u6b58\0\u0690"+
    "\0\u6b94\0\u6bd0\0\u6c0c\0\u6c48\0\u6c84\0\u6cc0\0\u6cfc\0\u6d38"+
    "\0\u6d74\0\u6db0\0\u6dec\0\u6e28\0\u6e64\0\u6ea0\0\u6edc\0\u6f18"+
    "\0\u6f54\0\u6f90\0\u6fcc\0\u7008\0\u7044\0\u7080\0\u70bc\0\u70f8"+
    "\0\u7134\0\u7170\0\u71ac\0\u71e8\0\u7224\0\u7260\0\u729c\0\u72d8"+
    "\0\u7314\0\u7350\0\u738c\0\u73c8\0\u7404\0\u7440\0\u747c\0\u74b8"+
    "\0\u74f4\0\u7530\0\u756c\0\u75a8\0\u75e4\0\u7620\0\u765c\0\u7698"+
    "\0\u0690\0\u76d4\0\u0690\0\u7710\0\u774c\0\u7788\0\u77c4\0\u7800"+
    "\0\u783c\0\u7878\0\u78b4\0\u78f0\0\u792c\0\u7968\0\u79a4\0\u79e0"+
    "\0\u7a1c\0\u7a58\0\u7a94\0\u7ad0\0\u7b0c\0\u7b48\0\u7b84\0\u7bc0"+
    "\0\u7bfc\0\u7c38\0\u7c74\0\u7cb0\0\u7cec\0\u7d28\0\u7d64\0\u7da0"+
    "\0\u7ddc\0\u7e18\0\u7e54\0\u7e90\0\u7ecc\0\u7f08\0\u7f44\0\u7f80"+
    "\0\u0690\0\u7fbc\0\u0690\0\u7ff8\0\u8034\0\u8070\0\u80ac\0\u68c4"+
    "\0\u80e8\0\u8124\0\u7530\0\u8160\0\u819c\0\u81d8\0\u8214\0\u8250"+
    "\0\u828c\0\u82c8\0\u8304\0\u8340\0\u837c\0\u83b8\0\u83f4\0\u8430"+
    "\0\u846c\0\u84a8\0\u84e4\0\u8520\0\u855c\0\u8598\0\u85d4\0\u8610"+
    "\0\u864c\0\u8688\0\u86c4\0\u8700\0\u873c\0\u8778\0\u87b4\0\u87f0"+
    "\0\u882c\0\u8868\0\u88a4\0\u88e0\0\u891c\0\u8958\0\u8994\0\u89d0"+
    "\0\u8a0c\0\u8a48\0\u8a84\0\u8ac0\0\u8afc\0\u8b38\0\u0690\0\u8b74"+
    "\0\u8bb0\0\u8bec\0\u8c28\0\u8c64\0\u8ca0\0\u8cdc\0\u8d18\0\u8d54"+
    "\0\u8d90\0\u8dcc\0\u8e08\0\u8e44\0\u8e80\0\u8ebc\0\u8ef8\0\u8f34"+
    "\0\u0690\0\u8f70\0\u8fac\0\u8fe8\0\u9024\0\u9060\0\u909c\0\u90d8"+
    "\0\u9114\0\u9150\0\u918c\0\u91c8\0\u9204\0\u9240\0\u927c\0\u92b8"+
    "\0\u92f4\0\u9330\0\u936c\0\u93a8\0\u93e4\0\u0690\0\u9420\0\u945c"+
    "\0\u945c\0\u9498\0\u94d4\0\u9510\0\u0690\0\u954c\0\u9588\0\u95c4"+
    "\0\u9600\0\u963c\0\u9678\0\u96b4\0\u96f0\0\u972c\0\u9768\0\u97a4"+
    "\0\u97e0\0\u981c\0\u0690\0\u9858\0\u9894\0\u98d0\0\u990c\0\u9948"+
    "\0\u9984\0\u99c0\0\u99fc\0\u9a38\0\u9a74\0\u9ab0\0\u9aec\0\u9b28"+
    "\0\u9b64\0\u9ba0\0\u9bdc\0\u9c18\0\u9c54\0\u9c90\0\u9ccc\0\u9d08"+
    "\0\u9d44\0\u9d80\0\u9dbc\0\u9df8\0\u9e34\0\u9e70\0\u9eac\0\u9ee8"+
    "\0\u9f24\0\u9f60\0\u9f9c\0\u9fd8\0\ua014\0\ua050\0\ua08c\0\ua0c8"+
    "\0\ua104\0\u0690\0\ua140\0\ua17c\0\ua1b8\0\ua1f4\0\ua230\0\ua26c"+
    "\0\ua2a8\0\ua2e4\0\ua320\0\ua35c\0\ua398\0\ua3d4\0\ua410\0\ua44c"+
    "\0\ua488\0\ua4c4\0\ua500\0\ua53c\0\ua578\0\ua5b4\0\ua5f0\0\ua62c"+
    "\0\ua668\0\ua6a4\0\ua6e0\0\ua71c\0\ua758\0\ua794\0\ua7d0\0\ua80c"+
    "\0\ua848\0\ua884\0\ua8c0\0\ua8fc\0\ua938\0\ua974\0\ua9b0\0\ua9ec"+
    "\0\uaa28\0\uaa64\0\uaaa0\0\u0690\0\uaadc\0\uab18\0\uab54\0\uab90"+
    "\0\uabcc\0\uac08\0\uac44\0\u0690\0\uac80\0\uacbc\0\uacf8\0\uad34"+
    "\0\uad70\0\uadac\0\u0690\0\uade8\0\uae24\0\uae60\0\uae9c\0\uaed8"+
    "\0\uaf14\0\uaf50\0\uaf8c\0\uafc8\0\ub004\0\ub040\0\ub07c\0\ub0b8"+
    "\0\ub0f4\0\ub130\0\ub16c\0\ub1a8\0\ub1e4\0\ub220\0\ub25c\0\ub298"+
    "\0\ub2d4\0\ub310\0\ub34c\0\ub388\0\ub3c4\0\ub400\0\ub43c\0\ub478"+
    "\0\ub4b4\0\ub4f0\0\ub52c\0\ub568\0\ub5a4\0\ub5e0\0\ub61c\0\ub658"+
    "\0\ub694\0\u0690\0\ub6d0\0\ub70c\0\ub748\0\ub784\0\ub7c0\0\ub7fc"+
    "\0\ub838\0\ub874\0\ub8b0\0\ub8ec\0\ub928\0\ub964\0\ub9a0\0\ub9dc"+
    "\0\uba18\0\uba54\0\uba90\0\ubacc\0\ubb08\0\ubb44\0\ubb80\0\ubbbc"+
    "\0\ubbf8\0\ubc34\0\ubc70\0\ubcac\0\ubce8\0\ubd24\0\ubd60\0\ubd9c"+
    "\0\ubdd8\0\ube14\0\ube50\0\ube8c\0\ubec8\0\ubf04\0\ubf40\0\ubf7c"+
    "\0\ubfb8\0\ubff4\0\uc030\0\uc06c\0\uc0a8\0\uc0e4\0\uc120\0\uc15c"+
    "\0\uc198\0\uc1d4\0\uc210\0\uc24c\0\uc288\0\uc2c4\0\uc300\0\u0690"+
    "\0\uc33c\0\uc378\0\uc3b4\0\uc3f0\0\uc42c\0\uc468\0\uc4a4\0\uc4e0"+
    "\0\uc51c\0\uc558\0\uc594\0\uc5d0\0\uc60c\0\uc648\0\uc684\0\uc6c0"+
    "\0\uc6fc\0\uc738\0\uc774\0\uc7b0\0\uc7ec\0\uc828\0\uc864\0\uc8a0"+
    "\0\uc8dc\0\uc918\0\uc954\0\uc990\0\u0690\0\uc9cc\0\uca08\0\uca44"+
    "\0\uca80\0\ucabc\0\ucaf8\0\ucb34\0\ucb70\0\ucbac\0\ucbe8\0\ucc24"+
    "\0\ucc60\0\ucc9c\0\uccd8\0\ucd14\0\ucd50\0\ucd8c\0\ucdc8\0\uce04"+
    "\0\uce40\0\uce7c\0\uceb8\0\ucef4\0\ucf30\0\ucf6c\0\ucfa8\0\ucfe4"+
    "\0\ud020\0\ud05c\0\ud098\0\ud0d4\0\ud110\0\ud14c\0\ud188\0\ud1c4"+
    "\0\ud200\0\ud23c\0\ud278\0\ud2b4\0\ud2f0\0\ud32c\0\ud368\0\ud3a4"+
    "\0\ud3e0\0\ud41c\0\ud458\0\ud494\0\ud4d0\0\ud50c\0\u0690\0\ud548"+
    "\0\ud584\0\ud5c0\0\u0690\0\ud5fc\0\ud638\0\ud674\0\ud6b0\0\ud6ec"+
    "\0\ud728\0\ud764\0\ud7a0\0\ud7dc\0\ud818\0\ud854\0\ud890\0\ud8cc"+
    "\0\ud908\0\ud944\0\ud980\0\ud9bc\0\ud9f8\0\uda34\0\uda70\0\udaac"+
    "\0\u68c4\0\udae8\0\u7530\0\u693c\0\udb24\0\udb60\0\udb9c\0\udbd8"+
    "\0\udc14\0\udc50\0\udc8c\0\udcc8\0\udd04\0\udd40\0\udd7c\0\uddb8"+
    "\0\uddf4\0\ude30\0\ude6c\0\udea8\0\udee4\0\udf20\0\udf5c\0\udf98"+
    "\0\udfd4\0\ue010\0\ue04c\0\ue088\0\ue0c4\0\ue100\0\ue13c\0\ue178"+
    "\0\ue1b4\0\ue1f0\0\ue22c\0\ue268\0\ue2a4\0\ue2e0\0\ue31c\0\ue358"+
    "\0\ue394\0\ue3d0\0\ue40c\0\ue448\0\ue484\0\ue4c0\0\ue4fc\0\ue538"+
    "\0\ue574\0\ue5b0\0\ue5ec\0\ue628\0\ue664\0\ue6a0\0\ue6dc\0\ue718"+
    "\0\ue754\0\ue790\0\ue7cc\0\ue808\0\ue844\0\ue880\0\ue8bc\0\ue8f8"+
    "\0\ue934\0\ue970\0\ue9ac\0\ue9e8\0\uea24\0\uea60\0\uea9c\0\uead8"+
    "\0\ueb14\0\ueb50\0\ueb8c\0\uebc8\0\uec04\0\uec40\0\uec7c\0\uecb8"+
    "\0\uecf4\0\ued30\0\ued6c\0\ueda8\0\uede4\0\uee20\0\uee5c\0\uee98"+
    "\0\ueed4\0\uef10\0\uef4c\0\uef88\0\uefc4\0\u7530\0\uf000\0\uf03c"+
    "\0\uf078\0\uf0b4\0\uf0f0\0\uf12c\0\uf168\0\uf1a4\0\uf1e0\0\uf21c"+
    "\0\uf258\0\uf294\0\uf2d0\0\uf30c\0\uf348\0\uf384\0\uf3c0\0\u0690"+
    "\0\uf3fc\0\uf438\0\u0690\0\uf474\0\uf4b0\0\uf4ec\0\uf528\0\uf564"+
    "\0\uf5a0\0\uf5dc\0\uf618\0\uf654\0\uf690\0\uf6cc\0\uf708\0\uf744"+
    "\0\uf780\0\uf7bc\0\uf7f8\0\uf834\0\uf870\0\u0690\0\uf8ac\0\uf8e8"+
    "\0\uf924\0\uf960\0\uf99c\0\uf9d8\0\ufa14\0\ufa50\0\ufa8c\0\ufac8"+
    "\0\ufb04\0\ufb40\0\ufb7c\0\ufbb8\0\ufbf4\0\ufc30\0\ufc6c\0\ufca8"+
    "\0\ufce4\0\ufd20\0\ufd5c\0\ufd98\0\ufdd4\0\u0690\0\ufe10\0\ufe4c"+
    "\0\ufe88\0\u0690\0\ufec4\0\uff00\0\uff3c\0\uff78\0\uffb4\0\ufff0"+
    "\1\54\1\150\1\244\1\340\1\u011c\1\u0158\1\u0194\1\u01d0"+
    "\0\u945c\1\u020c\1\u0248\1\u0284\1\u02c0\1\u02fc\1\u0338\1\u0374"+
    "\1\u03b0\1\u03ec\1\u0428\1\u0464\1\u04a0\1\u04dc\1\u0518\1\u0554"+
    "\1\u0590\1\u05cc\1\u0608\1\u0644\1\u0680\1\u06bc\1\u06f8\1\u0734"+
    "\1\u0770\1\u07ac\1\u07e8\1\u0824\1\u0860\1\u089c\0\u86c4\0\u8700"+
    "\1\u08d8\1\u0914\1\u0950\1\u098c\1\u09c8\1\u0a04\1\u0a40\1\u0a7c"+
    "\1\u0ab8\1\u0af4\1\u0b30\1\u0b6c\1\u0ba8\1\u0be4\1\u0c20\1\u0c5c"+
    "\1\u0c98\1\u0cd4\1\u0d10\1\u0d4c\1\u0d88\1\u0dc4\1\u0e00\1\u0e3c"+
    "\1\u0e78\1\u0eb4\1\u0ef0\1\u0f2c\1\u0f68\1\u0fa4\1\u0fe0\1\u101c"+
    "\1\u1058\1\u1094\1\u10d0\1\u110c\1\u1148\1\u1184\1\u11c0\1\u11fc"+
    "\1\u1238\1\u1274\1\u12b0\1\u12ec\1\u1328\1\u1364\1\u13a0\1\u13dc"+
    "\1\u1418\1\u1454\1\u1490\1\u14cc\1\u1508\1\u1544\1\u1580\1\u15bc"+
    "\1\u15f8\1\u1634\1\u1670\1\u16ac\1\u16e8\1\u1724\1\u1760\1\u179c"+
    "\1\u17d8\1\u1814\1\u1850\1\u188c\1\u18c8\1\u1904\1\u1940\1\u197c"+
    "\1\u19b8\0\u0690\1\u19f4\1\u1a30\1\u1a6c\1\u1aa8\1\u1ae4\1\u1b20"+
    "\1\u1b5c\1\u1b98\1\u1bd4\1\u1c10\1\u1c4c\1\u1c88\1\u1cc4\1\u1d00"+
    "\1\u1d3c\1\u1d78\1\u1db4\1\u1df0\1\u1e2c\1\u1e68\1\u1ea4\1\u1ee0"+
    "\1\u1f1c\1\u1f58\1\u1f94\1\u1fd0\1\u200c\1\u2048\1\u2084\1\u20c0"+
    "\1\u20fc\1\u2138\1\u2174\1\u21b0\1\u21ec\1\u2228\1\u2264\0\u0690"+
    "\1\u22a0\1\u22dc\1\u2318\1\u2354\1\u2390\1\u23cc\1\u2408\1\u2444"+
    "\1\u2480\1\u24bc\1\u24f8\1\u2534\1\u2570\1\u25ac\1\u25e8\1\u2624"+
    "\1\u2660\1\u269c\1\u26d8\1\u2714\1\u2750\1\u278c\1\u27c8\1\u2804"+
    "\1\u2840\1\u287c\1\u28b8\1\u28f4\1\u2930\1\u296c\1\u29a8\0\u0690"+
    "\1\u29e4\0\u0690\1\u2a20\1\u2a5c\1\u2a98\1\u2ad4\1\u2b10\1\u2b4c"+
    "\1\u2b88\1\u2bc4\1\u2c00\1\u2c3c\1\u2c78\1\u2cb4\1\u2cf0\1\u2d2c"+
    "\1\u2d68\1\u2da4\1\u2de0\1\u2e1c\1\u2e58\1\u2e94\1\u2ed0\1\u2f0c"+
    "\1\u2f48\1\u2f84\1\u2fc0\1\u2ffc\1\u3038\1\u3074\1\u30b0\1\u30ec"+
    "\1\u3128\1\u3164\1\u31a0\1\u31dc\1\u3218\1\u3254\1\u3290\1\u32cc"+
    "\1\u3308\1\u3344\1\u3380\1\u33bc\1\u33f8\1\u3434\1\u3470\1\u34ac"+
    "\1\u34e8\1\u3524\1\u3560\1\u359c\1\u35d8\1\u3614\1\u3650\1\u368c"+
    "\1\u36c8\1\u3704\1\u3740\1\u377c\1\u37b8\1\u37f4\1\u3830\1\u386c"+
    "\1\u38a8\1\u38e4\1\u3920\1\u395c\1\u3998\1\u39d4\1\u3a10\1\u3a4c"+
    "\1\u3a88\1\u3ac4\1\u3b00\1\u3b3c\1\u3b78\1\u3bb4\1\u3bf0\1\u3c2c"+
    "\1\u3c68\1\u3ca4\1\u3ce0\1\u3d1c\1\u3d58\1\u3d94\1\u3dd0\1\u3e0c"+
    "\1\u3e48\1\u3e84\1\u3ec0\1\u3efc\1\u3f38\1\u3f74\1\u3fb0\1\u3fec"+
    "\1\u4028\1\u4064\1\u40a0\1\u40dc\1\u4118\1\u4154\1\u4190\1\u41cc"+
    "\1\u4208\1\u4244\1\u4280\1\u42bc\1\u42f8\1\u4334\1\u4370\1\u43ac"+
    "\1\u43e8\1\u4424\1\u4460\1\u449c\1\u44d8\1\u4514\1\u4550\1\u458c"+
    "\1\u45c8\1\u4604\1\u4640\1\u467c\1\u46b8\1\u46f4\0\uf384\0\u0690"+
    "\1\u4730\1\u476c\1\u47a8\1\u47e4\1\u4820\1\u485c\1\u4898\1\u48d4"+
    "\1\u4910\1\u494c\1\u4988\1\u49c4\1\u4a00\1\u4a3c\1\u4a78\1\u4ab4"+
    "\1\u4af0\1\u4b2c\1\u4b68\1\u4ba4\1\u4be0\1\u4c1c\1\u4c58\1\u4c94"+
    "\1\u4cd0\1\u4d0c\1\u4d48\1\u4d84\1\u4dc0\1\u4dfc\1\u4e38\1\u4e74"+
    "\1\u4eb0\1\u4eec\1\u4f28\1\u4f64\1\u4fa0\1\u4fdc\1\u5018\1\u5054"+
    "\1\u5090\1\u50cc\1\u5108\1\u5144\1\u5180\1\u51bc\1\u51f8\1\u5234"+
    "\1\u5270\1\u52ac\1\u52e8\1\u5324\1\u5360\1\u539c\1\u53d8\1\u5414"+
    "\0\uf384\1\u5450\0\uc0a8\0\uc0e4\1\u548c\1\u54c8\1\u5504\1\u5540"+
    "\1\u557c\1\u55b8\1\u55f4\1\u5630\1\u566c\1\u56a8\1\u56e4\1\u5720"+
    "\1\u575c\1\u5798\1\u57d4\1\u5810\1\u584c\1\u5888\1\u58c4\1\u5900"+
    "\1\u593c\1\u5978\1\u59b4\1\u59f0\1\u5a2c\1\u5a68\1\u5aa4\1\u5ae0"+
    "\1\u5b1c\1\u5b58\1\u5b94\1\u5bd0\1\u5c0c\1\u5c48\0\u0690\1\u5c84"+
    "\1\u5cc0\1\u5cfc\1\u5d38\1\u5d74\1\u5db0\1\u5dec\1\u5e28\1\u5e64"+
    "\1\u5ea0\1\u5edc\1\u5f18\1\u5f54\1\u5f90\1\u5fcc\1\u6008\1\u6044"+
    "\1\u6080\1\u60bc\1\u60f8\0\ucd50\1\u6134\1\u6170\1\u61ac\1\u61e8"+
    "\1\u6224\1\u6260\1\u629c\1\u62d8\1\u6314\1\u6350\1\u638c\1\u63c8"+
    "\1\u6404\1\u6440\1\u647c\1\u64b8\1\u64f4\1\u6530\1\u20c0\1\u656c"+
    "\1\u65a8\1\u65e4\1\u6620\1\u665c\1\u6698\1\u66d4\1\u6710\1\u674c"+
    "\1\u6788\1\u67c4\1\u6800\1\u683c\1\u6878\1\u68b4\1\u68f0\1\u692c"+
    "\1\u6968\1\u69a4\1\u69e0\1\u6a1c\1\u6a58\1\u6a94\1\u6ad0\1\u6b0c"+
    "\1\u6b48\1\u6b84\1\u6bc0\1\u6bfc\1\u6c38\1\u6c74\1\u6cb0\1\u6cec"+
    "\1\u6d28\1\u6d64\1\u6da0\1\u6ddc\1\u6e18\1\u6e54\1\u6e90\1\u6ecc"+
    "\1\u6f08\1\u6f44\1\u6f80\1\u20c0\1\u6fbc\1\u6ff8\1\u7034\1\u7070"+
    "\1\u70ac\1\u70e8\1\u7124\1\u7160\1\u719c\1\u71d8\1\u7214\1\u7250"+
    "\1\u728c\1\u72c8\1\u7304\1\u7340\1\u737c\0\udd04\0\udd40\1\u73b8"+
    "\1\u73f4\1\u7430\1\u746c\1\u74a8\1\u74e4\1\u7520\1\u755c\0\ue268"+
    "\1\u7598\1\u75d4\1\u7610\1\u764c\1\u7688\1\u76c4\1\u7700\1\u773c"+
    "\1\u7778\1\u77b4\1\u77f0\1\u782c\1\u7868\1\u78a4\1\u78e0\1\u791c"+
    "\1\u7958\1\u7994\1\u79d0\1\u7a0c\1\u7a48\1\u7a84\1\u7ac0\1\u7afc"+
    "\1\u7b38\1\u7b74\1\u7bb0\1\u7bec\1\u7c28\0\ue808\0\ue844\1\u7c64"+
    "\1\u7ca0\0\uec40\1\u7cdc\1\u7d18\1\u7d54\1\u7d90\1\u7dcc\1\u7e08"+
    "\1\u7e44\1\u7e80\1\u7ebc\1\u7ef8\1\u7f34\1\u7f70\1\u7fac\1\u7fe8"+
    "\1\u8024\1\u8060\1\u809c\1\u80d8\1\u8114\1\u8150\1\u818c\1\u81c8"+
    "\1\u8204\1\u8240\1\u827c\1\u82b8\1\u82f4\0\uf1e0\1\u8330\1\u836c"+
    "\1\u83a8\1\u83e4\1\u8420\1\u845c\1\u8498\1\u84d4\1\u8510\1\u854c"+
    "\1\u8588\1\u85c4\1\u8600\1\u863c\1\u8678\1\u86b4\1\u86f0\1\u872c"+
    "\1\u8768\1\u87a4\1\u87e0\1\u43e8\1\u881c\1\u8858\0\ufb7c\1\u8894"+
    "\1\u88d0\1\u890c\1\u8948\1\u8984\1\u89c0\1\u89fc\1\u8a38\1\u8a74"+
    "\1\u8ab0\1\u8aec\1\u8b28\1\u8b64\1\u8ba0\1\u8bdc\1\u8c18\1\u8c54"+
    "\1\u8c90\1\u8ccc\1\u8d08\1\u8d44\1\u8d80\1\u0518\1\u8dbc\1\u8df8"+
    "\1\u8e34\1\u8e70\1\u8eac\1\u8ee8\1\u8f24\1\u8f60\1\u8f9c\1\u8fd8"+
    "\1\u9014\1\u9050\1\u908c\1\u90c8\1\u9104\1\u9140\1\u917c\1\u5c84"+
    "\1\u91b8\1\u91f4\1\u110c\1\u9230\1\u12b0\1\u926c\1\u92a8\1\u92e4"+
    "\1\u9320\1\u935c\1\u9398\1\u93d4\1\u9410\1\u944c\1\u9488\1\u94c4"+
    "\1\u9500\1\u953c\1\u9578\1\u95b4\1\u95f0\1\u962c\1\u9668\1\u96a4"+
    "\1\u96e0\1\u971c\1\u9758\1\u9794\1\u97d0\1\u980c\1\u9848\1\u9884"+
    "\1\u98c0\1\u98fc\1\u9938\1\u9974\1\u99b0\1\u99ec\1\u9a28\1\u9a64"+
    "\1\u9aa0\1\u9adc\1\u9b18\1\u9b54\1\u9b90\1\u9bcc\1\u9c08\1\u9c44"+
    "\1\u9c80\1\u9cbc\1\u9cf8\1\u9d34\1\u9d70\1\u9dac\1\u9de8\1\u9e24"+
    "\1\u9e60\1\u9e9c\1\u9ed8\1\u9f14\1\u9f50\1\u8060\1\u9f8c\1\u9fc8"+
    "\1\ua004\1\ua040\1\ua07c\1\ua0b8\1\ua0f4\1\ua130\1\ua16c\1\ua1a8"+
    "\1\ua1e4\1\ua220\1\ua25c\1\ua298\1\ua2d4\1\ua310\1\ua34c\1\ua388";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1864];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\35\1\36\73\35\1\37\72\35\13\40\1\35\4\40"+
    "\1\41\53\40\1\35\1\42\72\35\13\40\1\35\4\40"+
    "\1\43\54\40\1\44\11\40\1\35\53\40\1\45\4\40"+
    "\1\35\1\46\73\35\1\47\73\35\1\50\72\35\1\51"+
    "\1\52\11\51\1\35\60\51\13\40\1\35\4\40\1\53"+
    "\54\40\1\54\11\40\1\35\73\40\1\35\4\40\1\55"+
    "\54\40\1\56\11\40\1\35\60\40\1\35\1\57\72\35"+
    "\1\40\1\60\11\40\1\35\73\40\1\35\4\40\1\61"+
    "\54\40\1\62\11\40\1\35\73\40\1\35\4\40\1\63"+
    "\53\40\1\35\1\64\72\35\1\40\1\65\11\40\1\66"+
    "\60\40\1\35\1\67\73\35\1\70\73\35\1\71\72\35"+
    "\1\40\1\72\11\40\1\35\44\40\1\73\6\40\1\74"+
    "\17\40\1\35\4\40\1\75\1\40\1\76\52\40\1\77"+
    "\11\40\1\35\60\40\20\35\1\100\33\35\1\101\17\35"+
    "\76\0\1\102\73\0\1\103\16\0\1\104\74\0\1\105"+
    "\53\0\1\106\16\0\1\107\2\0\1\110\71\0\1\111"+
    "\72\0\1\112\40\0\1\113\100\0\1\114\6\0\1\115"+
    "\16\0\1\116\54\0\1\117\16\0\1\120\73\0\1\121"+
    "\2\0\1\122\51\0\1\123\16\0\1\124\2\0\1\125"+
    "\47\0\13\126\1\0\6\126\1\127\51\126\21\0\1\130"+
    "\74\0\1\131\72\0\1\132\54\0\1\133\16\0\1\134"+
    "\2\0\1\135\70\0\1\136\74\0\1\137\72\0\1\140"+
    "\74\0\1\141\53\0\1\142\16\0\1\143\73\0\1\144"+
    "\65\0\1\66\101\0\1\145\2\0\1\146\51\0\1\147"+
    "\16\0\1\150\73\0\1\151\2\0\1\152\70\0\1\153"+
    "\40\0\1\113\40\0\1\154\133\0\1\155\26\0\1\76"+
    "\72\0\1\156\74\0\1\157\125\0\1\160\22\0\1\161"+
    "\73\0\1\162\72\0\1\163\74\0\1\164\72\0\1\165"+
    "\103\0\1\166\105\0\1\167\132\0\1\170\32\0\1\171"+
    "\54\0\1\172\114\0\1\173\52\0\1\174\114\0\1\175"+
    "\73\0\1\176\61\0\1\177\64\0\1\200\114\0\1\201"+
    "\61\0\1\202\61\0\13\126\1\0\4\126\1\203\53\126"+
    "\2\0\1\204\73\0\1\205\74\0\1\206\114\0\1\207"+
    "\61\0\1\210\105\0\1\211\51\0\1\212\74\0\1\213"+
    "\72\0\1\214\73\0\1\215\115\0\1\216\61\0\1\217"+
    "\64\0\1\220\72\0\1\221\115\0\1\222\61\0\1\223"+
    "\105\0\1\224\74\0\1\225\70\0\1\171\35\0\1\226"+
    "\15\0\1\227\21\0\1\230\106\0\1\231\40\0\1\232"+
    "\73\0\1\233\72\0\1\234\74\0\1\235\22\0\1\236"+
    "\47\0\1\237\75\0\1\240\100\0\1\241\145\0\1\242"+
    "\13\0\1\243\101\0\1\244\65\0\1\245\101\0\1\246"+
    "\73\0\1\247\106\0\1\250\52\0\1\251\101\0\1\252"+
    "\66\0\1\253\66\0\13\126\1\0\4\126\1\203\1\126"+
    "\1\127\51\126\3\0\1\254\73\0\1\255\74\0\1\256"+
    "\101\0\1\257\106\0\1\260\60\0\1\261\64\0\1\262"+
    "\74\0\1\263\72\0\1\264\73\0\1\265\102\0\1\266"+
    "\66\0\1\267\17\0\1\270\52\0\1\271\72\0\1\272"+
    "\102\0\1\273\106\0\1\274\60\0\1\275\142\0\1\276"+
    "\15\0\1\277\73\0\1\300\102\0\1\301\70\0\1\302"+
    "\71\0\1\303\73\0\1\304\72\0\1\305\74\0\1\306"+
    "\72\0\1\307\73\0\1\310\73\0\1\311\5\0\1\312"+
    "\11\0\1\313\1\314\1\315\1\316\4\0\1\317\4\0"+
    "\1\320\37\0\1\321\153\0\1\322\13\0\1\323\73\0"+
    "\1\324\73\0\1\325\73\0\1\326\73\0\1\327\75\0"+
    "\1\330\71\0\1\331\73\0\1\332\72\0\1\333\73\0"+
    "\1\334\73\0\1\335\74\0\1\336\73\0\1\337\75\0"+
    "\1\340\111\0\1\341\52\0\1\342\74\0\1\343\72\0"+
    "\1\344\22\0\1\345\50\0\1\346\74\0\1\347\75\0"+
    "\1\350\21\0\1\351\51\0\1\352\71\0\1\353\72\0"+
    "\1\354\74\0\1\355\75\0\1\356\71\0\1\357\150\0"+
    "\1\113\36\0\1\360\52\0\1\361\74\0\1\362\71\0"+
    "\1\363\76\0\1\364\73\0\1\365\72\0\1\366\70\0"+
    "\1\367\7\0\1\370\66\0\1\371\73\0\1\372\77\0"+
    "\1\373\70\0\1\374\1\0\1\375\65\0\1\376\4\0"+
    "\1\377\112\0\1\u0100\25\0\1\u0101\43\0\1\u0102\51\0"+
    "\1\u0103\102\0\1\u0104\72\0\1\u0105\110\0\1\u0106\62\0"+
    "\1\u0107\71\0\1\u0108\73\0\1\u0109\115\0\1\u010a\73\0"+
    "\1\u010b\63\0\1\u010c\55\0\1\u010d\71\0\1\u010e\73\0"+
    "\1\u010f\100\0\1\u0110\67\0\1\u0111\73\0\1\u0112\112\0"+
    "\1\u0113\73\0\1\u0114\55\0\1\u0115\74\0\1\u0116\71\0"+
    "\1\u0117\70\0\1\u0118\76\0\1\u0119\72\0\1\344\74\0"+
    "\1\u011a\127\0\1\u011b\62\0\1\u011c\52\0\1\u011d\72\0"+
    "\1\u011e\77\0\1\u011f\66\0\1\u0120\100\0\1\u0121\67\0"+
    "\1\u0122\113\0\1\u0123\126\0\1\171\17\0\1\u0124\72\0"+
    "\1\u0125\115\0\1\u0126\54\0\1\u0127\73\0\1\u0128\72\0"+
    "\1\u0129\140\0\1\u012a\46\0\1\u012b\47\0\1\u012c\77\0"+
    "\1\u012d\124\0\1\u012e\43\0\1\u012f\137\0\1\u0130\45\0"+
    "\1\u0131\52\0\1\u0132\114\0\1\u0133\102\0\1\u0134\46\0"+
    "\1\u0135\116\0\1\u0136\100\0\1\u0137\42\0\1\u0138\113\0"+
    "\1\u0139\133\0\1\u013a\13\0\1\u013b\73\0\1\u013c\76\0"+
    "\1\u013d\73\0\1\u013e\64\0\1\u013f\122\0\1\u0140\53\0"+
    "\1\u0141\73\0\1\u0142\121\0\1\u0143\40\0\1\u0144\73\0"+
    "\1\u0145\76\0\1\u0146\73\0\1\u0147\115\0\1\u0148\50\0"+
    "\1\u0149\111\0\1\u014a\122\0\1\u014b\22\0\1\u014c\73\0"+
    "\1\u014d\101\0\1\u014e\110\0\1\u014f\72\0\1\u0150\100\0"+
    "\1\u0151\70\0\1\u0152\57\0\1\u0153\71\0\1\u0154\114\0"+
    "\1\u0155\66\0\1\u0156\53\0\1\u0157\100\0\1\u0158\114\0"+
    "\1\u0159\45\0\1\u015a\73\0\1\u015b\76\0\1\u015c\66\0"+
    "\1\u015d\116\0\1\u015e\121\0\1\u015f\27\0\1\u0160\124\0"+
    "\1\u0161\35\0\1\u0162\100\0\1\u0163\73\0\1\u0164\76\0"+
    "\1\u0165\110\0\1\u0166\53\0\1\u0167\116\0\1\u0168\44\0"+
    "\1\u0169\117\0\1\u016a\75\0\1\u016b\67\0\1\u016c\62\0"+
    "\1\u016d\66\0\1\u016e\73\0\1\u016f\123\0\1\u0170\73\0"+
    "\1\u0171\61\0\1\u0172\52\0\1\u0173\126\0\1\u0174\73\0"+
    "\1\u0175\74\0\1\u0176\44\0\1\u0177\73\0\1\u0178\66\0"+
    "\1\u0179\73\0\1\u017a\73\0\1\u017b\120\0\1\u017c\51\0"+
    "\1\u017d\66\0\1\u017e\144\0\1\u017f\73\0\1\u0180\26\0"+
    "\1\u0181\74\0\1\u0182\112\0\1\u0183\51\0\1\u0184\114\0"+
    "\1\u0185\74\0\1\u0186\120\0\1\u0187\24\0\1\u0188\76\0"+
    "\1\u0189\75\0\1\u018a\121\0\1\u018b\120\0\1\u018c\17\0"+
    "\1\u018d\73\0\1\u018e\67\0\1\u018f\115\0\1\u0190\47\0"+
    "\1\u0191\73\0\1\u0192\75\0\1\u0193\76\0\1\u0194\111\0"+
    "\1\u0195\54\0\1\u0196\107\0\1\u0197\1\u0198\56\0\1\u0199"+
    "\74\0\1\u019a\106\0\1\u019b\76\0\1\u019c\57\0\1\u019d"+
    "\110\0\1\u019e\47\0\1\u019f\120\0\1\u01a0\127\0\1\171"+
    "\12\0\1\u01a1\73\0\1\u01a2\120\0\1\u01a3\73\0\1\u01a4"+
    "\53\0\1\u01a5\71\0\1\u01a6\126\0\1\u01a7\73\0\1\u01a8"+
    "\42\0\1\u01a9\123\0\1\u01aa\73\0\1\u01ab\46\0\1\u01ac"+
    "\73\0\1\u01ad\66\0\1\u01ae\72\0\1\u01af\73\0\1\u01b0"+
    "\115\0\1\u01b1\47\0\1\u01b2\73\0\1\u01b3\122\0\1\u01b4"+
    "\74\0\1\u01b5\52\0\1\u01b6\67\0\1\u01b7\70\0\1\u01b8"+
    "\116\0\1\u01b9\55\0\1\u01ba\71\0\1\u01bb\120\0\1\u01bc"+
    "\100\0\1\u01bd\74\0\1\u01be\76\0\1\u01bf\41\0\1\u01c0"+
    "\73\0\1\u01c1\72\0\1\u01c2\112\0\1\u01c3\71\0\1\u01c4"+
    "\74\0\1\u01c5\55\0\1\u01c6\75\0\1\u01c7\71\0\1\u01c8"+
    "\65\0\1\u01c9\121\0\1\u01ca\71\0\1\u01cb\45\0\13\u01cc"+
    "\1\0\6\u01cc\1\u01cd\51\u01cc\13\u01ce\1\0\60\u01ce\26\0"+
    "\1\u01cf\47\0\1\u01d0\75\0\1\u01d1\114\0\1\u01d2\55\0"+
    "\1\u01d3\111\0\1\u01d4\73\0\1\u01d5\74\0\1\u01d6\73\0"+
    "\1\u01d7\67\0\1\u01d8\75\0\1\u01d9\56\0\1\u01da\73\0"+
    "\1\u01db\76\0\1\u01dc\121\0\1\u01dd\73\0\1\u01de\41\0"+
    "\1\u01df\73\0\1\u01e0\67\0\1\u01e1\76\0\1\u01e2\100\0"+
    "\1\u01e3\110\0\1\u01e4\72\0\1\u01e5\73\0\1\u01e6\47\0"+
    "\1\u01e7\116\0\1\u01e8\77\0\1\u01e9\51\0\1\u01ea\21\0"+
    "\1\u01eb\67\0\1\u01ec\50\0\1\u01ed\77\0\1\u01ee\71\0"+
    "\1\u01ef\114\0\1\u01f0\106\0\1\u01f1\42\0\1\u01f2\152\0"+
    "\1\u01f3\13\0\1\u01f4\73\0\1\u01f5\76\0\1\u01f6\64\0"+
    "\1\u01f7\117\0\1\u01f8\74\0\1\u01f9\55\0\1\u01fa\107\0"+
    "\1\u01fb\54\0\1\u01fc\70\0\1\u01fd\121\0\1\u01fe\76\0"+
    "\1\u01ff\37\0\13\u01cc\1\0\5\u01cc\1\u0200\6\u01cc\1\u0201"+
    "\43\u01cc\13\u0202\1\0\5\u0202\1\u0203\6\u0202\1\u0204\43\u0202"+
    "\1\u01ce\1\u0205\11\u01ce\1\0\60\u01ce\41\0\1\u0206\35\0"+
    "\1\u0207\123\0\1\u0208\62\0\1\u0209\1\u020a\72\0\1\u020b"+
    "\61\0\1\u020c\73\0\1\u020d\67\0\1\u020e\73\0\1\u020f"+
    "\71\0\1\u0210\103\0\1\u0211\73\0\1\u0212\106\0\1\u0213"+
    "\55\0\1\u0214\73\0\1\u0215\112\0\1\u0216\73\0\1\u0217"+
    "\104\0\1\u0218\36\0\1\u0219\77\0\1\u021a\67\0\1\u021b"+
    "\120\0\1\u021c\73\0\1\u021d\71\0\1\u01a5\70\0\1\u021e"+
    "\73\0\1\u021f\101\0\1\u0220\52\0\1\u0221\112\0\1\u0222"+
    "\72\0\1\u0223\50\0\1\u0224\125\0\1\u0225\65\0\1\u0226"+
    "\54\0\1\u0227\76\0\1\u0228\75\0\1\u0229\71\0\1\u022a"+
    "\73\0\1\u022b\67\0\1\u022c\124\0\1\u022d\44\0\1\u022e"+
    "\65\0\1\u022f\77\0\1\u0230\107\0\1\u0231\1\u0232\72\0"+
    "\1\u0233\1\u0234\57\0\1\u0235\113\0\1\u0236\71\0\1\u0237"+
    "\46\0\13\u01cc\1\0\5\u01cc\1\u0200\1\u0238\5\u01cc\1\u0201"+
    "\56\u01cc\1\0\5\u01cc\1\u0200\6\u01cc\1\u0201\1\u0239\42\u01cc"+
    "\1\u0202\1\u023a\11\u0202\1\0\5\u0202\1\u0203\6\u0202\1\u0204"+
    "\44\u0202\1\u023a\11\u0202\1\0\5\u0202\1\u0203\1\u023b\5\u0202"+
    "\1\u0204\44\u0202\1\u023a\11\u0202\1\0\5\u0202\1\u0203\6\u0202"+
    "\1\u0204\1\u023c\42\u0202\1\u01ce\1\u0205\11\u01ce\1\0\5\u01ce"+
    "\1\u023d\52\u01ce\26\0\1\u023e\54\0\1\u023f\73\0\1\u0240"+
    "\114\0\1\u0241\51\0\1\u0242\73\0\1\u01a5\120\0\1\u0243"+
    "\73\0\1\u0244\65\0\1\u0245\73\0\1\u0246\73\0\1\u0247"+
    "\71\0\1\u0248\62\0\1\u0249\73\0\1\u024a\115\0\1\u024b"+
    "\73\0\1\u024c\43\0\1\u024d\126\0\1\u024e\62\0\1\u024f"+
    "\104\0\1\u0250\36\0\1\u0251\73\0\1\u0252\71\0\13\u0253"+
    "\1\0\60\u0253\13\u0254\1\0\60\u0254\25\0\1\u0255\72\0"+
    "\1\u0256\57\0\1\u0257\111\0\1\u0258\50\0\1\u0172\72\0"+
    "\1\u0259\132\0\1\u025a\44\0\1\u025b\106\0\1\u025c\134\0"+
    "\1\u025d\14\0\1\u025e\73\0\1\u025f\76\0\1\u0260\107\0"+
    "\1\u0261\77\0\1\u0262\100\0\1\u0263\46\0\1\u0264\111\0"+
    "\1\u0265\73\0\1\u0266\65\0\1\u0267\103\0\1\u0268\67\0"+
    "\1\u0269\45\0\13\u01cc\1\0\5\u01cc\1\u0200\5\u01cc\1\u026a"+
    "\1\u0201\43\u01cc\1\u0202\1\u023a\11\u0202\1\0\5\u0202\1\u026b"+
    "\6\u0202\1\u0204\44\u0202\1\u023a\11\u0202\1\0\5\u0202\1\u0203"+
    "\5\u0202\1\u026c\1\u0204\43\u0202\1\u01ce\1\u0205\11\u01ce\1\0"+
    "\10\u01ce\1\u026d\47\u01ce\7\0\1\u026e\64\0\13\u026f\1\0"+
    "\7\u026f\1\u0270\50\u026f\6\0\1\u0271\116\0\1\u0272\126\0"+
    "\1\u0273\6\0\1\u0274\7\0\1\u0275\73\0\1\u020d\73\0"+
    "\1\u0276\150\0\1\u0277\1\0\1\u0278\27\0\1\u0279\101\0"+
    "\1\u027a\70\0\1\u027b\73\0\1\u027c\73\0\1\u027d\73\0"+
    "\1\u027e\73\0\1\u027f\52\0\1\u0280\123\0\1\u0281\65\0"+
    "\1\u0282\104\0\1\u0283\73\0\1\u0284\34\0\1\u0253\1\u0285"+
    "\11\u0253\1\0\60\u0253\1\u0254\1\u0286\11\u0254\1\0\60\u0254"+
    "\7\0\1\u0287\112\0\1\u0288\77\0\1\u0289\51\0\1\u028a"+
    "\110\0\1\u028b\74\0\1\u028c\72\0\1\u028d\70\0\1\u028e"+
    "\114\0\1\u028f\30\0\4\u0290\1\u0291\6\u0290\1\0\60\u0290"+
    "\23\0\1\u0292\57\0\1\u0293\113\0\1\u0294\66\0\1\u0295"+
    "\77\0\1\u0296\54\0\1\u0297\115\0\1\u0298\73\0\1\u0299"+
    "\46\0\1\u029a\77\0\1\u029b\63\0\5\u01cc\1\u029c\5\u01cc"+
    "\1\0\5\u01cc\1\u0200\6\u01cc\1\u0201\43\u01cc\1\u0202\1\u023a"+
    "\11\u0202\1\0\5\u0202\1\u0203\1\u023b\1\u0202\1\u029d\3\u0202"+
    "\1\u0204\44\u0202\1\u023a\3\u0202\1\u029e\5\u0202\1\0\5\u0202"+
    "\1\u0203\6\u0202\1\u0204\43\u0202\1\u01ce\1\u0205\10\u01ce\1\u029f"+
    "\1\0\60\u01ce\6\0\1\u02a0\65\0\4\u026f\1\u02a1\6\u026f"+
    "\1\0\64\u026f\1\u02a2\6\u026f\1\0\60\u026f\22\0\1\u02a3"+
    "\1\u02a4\77\0\1\u02a5\54\0\1\u02a6\72\0\1\u02a7\72\0"+
    "\1\u02a8\130\0\1\u02a9\57\0\1\u02aa\77\0\1\u02ab\71\0"+
    "\1\u02ac\130\0\1\u02ad\71\0\1\u02ae\35\0\1\u02af\73\0"+
    "\1\u02b0\53\0\1\u02b1\112\0\1\u02b2\73\0\1\u02b3\75\0"+
    "\1\u02b4\72\0\1\u02b5\73\0\1\u02b6\45\0\1\u0253\1\u0285"+
    "\11\u0253\1\0\5\u0253\1\u02b7\52\u0253\1\u0254\1\u0286\11\u0254"+
    "\1\0\5\u0254\1\u02b8\52\u0254\32\0\1\u02b9\52\0\1\u02ba"+
    "\100\0\1\u02bb\24\0\1\u02bc\20\0\1\u02bd\1\0\1\u02be"+
    "\37\0\1\u02bf\67\0\1\u02c0\54\0\1\u02c1\150\0\1\u02c2"+
    "\1\0\1\u02c3\52\0\1\u02c4\26\0\2\u0290\1\u02c5\10\u0290"+
    "\1\0\60\u0290\2\0\1\u02c6\75\0\1\u02c7\115\0\1\u02c8"+
    "\74\0\1\u02c9\66\0\1\u02ca\100\0\1\u02cb\73\0\1\u02cc"+
    "\51\0\1\u02cd\120\0\1\u02ce\41\0\13\u01cc\1\0\5\u01cc"+
    "\1\u0200\5\u01cc\1\u02cf\1\u0201\43\u01cc\1\u0202\1\u023a\10\u0202"+
    "\1\u02d0\1\0\5\u0202\1\u0203\6\u0202\1\u0204\44\u0202\1\u023a"+
    "\11\u0202\1\0\5\u0202\1\u0203\5\u0202\1\u02d1\1\u0204\43\u0202"+
    "\1\u01ce\1\u0205\3\u01ce\1\u02d2\5\u01ce\1\0\60\u01ce\23\0"+
    "\1\u02d3\50\0\4\u026f\1\u02a1\5\u026f\1\u02d4\1\0\64\u026f"+
    "\1\u02a1\5\u026f\1\u02d5\1\0\60\u026f\30\0\1\u02d6\75\0"+
    "\1\u02d7\47\0\1\u02d8\23\0\1\u02d9\47\0\1\u02da\103\0"+
    "\1\u02db\46\0\1\u02dc\5\0\1\u02dd\4\0\1\u02de\71\0"+
    "\1\u02df\100\0\1\u02e0\113\0\1\u02e1\77\0\1\u02e2\67\0"+
    "\1\u02e3\54\0\1\u02e4\73\0\1\u02e5\65\0\1\u02e6\77\0"+
    "\1\u02e7\113\0\1\u02e8\73\0\1\u02e9\74\0\1\u02ea\73\0"+
    "\1\u02eb\44\0\1\u0253\1\u0285\11\u0253\1\0\10\u0253\1\u02ec"+
    "\47\u0253\1\u0254\1\u0286\11\u0254\1\0\10\u0254\1\u02ed\47\u0254"+
    "\25\0\1\u02ee\77\0\1\u02ef\53\0\1\u02f0\106\0\1\u02f1"+
    "\102\0\1\u02f2\66\0\1\u02f3\67\0\1\u02f4\53\0\1\u02f5"+
    "\77\0\1\u02f6\114\0\1\u02f7\77\0\1\u02f8\56\0\1\u02f9"+
    "\55\0\2\u0290\1\u02c5\1\u02fa\7\u0290\1\0\60\u0290\3\0"+
    "\1\u02fb\112\0\1\u02fc\76\0\1\u02fd\74\0\1\u02fe\52\0"+
    "\1\u02ff\24\0\1\u0300\73\0\1\u0301\65\0\1\u0302\71\0"+
    "\1\u0303\1\u0304\50\0\2\u01cc\1\u0305\10\u01cc\1\0\5\u01cc"+
    "\1\u0200\6\u01cc\1\u0201\43\u01cc\1\u0202\1\u023a\3\u0202\1\u0306"+
    "\5\u0202\1\0\5\u0202\1\u0203\6\u0202\1\u0204\44\u0202\1\u023a"+
    "\1\u0307\10\u0202\1\0\5\u0202\1\u0203\6\u0202\1\u0204\43\u0202"+
    "\1\u01ce\1\u0205\11\u01ce\1\0\11\u01ce\1\u0308\46\u01ce\4\0"+
    "\1\u0309\67\0\4\u026f\1\u02a1\6\u026f\1\0\17\u026f\1\u030a"+
    "\44\u026f\1\u02a1\6\u026f\1\0\17\u026f\1\u030b\40\u026f\31\0"+
    "\1\u030c\46\0\1\u030d\123\0\1\u030e\100\0\1\u030f\36\0"+
    "\1\u0310\71\0\1\u0311\73\0\1\u0312\120\0\1\u0313\50\0"+
    "\1\u0314\73\0\1\u0315\73\0\1\u0316\74\0\1\u0317\75\0"+
    "\1\u0318\66\0\1\u0319\123\0\1\u031a\73\0\1\u01a5\53\0"+
    "\1\u031b\63\0\1\u031c\101\0\1\u031d\110\0\1\u031e\74\0"+
    "\1\u031f\73\0\1\u0320\45\0\1\u0253\1\u0285\10\u0253\1\u0321"+
    "\1\0\60\u0253\1\u0254\1\u0286\10\u0254\1\u0322\1\0\60\u0254"+
    "\22\0\1\u0323\73\0\1\u0324\102\0\1\u0325\51\0\1\u0326"+
    "\72\0\1\u0327\112\0\1\u0328\75\0\1\u0329\66\0\1\u032a"+
    "\53\0\1\u032b\100\0\1\u032c\145\0\1\u032d\12\0\2\u0290"+
    "\1\u02c5\1\u0290\1\u032e\6\u0290\1\0\60\u0290\4\0\1\u032f"+
    "\143\0\1\u0330\44\0\1\u0331\75\0\1\u0332\50\0\1\u0333"+
    "\73\0\1\u0334\101\0\1\u0335\111\0\1\u0336\43\0\13\u01cc"+
    "\1\0\5\u01cc\1\u0200\6\u01cc\1\u0201\1\u01cc\1\u0337\41\u01cc"+
    "\1\u0202\1\u023a\11\u0202\1\0\5\u0202\1\u0203\3\u0202\1\u0338"+
    "\2\u0202\1\u0204\44\u0202\1\u023a\11\u0202\1\0\5\u0202\1\u0203"+
    "\6\u0202\1\u0204\1\u0202\1\u0339\41\u0202\1\u01ce\1\u0205\11\u01ce"+
    "\1\0\40\u01ce\1\u033a\17\u01ce\12\0\1\u033b\61\0\4\u026f"+
    "\1\u02a1\2\u026f\1\u033c\3\u026f\1\0\64\u026f\1\u02a1\2\u026f"+
    "\1\u033d\3\u026f\1\0\60\u026f\27\0\1\u033e\51\0\1\u033f"+
    "\76\0\1\u0340\72\0\1\u0341\74\0\1\u0342\114\0\1\u0343"+
    "\67\0\1\u0344\50\0\1\u0345\102\0\1\u0346\66\0\1\u0347"+
    "\71\0\1\u0348\120\0\1\u0349\50\0\1\u034a\73\0\1\u034b"+
    "\105\0\1\u034c\102\0\1\u034d\60\0\1\u034e\113\0\1\u034f"+
    "\115\0\1\u0350\44\0\1\u0351\73\0\1\u0352\46\0\1\u0253"+
    "\1\u0285\3\u0253\1\u0353\5\u0253\1\0\60\u0253\1\u0254\1\u0286"+
    "\3\u0254\1\u0354\5\u0254\1\0\60\u0254\13\u0355\1\0\60\u0355"+
    "\13\u0356\1\0\60\u0356\37\0\1\u0357\66\0\1\u0358\51\0"+
    "\1\u0359\112\0\1\u035a\66\0\1\u035b\55\0\1\u035c\73\0"+
    "\1\u035d\67\0\13\40\1\0\60\40\2\u0290\1\u02c5\2\u0290"+
    "\1\u035e\5\u0290\1\0\60\u0290\5\0\1\u035f\110\0\1\u0360"+
    "\125\0\1\u0361\21\0\1\u0362\76\0\1\u0363\73\0\1\u0364"+
    "\105\0\1\u0365\105\0\1\u0366\42\0\3\u01cc\1\u0367\7\u01cc"+
    "\1\0\5\u01cc\1\u0200\6\u01cc\1\u0201\43\u01cc\1\u0202\1\u023a"+
    "\11\u0202\1\0\5\u0202\1\u0203\4\u0202\1\u0368\1\u0202\1\u0204"+
    "\44\u0202\1\u023a\1\u0202\1\u0369\7\u0202\1\0\5\u0202\1\u0203"+
    "\6\u0202\1\u0204\43\u0202\1\u01ce\1\u0205\11\u01ce\1\0\20\u01ce"+
    "\1\u036a\37\u01ce\33\0\1\u036b\40\0\4\u026f\1\u02a1\6\u026f"+
    "\1\0\15\u026f\1\u036c\46\u026f\1\u02a1\6\u026f\1\0\15\u026f"+
    "\1\u036d\42\u026f\32\0\1\u036e\65\0\1\u036f\55\0\1\u0370"+
    "\73\0\1\u0371\117\0\1\u0372\50\0\1\u0373\73\0\1\u0374"+
    "\76\0\1\u0375\70\0\1\u0376\112\0\1\u0377\56\0\1\u0378"+
    "\64\0\1\u0379\73\0\1\u037a\75\0\1\u037b\77\0\1\u037c"+
    "\105\0\1\u037d\1\u037e\75\0\1\u037f\64\0\1\u0380\73\0"+
    "\1\u0381\51\0\1\u0382\57\0\1\u0383\73\0\1\u0384\17\0"+
    "\1\u0253\1\u0285\5\u0253\1\u0385\3\u0253\1\0\60\u0253\1\u0254"+
    "\1\u0286\11\u0254\1\0\15\u0254\1\u0386\42\u0254\1\u0355\1\u0387"+
    "\11\u0355\1\0\60\u0355\1\u0356\1\u0388\11\u0356\1\0\60\u0356"+
    "\7\0\1\u0389\111\0\1\u038a\100\0\1\u038b\50\0\1\u038c"+
    "\64\0\13\u038d\1\0\60\u038d\4\0\1\u038e\71\0\1\u038f"+
    "\71\0\2\u0290\1\u02c5\10\u0290\1\0\1\u0390\57\u0290\14\0"+
    "\1\u0391\101\0\1\u0360\1\u0392\102\0\1\u0393\65\0\1\u0394"+
    "\73\0\1\u0395\67\0\1\u0396\102\0\1\u0397\44\0\13\u01cc"+
    "\1\0\3\u01cc\1\u0398\1\u01cc\1\u0200\6\u01cc\1\u0201\43\u01cc"+
    "\1\u0202\1\u023a\11\u0202\1\0\5\u0202\1\u0203\3\u0202\1\u0399"+
    "\2\u0202\1\u0204\44\u0202\1\u023a\11\u0202\1\0\3\u0202\1\u039a"+
    "\1\u0202\1\u0203\6\u0202\1\u0204\43\u0202\1\u01ce\1\u0205\5\u01ce"+
    "\1\u039b\3\u01ce\1\0\60\u01ce\7\0\1\u039c\64\0\4\u026f"+
    "\1\u02a1\2\u026f\1\u039d\3\u026f\1\0\64\u026f\1\u02a1\2\u026f"+
    "\1\u039e\3\u026f\1\0\60\u026f\4\0\1\u039f\101\0\1\u03a0"+
    "\63\0\1\u03a1\100\0\1\u03a2\66\0\1\u03a3\113\0\1\u03a4"+
    "\73\0\1\u03a5\60\0\1\u03a6\110\0\1\u03a7\110\0\1\u03a8"+
    "\40\0\1\u03a9\117\0\1\u03aa\52\0\1\u03ab\110\0\1\u03ac"+
    "\72\0\1\u03ad\76\0\1\u03ae\65\0\1\u03af\61\0\1\u03b0"+
    "\74\0\1\u03b1\72\0\1\u03b2\105\0\1\u03b3\141\0\1\u03b4"+
    "\3\0\1\u0253\1\u0285\11\u0253\1\0\14\u0253\1\u03b5\43\u0253"+
    "\1\u0254\1\u0286\5\u0254\1\u03b6\3\u0254\1\0\60\u0254\1\u0355"+
    "\1\u0387\11\u0355\1\0\5\u0355\1\u03b7\52\u0355\1\u0356\1\u0388"+
    "\11\u0356\1\0\5\u0356\1\u03b8\52\u0356\6\0\1\u03b9\113\0"+
    "\1\u03ba\55\0\1\u03bb\105\0\1\u03bc\1\u03bd\50\0\1\u038d"+
    "\1\u03be\11\u038d\1\0\60\u038d\26\0\1\u03bf\56\0\1\u03c0"+
    "\62\0\2\u0290\1\u02c5\10\u0290\1\0\1\u0290\1\u03c1\56\u0290"+
    "\15\0\1\u03c2\106\0\1\u03c3\46\0\1\u03c4\102\0\1\u03c5"+
    "\73\0\1\u03c6\114\0\1\u03c7\72\0\1\u03c8\41\0\13\u01cc"+
    "\1\0\4\u01cc\1\u03c9\1\u0200\6\u01cc\1\u0201\43\u01cc\1\u0202"+
    "\1\u023a\11\u0202\1\0\5\u0202\1\u0203\5\u0202\1\u03ca\1\u0204"+
    "\44\u0202\1\u023a\11\u0202\1\0\4\u0202\1\u03cb\1\u0203\6\u0202"+
    "\1\u0204\43\u0202\1\u01ce\1\u0205\11\u01ce\1\0\6\u01ce\1\u03cc"+
    "\51\u01ce\31\0\1\u03cd\42\0\4\u026f\1\u02a1\6\u026f\1\0"+
    "\3\u026f\1\u03ce\60\u026f\1\u02a1\6\u026f\1\0\3\u026f\1\u03cf"+
    "\54\u026f\5\0\1\u03d0\105\0\1\u03d1\101\0\1\u03d2\100\0"+
    "\1\u03d3\70\0\1\u03d4\44\0\13\u03d5\1\0\60\u03d5\13\u03d6"+
    "\1\0\60\u03d6\22\0\1\u03d7\73\0\1\u03d8\1\u03d9\76\0"+
    "\1\u03da\56\0\1\u03db\65\0\1\u03dc\76\0\1\u03dd\126\0"+
    "\1\u03de\41\0\1\u03df\115\0\1\u03e0\67\0\1\u03e1\77\0"+
    "\1\u03e2\54\0\1\u03e3\71\0\1\u03e4\63\0\1\u0253\1\u0285"+
    "\11\u0253\1\0\11\u0253\1\u03e5\46\u0253\1\u0254\1\u0286\11\u0254"+
    "\1\0\10\u0254\1\u03e6\47\u0254\1\u0355\1\u0387\11\u0355\1\0"+
    "\10\u0355\1\u03e7\47\u0355\1\u0356\1\u0388\11\u0356\1\0\10\u0356"+
    "\1\u03e8\47\u0356\22\0\1\u03e9\112\0\1\u03ea\61\0\1\u03eb"+
    "\44\0\13\u03ec\1\0\60\u03ec\30\0\1\u03ed\43\0\1\u038d"+
    "\1\u03be\11\u038d\1\0\5\u038d\1\u03ee\52\u038d\41\0\1\u03ef"+
    "\40\0\1\u03f0\65\0\2\u0290\1\u02c5\10\u0290\1\0\2\u0290"+
    "\1\u03f1\55\u0290\16\0\1\u03f2\106\0\1\u03f3\61\0\1\u03f4"+
    "\73\0\1\u03f5\73\0\1\u03f6\101\0\1\u03f7\52\0\1\u03f8"+
    "\67\0\1\u0202\1\u023a\5\u0202\1\u03f9\3\u0202\1\0\5\u0202"+
    "\1\u0203\6\u0202\1\u0204\43\u0202\7\0\1\u03fa\64\0\4\u026f"+
    "\1\u02a1\6\u026f\1\0\4\u026f\1\u03fb\57\u026f\1\u02a1\6\u026f"+
    "\1\0\4\u026f\1\u03fc\53\u026f\24\0\1\u03fd\67\0\1\u03fe"+
    "\62\0\1\u03ff\76\0\1\u0400\103\0\1\u0401\51\0\1\u03d5"+
    "\1\u0402\11\u03d5\1\0\60\u03d5\1\u03d6\1\u0403\11\u03d6\1\0"+
    "\60\u03d6\13\u0404\1\0\60\u0404\13\u0405\1\0\60\u0405\4\0"+
    "\1\u0406\101\0\1\u0407\65\0\1\u0408\106\0\1\u0409\65\0"+
    "\1\u040a\110\0\1\u040b\51\0\1\u040c\116\0\1\u040d\53\0"+
    "\1\u040e\123\0\1\u040f\36\0\1\u0410\103\0\1\u0411\61\0"+
    "\1\u0253\1\u0285\5\u0253\1\u0412\3\u0253\1\0\60\u0253\1\u0254"+
    "\1\u0286\11\u0254\1\0\12\u0254\1\u0413\45\u0254\1\u0355\1\u0387"+
    "\10\u0355\1\u0414\1\0\60\u0355\1\u0356\1\u0388\10\u0356\1\u0415"+
    "\1\0\60\u0356\13\u0416\1\0\60\u0416\26\0\1\u0417\55\0"+
    "\1\u0418\63\0\1\u03ec\1\u0419\11\u03ec\1\0\60\u03ec\31\0"+
    "\1\u041a\42\0\1\u038d\1\u03be\11\u038d\1\0\10\u038d\1\u041b"+
    "\47\u038d\26\0\1\u041c\56\0\1\u041d\62\0\2\u0290\1\u02c5"+
    "\10\u0290\1\0\3\u0290\1\u041e\54\u0290\17\0\1\u041f\103\0"+
    "\1\u0420\64\0\1\u0421\73\0\1\u0422\73\0\1\u0423\100\0"+
    "\1\u0424\53\0\1\u0425\66\0\1\u0202\1\u023a\11\u0202\1\0"+
    "\5\u0202\1\u0203\1\u0426\5\u0202\1\u0204\43\u0202\17\0\1\u0427"+
    "\54\0\4\u026f\1\u02a1\6\u026f\1\0\10\u026f\1\u0428\51\u026f"+
    "\1\u0429\1\u026f\1\u02a1\6\u026f\1\0\10\u026f\1\u0428\16\u026f"+
    "\1\u042a\30\u026f\12\0\1\u042b\114\0\1\u042c\62\0\1\u042d"+
    "\60\0\1\u042e\64\0\13\u042f\1\0\60\u042f\1\u03d5\1\u0402"+
    "\11\u03d5\1\0\5\u03d5\1\u0430\52\u03d5\1\u03d6\1\u0403\11\u03d6"+
    "\1\0\5\u03d6\1\u0431\52\u03d6\1\u0404\1\u0432\11\u0404\1\0"+
    "\60\u0404\1\u0405\1\u0433\11\u0405\1\0\60\u0405\12\0\1\u0434"+
    "\63\0\1\u0435\71\0\13\u0436\1\0\7\u0436\1\u0437\50\u0436"+
    "\20\0\1\u0438\57\0\1\u0439\101\0\1\u043a\103\0\1\u043b"+
    "\1\u043c\55\0\1\u043d\72\0\1\u043e\76\0\1\u043f\111\0"+
    "\1\u0440\50\0\1\u0441\71\0\1\u0253\1\u0285\11\u0253\1\0"+
    "\16\u0253\1\u0442\41\u0253\1\u0254\1\u0286\7\u0254\1\u0443\1\u0254"+
    "\1\0\60\u0254\1\u0355\1\u0387\11\u0355\1\0\11\u0355\1\u0444"+
    "\46\u0355\1\u0356\1\u0388\11\u0356\1\0\11\u0356\1\u0445\46\u0356"+
    "\1\u0416\1\u0446\11\u0416\1\0\60\u0416\7\0\1\u0447\67\0"+
    "\1\u0448\70\0\1\u03ec\1\u0419\11\u03ec\1\0\5\u03ec\1\u0449"+
    "\52\u03ec\27\0\1\u044a\44\0\1\u038d\1\u03be\10\u038d\1\u044b"+
    "\1\0\60\u038d\12\0\1\u044c\65\0\1\u025c\67\0\2\u0290"+
    "\1\u02c5\10\u0290\1\0\4\u0290\1\u044d\53\u0290\20\0\1\u044e"+
    "\105\0\1\u044f\50\0\1\u0450\117\0\1\u0451\73\0\1\u0452"+
    "\74\0\1\u0453\63\0\1\u0454\67\0\1\u0455\53\0\4\u026f"+
    "\1\u02a1\5\u026f\1\u0456\1\0\63\u026f\1\u0457\1\u02a1\6\u026f"+
    "\1\0\64\u026f\1\u02a1\6\u026f\1\0\30\u026f\1\u0458\27\u026f"+
    "\17\0\1\u0459\101\0\1\u045a\46\0\13\u045b\1\0\60\u045b"+
    "\22\0\1\u045c\51\0\1\u042f\1\u045d\11\u042f\1\0\60\u042f"+
    "\1\u03d5\1\u0402\1\u045e\10\u03d5\1\0\60\u03d5\1\u03d6\1\u0403"+
    "\1\u045f\10\u03d6\1\0\60\u03d6\1\u0404\1\u0432\11\u0404\1\0"+
    "\5\u0404\1\u0460\52\u0404\1\u0405\1\u0433\11\u0405\1\0\5\u0405"+
    "\1\u0461\52\u0405\33\0\1\u0462\65\0\1\u0463\46\0\4\u0436"+
    "\1\u0464\6\u0436\1\0\64\u0436\1\u0464\6\u0436\1\0\14\u0436"+
    "\1\u0465\43\u0436\22\0\1\u0466\53\0\1\u0467\121\0\1\u0468"+
    "\72\0\1\u0469\66\0\1\u046a\57\0\1\u046b\113\0\1\u046c"+
    "\72\0\1\u046d\46\0\1\u0253\1\u0285\11\u0253\1\0\11\u0253"+
    "\1\u046e\46\u0253\1\u0254\1\u0286\11\u0254\1\0\15\u0254\1\u046f"+
    "\42\u0254\1\u0355\1\u0387\5\u0355\1\u0470\3\u0355\1\0\60\u0355"+
    "\1\u0356\1\u0388\5\u0356\1\u0471\3\u0356\1\0\60\u0356\1\u0416"+
    "\1\u0446\11\u0416\1\0\5\u0416\1\u0472\52\u0416\6\0\1\u0473"+
    "\141\0\1\u0474\17\0\1\u03ec\1\u0419\1\u0475\10\u03ec\1\0"+
    "\60\u03ec\5\0\1\u0476\66\0\1\u038d\1\u03be\11\u038d\1\0"+
    "\11\u038d\1\u0477\46\u038d\2\0\1\u0478\71\0\2\u0290\1\u02c5"+
    "\10\u0290\1\0\4\u0290\1\u0479\53\u0290\4\0\1\u047a\121\0"+
    "\1\u047b\66\0\1\u047c\73\0\1\u047d\53\0\1\u047e\100\0"+
    "\1\u047f\105\0\1\u0480\47\0\4\u026f\1\u02a1\6\u026f\1\0"+
    "\11\u026f\1\u0481\52\u026f\1\u0482\6\u026f\1\0\64\u026f\1\u02a1"+
    "\6\u026f\1\0\31\u026f\1\u0483\26\u026f\20\0\1\u0484\100\0"+
    "\1\u0485\46\0\1\u045b\1\u0486\11\u045b\1\0\60\u045b\13\u0487"+
    "\1\0\60\u0487\1\u042f\1\u045d\11\u042f\1\0\5\u042f\1\u0488"+
    "\52\u042f\1\u03d5\1\u0402\1\u03d5\1\u0489\7\u03d5\1\0\60\u03d5"+
    "\1\u03d6\1\u0403\1\u03d6\1\u048a\7\u03d6\1\0\60\u03d6\1\u0404"+
    "\1\u0432\1\u048b\10\u0404\1\0\60\u0404\1\u0405\1\u0433\11\u0405"+
    "\1\0\10\u0405\1\u048c\47\u0405\7\0\1\u048d\112\0\1\u048e"+
    "\45\0\4\u0436\1\u0464\5\u0436\1\u048f\1\0\64\u0436\1\u0464"+
    "\6\u0436\1\0\15\u0436\1\u0490\42\u0436\25\0\1\u0491\77\0"+
    "\1\u0492\44\0\1\u0493\113\0\1\u0494\61\0\1\u0495\111\0"+
    "\1\u0496\45\0\1\u0253\1\u0285\11\u0253\1\0\6\u0253\1\u0497"+
    "\51\u0253\1\u0254\1\u0286\11\u0254\1\0\6\u0254\1\u0498\51\u0254"+
    "\1\u0355\1\u0387\4\u0355\1\u0499\4\u0355\1\0\60\u0355\1\u0356"+
    "\1\u0388\4\u0356\1\u049a\4\u0356\1\0\60\u0356\1\u0416\1\u0446"+
    "\1\u049b\10\u0416\1\0\60\u0416\23\0\1\u049c\72\0\1\u049d"+
    "\51\0\1\u03ec\1\u0419\1\u03ec\1\u049e\7\u03ec\1\0\60\u03ec"+
    "\27\0\1\u049f\44\0\1\u038d\1\u03be\5\u038d\1\u04a0\3\u038d"+
    "\1\0\60\u038d\25\0\1\u04a1\53\0\1\u04a2\106\0\1\u04a3"+
    "\100\0\1\u04a4\73\0\1\u04a5\67\0\1\u04a6\71\0\1\u04a7"+
    "\66\0\1\u04a8\61\0\4\u026f\1\u02a1\2\u026f\1\u04a9\3\u026f"+
    "\1\0\64\u026f\1\u02a1\1\u04aa\4\u026f\1\u02d4\1\0\64\u026f"+
    "\1\u02a1\6\u026f\1\0\32\u026f\1\u04ab\25\u026f\33\0\1\u04ac"+
    "\74\0\1\u04ad\37\0\1\u045b\1\u0486\11\u045b\1\0\5\u045b"+
    "\1\u04ae\52\u045b\1\u0487\1\u04af\11\u0487\1\0\60\u0487\1\u042f"+
    "\1\u045d\1\u04b0\10\u042f\1\0\60\u042f\1\u03d5\1\u0402\2\u03d5"+
    "\1\u04b1\6\u03d5\1\0\60\u03d5\1\u03d6\1\u0403\2\u03d6\1\u04b2"+
    "\6\u03d6\1\0\60\u03d6\1\u0404\1\u0432\1\u0404\1\u04b3\7\u0404"+
    "\1\0\60\u0404\1\u0405\1\u0433\10\u0405\1\u04b4\1\0\60\u0405"+
    "\31\0\1\u04b5\52\0\1\u04b6\63\0\4\u0436\1\u0464\6\u0436"+
    "\1\0\17\u0436\1\u04b7\44\u0436\1\u0464\6\u0436\1\0\13\u0436"+
    "\1\u04b8\44\u0436\26\0\1\u04b9\74\0\1\u04ba\76\0\1\u04bb"+
    "\41\0\13\u04bc\1\0\60\u04bc\32\0\1\u04bd\51\0\1\u04be"+
    "\63\0\1\u0355\1\u0387\11\u0355\1\0\15\u0355\1\u04bf\42\u0355"+
    "\1\u0356\1\u0388\11\u0356\1\0\15\u0356\1\u04c0\42\u0356\1\u0416"+
    "\1\u0446\1\u0416\1\u04c1\7\u0416\1\0\60\u0416\4\0\1\u04c2"+
    "\67\0\13\u04c3\1\0\60\u04c3\1\u03ec\1\u0419\2\u03ec\1\u04c4"+
    "\6\u03ec\1\0\60\u03ec\2\0\1\u04c5\71\0\1\u038d\1\u03be"+
    "\4\u038d\1\u04c6\4\u038d\1\0\60\u038d\26\0\1\u04c7\47\0"+
    "\1\u04c8\113\0\1\u0231\105\0\1\u04c9\73\0\1\u04ca\60\0"+
    "\1\u04cb\105\0\1\u04cc\65\0\1\u04cd\46\0\4\u026f\1\u02a1"+
    "\1\u026f\1\u04ce\4\u026f\1\0\64\u026f\1\u02a1\6\u026f\1\0"+
    "\27\u026f\1\u04cf\34\u026f\1\u02a1\6\u026f\1\0\33\u026f\1\u04d0"+
    "\24\u026f\25\0\1\u04d1\53\0\1\u04d2\66\0\1\u045b\1\u0486"+
    "\1\u04d3\10\u045b\1\0\60\u045b\1\u0487\1\u04af\11\u0487\1\0"+
    "\5\u0487\1\u04d4\52\u0487\1\u042f\1\u045d\1\u042f\1\u04d5\7\u042f"+
    "\1\0\60\u042f\1\u03d5\1\u0402\3\u03d5\1\u04d6\5\u03d5\1\0"+
    "\60\u03d5\1\u03d6\1\u0403\3\u03d6\1\u04d7\5\u03d6\1\0\60\u03d6"+
    "\1\u0404\1\u0432\2\u0404\1\u04d8\6\u0404\1\0\60\u0404\1\u0405"+
    "\1\u0433\11\u0405\1\0\11\u0405\1\u04d9\46\u0405\7\0\1\u04da"+
    "\116\0\1\u04db\41\0\4\u0436\1\u0464\2\u0436\1\u04dc\3\u0436"+
    "\1\0\64\u0436\1\u0464\1\u04dd\5\u0436\1\0\60\u0436\10\0"+
    "\1\u04de\70\0\1\u04df\71\0\1\u04e0\70\0\1\u04bc\1\u04e1"+
    "\11\u04bc\1\0\60\u04bc\22\0\1\u04e2\103\0\1\u04e3\41\0"+
    "\1\u0355\1\u0387\2\u0355\1\u04e4\6\u0355\1\0\60\u0355\1\u0356"+
    "\1\u0388\2\u0356\1\u04e5\6\u0356\1\0\60\u0356\1\u0416\1\u0446"+
    "\2\u0416\1\u04e6\6\u0416\1\0\60\u0416\12\0\1\u04e7\61\0"+
    "\1\u04c3\1\u04e8\11\u04c3\1\0\60\u04c3\1\u03ec\1\u0419\3\u03ec"+
    "\1\u04e9\5\u03ec\1\0\60\u03ec\32\0\1\u04ea\41\0\1\u038d"+
    "\1\u03be\11\u038d\1\0\15\u038d\1\u04eb\42\u038d\10\0\1\u04ec"+
    "\66\0\1\u04ed\75\0\1\u04ee\73\0\1\u04ef\122\0\1\u04f0"+
    "\64\0\1\u04f1\55\0\1\u04f2\64\0\4\u026f\1\u02a1\6\u026f"+
    "\1\0\15\u026f\1\u04f3\46\u026f\1\u02a1\6\u026f\1\0\30\u026f"+
    "\1\u04f4\33\u026f\1\u02a1\6\u026f\1\0\34\u026f\1\u04f5\23\u026f"+
    "\25\0\1\u04f6\67\0\1\u04f7\52\0\1\u045b\1\u0486\1\u045b"+
    "\1\u04f8\7\u045b\1\0\60\u045b\1\u0487\1\u04af\1\u04f9\10\u0487"+
    "\1\0\60\u0487\1\u042f\1\u045d\2\u042f\1\u04fa\6\u042f\1\0"+
    "\60\u042f\1\u03d5\1\u0402\11\u03d5\1\0\20\u03d5\1\u04fb\37\u03d5"+
    "\1\u03d6\1\u0403\11\u03d6\1\0\20\u03d6\1\u04fc\37\u03d6\1\u0404"+
    "\1\u0432\3\u0404\1\u04fd\5\u0404\1\0\60\u0404\1\u0405\1\u0433"+
    "\5\u0405\1\u04fe\3\u0405\1\0\60\u0405\17\0\1\u04ff\54\0"+
    "\13\u0500\1\0\7\u0500\1\u0501\50\u0500\4\u0436\1\u0464\6\u0436"+
    "\1\0\15\u0436\1\u0502\46\u0436\1\u0464\6\u0436\1\0\13\u0436"+
    "\1\u0503\44\u0436\32\0\1\u0504\70\0\1\u0505\63\0\1\u0506"+
    "\54\0\1\u04bc\1\u04e1\11\u04bc\1\0\5\u04bc\1\u0507\52\u04bc"+
    "\22\0\1\u0508\51\0\1\u0355\1\u0387\3\u0355\1\u0509\5\u0355"+
    "\1\0\60\u0355\1\u0356\1\u0388\3\u0356\1\u050a\5\u0356\1\0"+
    "\60\u0356\1\u0416\1\u0446\3\u0416\1\u050b\5\u0416\1\0\60\u0416"+
    "\33\0\1\u050c\40\0\1\u04c3\1\u04e8\11\u04c3\1\0\5\u04c3"+
    "\1\u050d\52\u04c3\1\u03ec\1\u0419\10\u03ec\1\u050e\1\0\60\u03ec"+
    "\3\0\1\u050f\70\0\1\u038d\1\u03be\2\u038d\1\u0510\6\u038d"+
    "\1\0\60\u038d\32\0\1\u025c\70\0\1\u0511\65\0\1\u0512"+
    "\73\0\1\u0513\63\0\1\u0514\107\0\1\u0515\54\0\1\u0516"+
    "\65\0\4\u026f\1\u0517\6\u026f\1\0\64\u026f\1\u02a1\6\u026f"+
    "\1\0\31\u026f\1\u0518\32\u026f\1\u02a1\6\u026f\1\0\35\u026f"+
    "\1\u0519\22\u026f\34\0\1\u051a\60\0\1\u051b\52\0\1\u045b"+
    "\1\u0486\2\u045b\1\u051c\6\u045b\1\0\60\u045b\1\u0487\1\u04af"+
    "\1\u0487\1\u051d\7\u0487\1\0\60\u0487\1\u042f\1\u045d\3\u042f"+
    "\1\u051e\5\u042f\1\0\60\u042f\1\u03d5\1\u0402\7\u03d5\1\u051f"+
    "\1\u03d5\1\0\60\u03d5\1\u03d6\1\u0403\7\u03d6\1\u0520\1\u03d6"+
    "\1\0\60\u03d6\1\u0404\1\u0432\11\u0404\1\0\20\u0404\1\u0521"+
    "\37\u0404\1\u0405\1\u0433\4\u0405\1\u0522\4\u0405\1\0\60\u0405"+
    "\20\0\1\u0523\53\0\4\u0500\1\u0524\6\u0500\1\0\64\u0500"+
    "\1\u0524\6\u0500\1\0\14\u0500\1\u0525\43\u0500\4\u0436\1\u0464"+
    "\2\u0436\1\u0526\3\u0436\1\0\62\u0436\1\u0527\1\u0436\1\u0464"+
    "\6\u0436\1\0\60\u0436\22\0\1\u0528\53\0\1\u0529\111\0"+
    "\1\u052a\53\0\1\u04bc\1\u04e1\1\u052b\10\u04bc\1\0\60\u04bc"+
    "\1\u0355\1\u0387\5\u0355\1\u052c\3\u0355\1\0\60\u0355\1\u0356"+
    "\1\u0388\11\u0356\1\0\15\u0356\1\u052d\42\u0356\1\u0416\1\u0446"+
    "\10\u0416\1\u052e\1\0\60\u0416\7\0\1\u052f\64\0\1\u04c3"+
    "\1\u04e8\1\u0530\10\u04c3\1\0\60\u04c3\1\u03ec\1\u0419\11\u03ec"+
    "\1\0\12\u03ec\1\u0531\45\u03ec\17\0\1\u0532\54\0\1\u038d"+
    "\1\u03be\3\u038d\1\u0533\5\u038d\1\0\60\u038d\4\0\1\u0534"+
    "\110\0\1\u0535\73\0\1\u0536\60\0\1\u0537\121\0\1\u0538"+
    "\70\0\1\u0539\42\0\4\u026f\1\u02a1\1\u053a\4\u026f\1\u02d4"+
    "\1\0\64\u026f\1\u02a1\6\u026f\1\0\32\u026f\1\u053b\31\u026f"+
    "\1\u02a1\6\u026f\1\0\36\u026f\1\u053c\21\u026f\5\0\1\u053d"+
    "\122\0\1\u053e\37\0\1\u045b\1\u0486\3\u045b\1\u053f\5\u045b"+
    "\1\0\60\u045b\1\u0487\1\u04af\2\u0487\1\u0540\6\u0487\1\0"+
    "\60\u0487\1\u042f\1\u045d\10\u042f\1\u0541\1\0\60\u042f\1\u03d5"+
    "\1\u0402\11\u03d5\1\0\23\u03d5\1\u0542\34\u03d5\1\u03d6\1\u0403"+
    "\11\u03d6\1\0\23\u03d6\1\u0543\34\u03d6\1\u0404\1\u0432\7\u0404"+
    "\1\u0544\1\u0404\1\0\60\u0404\1\u0405\1\u0433\11\u0405\1\0"+
    "\15\u0405\1\u0545\42\u0405\24\0\1\u0546\47\0\4\u0500\1\u0524"+
    "\5\u0500\1\u0547\1\0\64\u0500\1\u0524\6\u0500\1\0\15\u0500"+
    "\1\u0548\42\u0500\4\u0436\1\u0464\6\u0436\1\0\3\u0436\1\u0549"+
    "\60\u0436\1\u0464\6\u0436\1\0\16\u0436\1\u054a\41\u0436\32\0"+
    "\1\u054b\41\0\1\u04bc\1\u04e1\1\u04bc\1\u054c\7\u04bc\1\0"+
    "\60\u04bc\1\u0355\1\u0387\11\u0355\1\0\14\u0355\1\u054d\43\u0355"+
    "\1\u0356\1\u0388\5\u0356\1\u054e\3\u0356\1\0\60\u0356\1\u0416"+
    "\1\u0446\11\u0416\1\0\12\u0416\1\u054f\45\u0416\31\0\1\u0550"+
    "\42\0\1\u04c3\1\u04e8\1\u04c3\1\u0551\7\u04c3\1\0\60\u04c3"+
    "\1\u03ec\1\u0419\11\u03ec\1\0\11\u03ec\1\u0552\46\u03ec\20\0"+
    "\1\u0553\53\0\1\u038d\1\u03be\2\u038d\1\u0554\6\u038d\1\0"+
    "\60\u038d\17\0\1\u0555\110\0\1\u0556\73\0\1\u0557\66\0"+
    "\1\u0558\51\0\1\u0303\72\0\1\u0559\67\0\4\u026f\1\u02a1"+
    "\6\u026f\1\0\27\u026f\1\u042a\34\u026f\1\u02a1\6\u026f\1\0"+
    "\33\u026f\1\u055a\30\u026f\1\u02a1\6\u026f\1\0\4\u026f\1\u055b"+
    "\53\u026f\21\0\1\u055c\63\0\1\u055d\62\0\1\u045b\1\u0486"+
    "\10\u045b\1\u055e\1\0\60\u045b\1\u0487\1\u04af\3\u0487\1\u055f"+
    "\5\u0487\1\0\60\u0487\1\u042f\1\u045d\4\u042f\1\u0560\4\u042f"+
    "\1\0\60\u042f\1\u03d5\1\u0402\11\u03d5\1\0\13\u03d5\1\u0561"+
    "\44\u03d5\1\u03d6\1\u0403\11\u03d6\1\0\13\u03d6\1\u0562\44\u03d6"+
    "\1\u0404\1\u0432\11\u0404\1\0\23\u0404\1\u0563\34\u0404\1\u0405"+
    "\1\u0433\2\u0405\1\u0564\6\u0405\1\0\60\u0405\12\0\1\u0565"+
    "\61\0\4\u0500\1\u0524\6\u0500\1\0\17\u0500\1\u0566\44\u0500"+
    "\1\u0524\6\u0500\1\0\13\u0500\1\u0567\44\u0500\4\u0436\1\u0464"+
    "\6\u0436\1\0\4\u0436\1\u0568\56\u0436\1\u0569\1\u0464\6\u0436"+
    "\1\0\60\u0436\3\0\1\u056a\70\0\1\u04bc\1\u04e1\2\u04bc"+
    "\1\u056b\6\u04bc\1\0\60\u04bc\1\u0355\1\u0387\11\u0355\1\0"+
    "\11\u0355\1\u056c\46\u0355\1\u0356\1\u0388\11\u0356\1\0\10\u0356"+
    "\1\u056d\47\u0356\1\u0416\1\u0446\11\u0416\1\0\11\u0416\1\u056e"+
    "\46\u0416\7\0\1\u056f\64\0\1\u04c3\1\u04e8\2\u04c3\1\u0570"+
    "\6\u04c3\1\0\60\u04c3\1\u03ec\1\u0419\1\u0571\10\u03ec\1\0"+
    "\60\u03ec\7\0\1\u0572\2\0\1\u0572\61\0\1\u038d\1\u03be"+
    "\11\u038d\1\0\20\u038d\1\u0573\37\u038d\20\0\1\u0574\64\0"+
    "\1\u0575\73\0\1\u0576\117\0\1\u0577\43\0\1\u0578\66\0"+
    "\4\u026f\1\u02a1\6\u026f\1\0\34\u026f\1\u0579\27\u026f\1\u02a1"+
    "\6\u026f\1\0\6\u026f\1\u057a\51\u026f\21\0\1\u057b\60\0"+
    "\1\u057c\65\0\1\u045b\1\u0486\4\u045b\1\u057d\4\u045b\1\0"+
    "\60\u045b\1\u0487\1\u04af\10\u0487\1\u057e\1\0\60\u0487\1\u042f"+
    "\1\u045d\5\u042f\1\u057f\3\u042f\1\0\60\u042f\1\u03d5\1\u0402"+
    "\11\u03d5\1\0\12\u03d5\1\u0580\45\u03d5\1\u03d6\1\u0403\11\u03d6"+
    "\1\0\12\u03d6\1\u0581\45\u03d6\1\u0404\1\u0432\11\u0404\1\0"+
    "\13\u0404\1\u0582\44\u0404\1\u0405\1\u0433\3\u0405\1\u0583\5\u0405"+
    "\1\0\60\u0405\25\0\1\u0584\46\0\4\u0500\1\u0524\2\u0500"+
    "\1\u0585\3\u0500\1\0\64\u0500\1\u0524\1\u0586\5\u0500\1\0"+
    "\60\u0500\2\u0436\1\u0587\1\u0436\1\u0464\6\u0436\1\0\64\u0436"+
    "\1\u0464\6\u0436\1\0\3\u0436\1\u0588\54\u0436\17\0\1\u0589"+
    "\54\0\1\u04bc\1\u04e1\3\u04bc\1\u058a\5\u04bc\1\0\60\u04bc"+
    "\1\u0355\1\u0387\5\u0355\1\u058b\3\u0355\1\0\60\u0355\1\u0356"+
    "\1\u0388\11\u0356\1\0\12\u0356\1\u058c\45\u0356\1\u0416\1\u0446"+
    "\1\u058d\10\u0416\1\0\60\u0416\17\0\1\u058e\54\0\1\u04c3"+
    "\1\u04e8\3\u04c3\1\u058f\5\u04c3\1\0\60\u04c3\1\u03ec\1\u0419"+
    "\11\u03ec\1\0\11\u03ec\1\u0590\46\u03ec\32\0\1\u0591\41\0"+
    "\1\u038d\1\u03be\1\u0592\10\u038d\1\0\60\u038d\33\0\1\u0593"+
    "\46\0\1\u0594\73\0\1\u0595\75\0\1\u0596\125\0\1\u0597"+
    "\31\0\4\u026f\1\u02a1\6\u026f\1\0\35\u026f\1\u0598\22\u026f"+
    "\13\u0599\1\0\60\u0599\34\0\1\u059a\66\0\1\u059b\44\0"+
    "\1\u045b\1\u0486\5\u045b\1\u059c\3\u045b\1\0\60\u045b\1\u0487"+
    "\1\u04af\4\u0487\1\u059d\4\u0487\1\0\60\u0487\1\u042f\1\u045d"+
    "\1\u059e\10\u042f\1\0\60\u042f\1\u03d5\1\u0402\2\u03d5\1\u059f"+
    "\6\u03d5\1\0\60\u03d5\1\u03d6\1\u0403\2\u03d6\1\u05a0\6\u03d6"+
    "\1\0\60\u03d6\1\u0404\1\u0432\11\u0404\1\0\12\u0404\1\u05a1"+
    "\45\u0404\1\u0405\1\u0433\11\u0405\1\0\10\u0405\1\u05a2\47\u0405"+
    "\7\0\1\u05a3\64\0\4\u0500\1\u0524\6\u0500\1\0\15\u0500"+
    "\1\u05a4\46\u0500\1\u0524\6\u0500\1\0\13\u0500\1\u05a5\44\u0500"+
    "\3\u0436\1\u05a6\1\u0464\6\u0436\1\0\64\u0436\1\u0464\6\u0436"+
    "\1\0\4\u0436\1\u05a7\53\u0436\20\0\1\u05a8\53\0\1\u04bc"+
    "\1\u04e1\1\u05a9\10\u04bc\1\0\60\u04bc\1\u0355\1\u0387\11\u0355"+
    "\1\0\16\u0355\1\u05aa\41\u0355\1\u0356\1\u0388\7\u0356\1\u05ab"+
    "\1\u0356\1\0\60\u0356\1\u0416\1\u0446\11\u0416\1\0\11\u0416"+
    "\1\u05ac\46\u0416\20\0\1\u05ad\53\0\1\u04c3\1\u04e8\10\u04c3"+
    "\1\u05ae\1\0\60\u04c3\1\u03ec\1\u0419\11\u03ec\1\0\12\u03ec"+
    "\1\u05af\45\u03ec\20\0\1\u05b0\53\0\1\u038d\1\u03be\11\u038d"+
    "\1\0\11\u038d\1\u05b1\46\u038d\25\0\1\u05b2\75\0\1\u05b3"+
    "\73\0\1\u05b4\52\0\1\u05b5\102\0\1\u05b6\56\0\4\u026f"+
    "\1\u02a1\6\u026f\1\0\22\u026f\1\u05b7\35\u026f\1\u0599\1\u05b8"+
    "\11\u0599\1\0\60\u0599\11\0\1\u05b9\117\0\1\u05ba\36\0"+
    "\1\u045b\1\u0486\1\u05bb\10\u045b\1\0\60\u045b\1\u0487\1\u04af"+
    "\5\u0487\1\u05bc\3\u0487\1\0\60\u0487\1\u042f\1\u045d\11\u042f"+
    "\1\0\11\u042f\1\u05bd\46\u042f\1\u03d5\1\u0402\11\u03d5\1\0"+
    "\17\u03d5\1\u05be\40\u03d5\1\u03d6\1\u0403\11\u03d6\1\0\17\u03d6"+
    "\1\u05bf\40\u03d6\1\u0404\1\u0432\2\u0404\1\u05c0\6\u0404\1\0"+
    "\60\u0404\1\u0405\1\u0433\1\u05c1\10\u0405\1\0\60\u0405\6\0"+
    "\1\u05c2\65\0\4\u0500\1\u0524\2\u0500\1\u05c3\3\u0500\1\0"+
    "\62\u0500\1\u05c4\1\u0500\1\u0524\6\u0500\1\0\60\u0500\4\u0436"+
    "\1\u05c5\6\u0436\1\0\60\u0436\1\u04bc\1\u04e1\11\u04bc\1\0"+
    "\37\u04bc\1\u05c6\20\u04bc\1\u0355\1\u0387\11\u0355\1\0\11\u0355"+
    "\1\u05c7\46\u0355\1\u0356\1\u0388\11\u0356\1\0\15\u0356\1\u05c8"+
    "\42\u0356\1\u0416\1\u0446\11\u0416\1\0\12\u0416\1\u05c9\45\u0416"+
    "\2\0\1\u05ca\71\0\1\u04c3\1\u04e8\11\u04c3\1\0\12\u04c3"+
    "\1\u05cb\45\u04c3\1\u03ec\1\u0419\6\u03ec\1\u05cc\2\u03ec\1\0"+
    "\60\u03ec\22\0\1\u03bc\51\0\1\u038d\1\u03be\11\u038d\1\0"+
    "\12\u038d\1\u05cd\45\u038d\25\0\1\u05ce\103\0\1\u05cf\73\0"+
    "\1\u05d0\41\0\1\u05d1\133\0\1\u05d2\30\0\4\u026f\1\u02a1"+
    "\6\u026f\1\0\4\u026f\1\u05d3\53\u026f\1\u0599\1\u05b8\11\u0599"+
    "\1\0\5\u0599\1\u05d4\52\u0599\6\0\1\u05d5\75\0\1\u05d6"+
    "\63\0\1\u045b\1\u0486\11\u045b\1\0\11\u045b\1\u05d7\46\u045b"+
    "\1\u0487\1\u04af\1\u05d8\10\u0487\1\0\60\u0487\1\u042f\1\u045d"+
    "\6\u042f\1\u05d9\2\u042f\1\0\60\u042f\1\u03d5\1\u0402\5\u03d5"+
    "\1\u05da\3\u03d5\1\0\60\u03d5\1\u03d6\1\u0403\5\u03d6\1\u05db"+
    "\3\u03d6\1\0\60\u03d6\1\u0404\1\u0432\11\u0404\1\0\17\u0404"+
    "\1\u05dc\40\u0404\1\u0405\1\u0433\11\u0405\1\0\11\u0405\1\u05dd"+
    "\46\u0405\31\0\1\u05de\42\0\4\u0500\1\u0524\6\u0500\1\0"+
    "\3\u0500\1\u05df\60\u0500\1\u0524\6\u0500\1\0\16\u0500\1\u05e0"+
    "\41\u0500\4\u0436\1\u0464\1\u05e1\4\u0436\1\u048f\1\0\60\u0436"+
    "\1\u04bc\1\u04e1\1\u05e2\10\u04bc\1\0\60\u04bc\1\u0355\1\u0387"+
    "\11\u0355\1\0\6\u0355\1\u05e3\51\u0355\1\u0356\1\u0388\11\u0356"+
    "\1\0\6\u0356\1\u05e4\51\u0356\1\u0416\1\u0446\6\u0416\1\u05e5"+
    "\2\u0416\1\0\60\u0416\3\0\1\u05e6\70\0\1\u04c3\1\u04e8"+
    "\11\u04c3\1\0\11\u04c3\1\u05e7\46\u04c3\1\u03ec\1\u0419\11\u03ec"+
    "\1\0\16\u03ec\1\u05e8\41\u03ec\1\u038d\1\u03be\1\u05e9\10\u038d"+
    "\1\0\60\u038d\34\0\1\u05ea\47\0\1\u05eb\73\0\1\u05ec"+
    "\104\0\1\u05ed\72\0\1\u05ee\53\0\4\u026f\1\u02a1\6\u026f"+
    "\1\0\6\u026f\1\u05ef\51\u026f\1\u0599\1\u05b8\11\u0599\1\0"+
    "\10\u0599\1\u05f0\47\u0599\27\0\1\u05f1\52\0\1\u05f2\65\0"+
    "\1\u045b\1\u0486\6\u045b\1\u05f3\2\u045b\1\0\60\u045b\1\u0487"+
    "\1\u04af\11\u0487\1\0\11\u0487\1\u05f4\46\u0487\1\u042f\1\u045d"+
    "\4\u042f\1\u05f5\4\u042f\1\0\60\u042f\1\u03d5\1\u0402\4\u03d5"+
    "\1\u05f6\4\u03d5\1\0\60\u03d5\1\u03d6\1\u0403\4\u03d6\1\u05f7"+
    "\4\u03d6\1\0\60\u03d6\1\u0404\1\u0432\5\u0404\1\u05f8\3\u0404"+
    "\1\0\60\u0404\1\u0405\1\u0433\5\u0405\1\u05f9\3\u0405\1\0"+
    "\60\u0405\4\0\1\u05fa\67\0\4\u0500\1\u0524\6\u0500\1\0"+
    "\4\u0500\1\u05fb\56\u0500\1\u05fc\1\u0524\6\u0500\1\0\60\u0500"+
    "\1\u04bc\1\u04e1\11\u04bc\1\0\12\u04bc\1\u05fd\45\u04bc\1\u0416"+
    "\1\u0446\11\u0416\1\0\16\u0416\1\u05fe\41\u0416\4\0\1\u05ff"+
    "\67\0\1\u04c3\1\u04e8\1\u0600\10\u04c3\1\0\60\u04c3\1\u03ec"+
    "\1\u0419\11\u03ec\1\0\52\u03ec\1\u0601\5\u03ec\1\u038d\1\u03be"+
    "\11\u038d\1\0\13\u038d\1\u0602\44\u038d\5\0\1\u0603\74\0"+
    "\1\u0604\73\0\1\u0605\111\0\1\u0606\71\0\1\u0607\51\0"+
    "\13\u0608\1\0\60\u0608\1\u0599\1\u05b8\10\u0599\1\u0609\1\0"+
    "\60\u0599\35\0\1\u060a\41\0\1\u060b\70\0\1\u045b\1\u0486"+
    "\4\u045b\1\u060c\4\u045b\1\0\60\u045b\1\u0487\1\u04af\6\u0487"+
    "\1\u060d\2\u0487\1\0\60\u0487\1\u042f\1\u045d\11\u042f\1\0"+
    "\57\u042f\1\u060e\1\u03d5\1\u0402\11\u03d5\1\0\2\u03d5\1\u060f"+
    "\55\u03d5\1\u03d6\1\u0403\11\u03d6\1\0\51\u03d6\1\u0610\6\u03d6"+
    "\1\u0404\1\u0432\4\u0404\1\u0611\4\u0404\1\0\60\u0404\1\u0405"+
    "\1\u0433\11\u0405\1\0\27\u0405\1\u0612\30\u0405\5\0\1\u0613"+
    "\66\0\2\u0500\1\u0614\1\u0500\1\u0524\6\u0500\1\0\10\u0500"+
    "\1\u0615\53\u0500\1\u0524\6\u0500\1\0\3\u0500\1\u0616\54\u0500"+
    "\1\u04bc\1\u04e1\11\u04bc\1\0\13\u04bc\1\u0617\44\u04bc\1\u0416"+
    "\1\u0446\11\u0416\1\0\2\u0416\1\u0618\55\u0416\5\0\1\u0619"+
    "\66\0\1\u04c3\1\u04e8\11\u04c3\1\0\11\u04c3\1\u061a\46\u04c3"+
    "\1\u03ec\1\u0419\11\u03ec\1\0\12\u03ec\1\u061b\45\u03ec\1\u038d"+
    "\1\u03be\11\u038d\1\0\6\u038d\1\u061c\51\u038d\21\0\1\u061d"+
    "\55\0\1\u061e\73\0\1\u061f\102\0\1\u0620\61\0\1\u0608"+
    "\1\u0621\11\u0608\1\0\60\u0608\1\u0599\1\u05b8\3\u0599\1\u0622"+
    "\5\u0599\1\0\60\u0599\10\0\1\u0623\104\0\1\u0624\52\0"+
    "\1\u045b\1\u0486\11\u045b\1\0\50\u045b\1\u0625\7\u045b\1\u0487"+
    "\1\u04af\4\u0487\1\u0626\4\u0487\1\0\60\u0487\1\u042f\1\u045d"+
    "\5\u042f\1\u0627\3\u042f\1\0\60\u042f\1\u03d5\1\u0402\1\u0628"+
    "\10\u03d5\1\0\60\u03d5\1\u03d6\1\u0403\1\u0629\10\u03d6\1\0"+
    "\60\u03d6\1\u0404\1\u0432\11\u0404\1\0\57\u0404\1\u062a\1\u0405"+
    "\1\u0433\2\u0405\1\u062b\6\u0405\1\0\60\u0405\71\0\1\u062c"+
    "\2\0\3\u0500\1\u062d\1\u0524\6\u0500\1\0\64\u0500\1\u0524"+
    "\5\u0500\1\u062e\1\0\64\u0500\1\u0524\6\u0500\1\0\4\u0500"+
    "\1\u062f\53\u0500\1\u04bc\1\u04e1\1\u0630\10\u04bc\1\0\60\u04bc"+
    "\1\u0416\1\u0446\7\u0416\1\u0631\1\u0416\1\0\60\u0416\43\0"+
    "\1\u0632\30\0\1\u04c3\1\u04e8\11\u04c3\1\0\12\u04c3\1\u0633"+
    "\45\u04c3\1\u03ec\1\u0419\11\u03ec\1\0\11\u03ec\1\u0634\46\u03ec"+
    "\21\0\1\u0635\73\0\1\u0636\73\0\1\u0637\73\0\1\u0638"+
    "\52\0\1\u0608\1\u0621\11\u0608\1\0\5\u0608\1\u0639\52\u0608"+
    "\1\u0599\1\u05b8\11\u0599\1\0\13\u0599\1\u063a\44\u0599\6\0"+
    "\1\u063b\111\0\1\u063c\47\0\1\u045b\1\u0486\6\u045b\1\u063d"+
    "\2\u045b\1\0\60\u045b\1\u0487\1\u04af\11\u0487\1\0\50\u0487"+
    "\1\u063e\7\u0487\1\u042f\1\u045d\4\u042f\1\u063f\4\u042f\1\0"+
    "\60\u042f\1\u03d5\1\u0402\11\u03d5\1\0\15\u03d5\1\u0640\42\u03d5"+
    "\1\u03d6\1\u0403\11\u03d6\1\0\11\u03d6\1\u0641\46\u03d6\1\u0404"+
    "\1\u0432\11\u0404\1\0\13\u0404\1\u0642\44\u0404\1\u0405\1\u0433"+
    "\2\u0405\1\u0643\6\u0405\1\0\60\u0405\47\0\1\u0644\24\0"+
    "\4\u0500\1\u0645\6\u0500\1\0\64\u0500\1\u0524\6\u0500\1\0"+
    "\11\u0500\1\u0646\46\u0500\1\u04bc\1\u04e1\11\u04bc\1\0\23\u04bc"+
    "\1\u0647\34\u04bc\1\u0416\1\u0446\11\u0416\1\0\15\u0416\1\u0648"+
    "\42\u0416\44\0\1\u0649\27\0\1\u04c3\1\u04e8\6\u04c3\1\u064a"+
    "\2\u04c3\1\0\60\u04c3\1\u03ec\1\u0419\11\u03ec\1\0\13\u03ec"+
    "\1\u064b\44\u03ec\55\0\1\u064c\42\0\1\u064d\73\0\1\u064e"+
    "\56\0\1\u064f\64\0\1\u0608\1\u0621\11\u0608\1\0\10\u0608"+
    "\1\u0650\47\u0608\1\u0599\1\u05b8\1\u0651\10\u0599\1\0\60\u0599"+
    "\3\0\1\u0652\102\0\1\u0653\61\0\1\u045b\1\u0486\4\u045b"+
    "\1\u0654\4\u045b\1\0\60\u045b\1\u0487\1\u04af\6\u0487\1\u0655"+
    "\2\u0487\1\0\60\u0487\1\u042f\1\u045d\2\u042f\1\u0656\6\u042f"+
    "\1\0\60\u042f\1\u03d5\1\u0402\5\u03d5\1\u0657\3\u03d5\1\0"+
    "\60\u03d5\1\u03d6\1\u0403\5\u03d6\1\u0658\3\u03d6\1\0\60\u03d6"+
    "\1\u0404\1\u0432\1\u0659\10\u0404\1\0\60\u0404\1\u0405\1\u0433"+
    "\7\u0405\1\u065a\1\u0405\1\0\60\u0405\64\0\1\u065b\7\0"+
    "\4\u0500\1\u0524\1\u065c\4\u0500\1\u0547\1\0\64\u0500\1\u0524"+
    "\2\u0500\1\u065d\3\u0500\1\0\60\u0500\1\u04bc\1\u04e1\11\u04bc"+
    "\1\0\12\u04bc\1\u065e\45\u04bc\1\u0416\1\u0446\11\u0416\1\0"+
    "\23\u0416\1\u065f\34\u0416\44\0\1\u0660\27\0\1\u04c3\1\u04e8"+
    "\11\u04c3\1\0\16\u04c3\1\u0661\41\u04c3\1\u03ec\1\u0419\5\u03ec"+
    "\1\u0662\3\u03ec\1\0\60\u03ec\55\0\1\u0663\30\0\1\u0664"+
    "\73\0\1\u0665\110\0\1\u0666\44\0\1\u0608\1\u0621\10\u0608"+
    "\1\u0667\1\0\60\u0608\1\u0599\1\u05b8\11\u0599\1\0\16\u0599"+
    "\1\u0668\41\u0599\21\0\1\u0669\73\0\1\u066a\52\0\1\u045b"+
    "\1\u0486\11\u045b\1\0\20\u045b\1\u066b\37\u045b\1\u0487\1\u04af"+
    "\11\u0487\1\0\16\u0487\1\u066c\41\u0487\1\u042f\1\u045d\6\u042f"+
    "\1\u066d\2\u042f\1\0\60\u042f\1\u03d5\1\u0402\11\u03d5\1\0"+
    "\6\u03d5\1\u066e\51\u03d5\1\u03d6\1\u0403\11\u03d6\1\0\6\u03d6"+
    "\1\u066f\51\u03d6\1\u0404\1\u0432\10\u0404\1\u0670\1\0\60\u0404"+
    "\1\u0405\1\u0433\5\u0405\1\u0671\3\u0405\1\0\60\u0405\65\0"+
    "\1\u0672\6\0\4\u0500\1\u0524\1\u0500\1\u0673\4\u0500\1\0"+
    "\60\u0500\1\u04bc\1\u04e1\11\u04bc\1\0\13\u04bc\1\u0674\44\u04bc"+
    "\1\u0416\1\u0446\5\u0416\1\u0675\3\u0416\1\0\60\u0416\16\0"+
    "\1\u0676\55\0\1\u04c3\1\u04e8\11\u04c3\1\0\50\u04c3\1\u0677"+
    "\7\u04c3\1\u03ec\1\u0419\11\u03ec\1\0\6\u03ec\1\u0678\51\u03ec"+
    "\55\0\1\u0679\37\0\1\u067a\73\0\1\u067b\61\0\1\u067c"+
    "\64\0\1\u0608\1\u0621\3\u0608\1\u067d\5\u0608\1\0\60\u0608"+
    "\1\u0599\1\u05b8\1\u0599\1\u067e\7\u0599\1\0\60\u0599\24\0"+
    "\1\u067f\56\0\1\u0680\64\0\1\u045b\1\u0486\6\u045b\1\u0681"+
    "\2\u045b\1\0\60\u045b\1\u0487\1\u04af\11\u0487\1\0\25\u0487"+
    "\1\u0682\32\u0487\1\u042f\1\u045d\11\u042f\1\0\16\u042f\1\u0683"+
    "\41\u042f\1\u0404\1\u0432\5\u0404\1\u0684\3\u0404\1\0\60\u0404"+
    "\1\u0405\1\u0433\11\u0405\1\0\10\u0405\1\u0685\47\u0405\66\0"+
    "\1\u0686\5\0\4\u0500\1\u0524\6\u0500\1\0\15\u0500\1\u062d"+
    "\42\u0500\1\u04bc\1\u04e1\11\u04bc\1\0\12\u04bc\1\u0687\45\u04bc"+
    "\1\u0416\1\u0446\4\u0416\1\u0688\4\u0416\1\0\60\u0416\20\0"+
    "\1\u0689\53\0\1\u04c3\1\u04e8\11\u04c3\1\0\17\u04c3\1\u068a"+
    "\40\u04c3\35\0\1\u068b\45\0\1\u068c\73\0\1\u068d\115\0"+
    "\1\u068e\42\0\1\u0608\1\u0621\11\u0608\1\0\13\u0608\1\u068f"+
    "\44\u0608\1\u0599\1\u05b8\7\u0599\1\u0690\1\u0599\1\0\60\u0599"+
    "\12\0\1\u0691\110\0\1\u0692\44\0\1\u045b\1\u0486\4\u045b"+
    "\1\u0693\4\u045b\1\0\60\u045b\1\u0487\1\u04af\5\u0487\1\u0694"+
    "\3\u0487\1\0\60\u0487\1\u042f\1\u045d\1\u0695\10\u042f\1\0"+
    "\60\u042f\1\u0404\1\u0432\11\u0404\1\0\6\u0404\1\u0696\51\u0404"+
    "\1\u0405\1\u0433\11\u0405\1\0\6\u0405\1\u0697\51\u0405\72\0"+
    "\1\u0698\1\0\1\u04bc\1\u04e1\11\u04bc\1\0\11\u04bc\1\u0699"+
    "\46\u04bc\1\u0416\1\u0446\11\u0416\1\0\6\u0416\1\u069a\51\u0416"+
    "\22\0\1\u069b\51\0\1\u04c3\1\u04e8\4\u04c3\1\u069c\4\u04c3"+
    "\1\0\60\u04c3\32\0\1\u069d\70\0\1\u069e\73\0\1\u069f"+
    "\53\0\1\u06a0\64\0\1\u0608\1\u0621\1\u06a1\10\u0608\1\0"+
    "\60\u0608\1\u0599\1\u05b8\1\u06a2\10\u0599\1\0\60\u0599\21\0"+
    "\1\u06a3\61\0\1\u06a4\64\0\1\u045b\1\u0486\1\u06a5\10\u045b"+
    "\1\0\60\u045b\1\u0487\1\u04af\4\u0487\1\u06a6\4\u0487\1\0"+
    "\60\u0487\1\u042f\1\u045d\11\u042f\1\0\13\u042f\1\u06a7\44\u042f"+
    "\20\0\1\u06a8\53\0\1\u04bc\1\u04e1\11\u04bc\1\0\40\u04bc"+
    "\1\u06a9\17\u04bc\13\u06aa\1\0\60\u06aa\1\u04c3\1\u04e8\6\u04c3"+
    "\1\u06ab\2\u04c3\1\0\60\u04c3\2\0\1\u06ac\100\0\1\u06ad"+
    "\73\0\1\u06ae\116\0\1\u06af\41\0\1\u0608\1\u0621\11\u0608"+
    "\1\0\16\u0608\1\u06b0\41\u0608\1\u0599\1\u05b8\1\u0599\1\u06b1"+
    "\7\u0599\1\0\60\u0599\7\0\1\u06b2\115\0\1\u06b3\42\0"+
    "\1\u045b\1\u0486\11\u045b\1\0\11\u045b\1\u06b4\46\u045b\1\u0487"+
    "\1\u04af\5\u0487\1\u06b5\3\u0487\1\0\60\u0487\1\u042f\1\u045d"+
    "\11\u042f\1\0\6\u042f\1\u06b6\51\u042f\22\0\1\u03d8\51\0"+
    "\1\u04bc\1\u04e1\11\u04bc\1\0\2\u04bc\1\u06b7\55\u04bc\1\u06aa"+
    "\1\u06b8\11\u06aa\1\0\60\u06aa\1\u04c3\1\u04e8\11\u04c3\1\0"+
    "\16\u04c3\1\u06b9\41\u04c3\2\0\1\u06ba\122\0\1\u06bb\73\0"+
    "\1\u06bc\67\0\1\u06bd\46\0\1\u0608\1\u0621\1\u0608\1\u06be"+
    "\7\u0608\1\0\60\u0608\1\u0599\1\u05b8\5\u0599\1\u06bf\3\u0599"+
    "\1\0\60\u0599\27\0\1\u06c0\53\0\1\u06c1\64\0\1\u045b"+
    "\1\u0486\5\u045b\1\u06c2\3\u045b\1\0\60\u045b\1\u0487\1\u04af"+
    "\11\u0487\1\0\16\u0487\1\u06c3\41\u0487\1\u04bc\1\u04e1\7\u04bc"+
    "\1\u06c4\1\u04bc\1\0\60\u04bc\1\u06aa\1\u06b8\11\u06aa\1\0"+
    "\5\u06aa\1\u06c5\52\u06aa\1\u04c3\1\u04e8\6\u04c3\1\u06c6\2\u04c3"+
    "\1\0\60\u04c3\35\0\1\u06c7\45\0\1\u06c8\73\0\1\u06c9"+
    "\70\0\1\u06ca\67\0\1\u0608\1\u0621\7\u0608\1\u06cb\1\u0608"+
    "\1\0\60\u0608\1\u0599\1\u05b8\11\u0599\1\0\6\u0599\1\u06cc"+
    "\51\u0599\7\0\1\u06cd\116\0\1\u06ce\41\0\1\u045b\1\u0486"+
    "\11\u045b\1\0\6\u045b\1\u06cf\51\u045b\1\u0487\1\u04af\10\u0487"+
    "\1\u06d0\1\0\60\u0487\1\u04bc\1\u04e1\11\u04bc\1\0\15\u04bc"+
    "\1\u06d1\42\u04bc\1\u06aa\1\u06b8\1\u06d2\10\u06aa\1\0\60\u06aa"+
    "\1\u04c3\1\u04e8\11\u04c3\1\0\13\u04c3\1\u06d3\44\u04c3\3\0"+
    "\1\u06d4\122\0\1\u06d5\73\0\1\u06d6\62\0\1\u06d7\52\0"+
    "\1\u0608\1\u0621\1\u06d8\10\u0608\1\0\60\u0608\31\0\1\u06d9"+
    "\67\0\1\u06da\46\0\1\u0487\1\u04af\5\u0487\1\u06db\3\u0487"+
    "\1\0\60\u0487\1\u04bc\1\u04e1\11\u04bc\1\0\23\u04bc\1\u06dc"+
    "\34\u04bc\1\u06aa\1\u06b8\1\u06aa\1\u06dd\7\u06aa\1\0\60\u06aa"+
    "\1\u04c3\1\u04e8\6\u04c3\1\u06de\2\u04c3\1\0\60\u04c3\10\0"+
    "\1\u06df\110\0\1\u06e0\73\0\1\u06e1\104\0\1\u06e2\35\0"+
    "\1\u0608\1\u0621\1\u0608\1\u06e3\7\u0608\1\0\60\u0608\7\0"+
    "\1\u06e4\70\0\1\u06e5\67\0\1\u0487\1\u04af\11\u0487\1\0"+
    "\6\u0487\1\u06e6\51\u0487\1\u04bc\1\u04e1\5\u04bc\1\u06e7\3\u04bc"+
    "\1\0\60\u04bc\1\u06aa\1\u06b8\2\u06aa\1\u06e8\6\u06aa\1\0"+
    "\60\u06aa\1\u04c3\1\u04e8\1\u04c3\1\u06e9\7\u04c3\1\0\60\u04c3"+
    "\53\0\1\u06ea\24\0\1\u06eb\73\0\1\u06ec\124\0\1\u06ed"+
    "\36\0\1\u0608\1\u0621\5\u0608\1\u06ee\3\u0608\1\0\60\u0608"+
    "\32\0\1\u06ef\62\0\1\u06f0\52\0\1\u04bc\1\u04e1\4\u04bc"+
    "\1\u06f1\4\u04bc\1\0\60\u04bc\1\u06aa\1\u06b8\3\u06aa\1\u06f2"+
    "\5\u06aa\1\0\60\u06aa\1\u04c3\1\u04e8\11\u04c3\1\0\40\u04c3"+
    "\1\u06f3\17\u04c3\35\0\1\u06f4\57\0\1\u06f5\73\0\1\u06f6"+
    "\110\0\1\u06f7\35\0\1\u0608\1\u0621\11\u0608\1\0\6\u0608"+
    "\1\u06f8\51\u0608\25\0\1\u06f9\104\0\1\u06fa\35\0\1\u04bc"+
    "\1\u04e1\11\u04bc\1\0\6\u04bc\1\u06fb\51\u04bc\1\u06aa\1\u06b8"+
    "\10\u06aa\1\u06fc\1\0\60\u06aa\1\u04c3\1\u04e8\11\u04c3\1\0"+
    "\6\u04c3\1\u06fd\51\u04c3\2\0\1\u06fe\127\0\1\u06ff\73\0"+
    "\1\u0700\56\0\1\u0701\56\0\1\u0702\124\0\1\u0703\36\0"+
    "\1\u06aa\1\u06b8\11\u06aa\1\0\12\u06aa\1\u0704\45\u06aa\11\0"+
    "\1\u0705\117\0\1\u0706\73\0\1\u0707\56\0\1\u0708\74\0"+
    "\1\u0709\110\0\1\u070a\35\0\1\u06aa\1\u06b8\11\u06aa\1\0"+
    "\11\u06aa\1\u070b\46\u06aa\21\0\1\u070c\110\0\1\u070d\73\0"+
    "\1\u070e\57\0\1\u0197\107\0\1\u070f\56\0\1\u0710\52\0"+
    "\1\u06aa\1\u06b8\1\u0711\10\u06aa\1\0\60\u06aa\6\0\1\u0712"+
    "\106\0\1\u047b\73\0\1\u0713\107\0\1\u0714\56\0\1\u0715"+
    "\53\0\1\u06aa\1\u06b8\11\u06aa\1\0\11\u06aa\1\u0716\46\u06aa"+
    "\7\0\1\u0717\104\0\1\u0718\111\0\1\u0719\57\0\1\u0209"+
    "\51\0\1\u06aa\1\u06b8\11\u06aa\1\0\12\u06aa\1\u071a\45\u06aa"+
    "\12\0\1\u071b\103\0\1\u0233\72\0\1\u071c\52\0\1\u06aa"+
    "\1\u06b8\6\u06aa\1\u071d\2\u06aa\1\0\60\u06aa\10\0\1\u071e"+
    "\103\0\1\u071f\53\0\1\u06aa\1\u06b8\11\u06aa\1\0\16\u06aa"+
    "\1\u0720\41\u06aa\6\0\1\u0721\107\0\1\u02a3\51\0\1\u06aa"+
    "\1\u06b8\11\u06aa\1\0\27\u06aa\1\u0722\30\u06aa\24\0\1\u0723"+
    "\47\0\1\u06aa\1\u06b8\11\u06aa\1\0\10\u06aa\1\u0724\47\u06aa"+
    "\56\0\1\u0725\15\0\1\u06aa\1\u06b8\5\u06aa\1\u0726\3\u06aa"+
    "\1\0\60\u06aa\7\0\1\u0727\64\0\1\u06aa\1\u06b8\11\u06aa"+
    "\1\0\16\u06aa\1\u0728\41\u06aa\7\0\1\u0729\64\0\1\u06aa"+
    "\1\u06b8\11\u06aa\1\0\11\u06aa\1\u072a\46\u06aa\34\0\1\u072b"+
    "\37\0\1\u06aa\1\u06b8\11\u06aa\1\0\12\u06aa\1\u072c\45\u06aa"+
    "\26\0\1\u072d\45\0\1\u06aa\1\u06b8\11\u06aa\1\0\25\u06aa"+
    "\1\u072e\32\u06aa\32\0\1\u072f\41\0\1\u06aa\1\u06b8\11\u06aa"+
    "\1\0\12\u06aa\1\u0730\45\u06aa\3\0\1\u0731\70\0\1\u06aa"+
    "\1\u06b8\5\u06aa\1\u0732\3\u06aa\1\0\60\u06aa\21\0\1\u0733"+
    "\52\0\1\u06aa\1\u06b8\4\u06aa\1\u0734\4\u06aa\1\0\60\u06aa"+
    "\3\0\1\u0735\70\0\1\u06aa\1\u06b8\11\u06aa\1\0\6\u06aa"+
    "\1\u0736\51\u06aa\10\0\1\u0737\136\0\1\u0738\77\0\1\u0739"+
    "\24\0\1\u073a\115\0\1\u073b\70\0\1\u073c\72\0\1\u073d"+
    "\77\0\1\u073e\50\0\1\u073f\105\0\1\u0740\54\0\1\u0741"+
    "\74\0\1\u0742\117\0\1\u0743\50\0\1\u0744\110\0\1\u0745"+
    "\110\0\1\u0746\72\0\1\u0747\110\0\1\u0748\41\0\1\u0330"+
    "\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[107460];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\34\0\1\11\2\1\1\11\10\1\1\11\24\1\1\11"+
    "\3\1\3\0\1\11\3\0\1\11\15\0\1\1\1\0"+
    "\1\11\5\0\1\11\1\0\1\11\15\0\1\11\11\0"+
    "\1\11\u011d\0\1\11\100\0\1\11\60\0\1\11\1\0"+
    "\1\11\45\0\1\11\1\0\1\11\4\0\1\1\2\0"+
    "\1\1\53\0\1\11\21\0\1\11\24\0\1\11\2\0"+
    "\1\1\3\0\1\11\15\0\1\11\46\0\1\11\51\0"+
    "\1\11\7\0\1\11\6\0\1\11\46\0\1\11\65\0"+
    "\1\11\34\0\1\11\61\0\1\11\3\0\1\11\25\0"+
    "\1\1\1\0\2\1\131\0\1\1\21\0\1\11\2\0"+
    "\1\11\21\0\1\1\1\11\27\0\1\11\3\0\1\11"+
    "\16\0\1\1\35\0\2\1\102\0\1\1\6\0\1\11"+
    "\45\0\1\11\37\0\1\11\1\0\1\11\174\0\1\1"+
    "\1\11\70\0\1\1\1\0\2\1\42\0\1\11\24\0"+
    "\1\1\22\0\1\1\54\0\1\1\21\0\2\1\10\0"+
    "\1\1\35\0\2\1\2\0\1\1\33\0\1\1\25\0"+
    "\1\1\2\0\1\1\26\0\1\1\21\0\1\1\2\0"+
    "\1\1\1\0\1\1\70\0\1\1\22\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1864];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	// AGRIF
	private List<Agrif> agrifs ;
	private Agrif agrif ;
	private Citation citation ;
	private ControlledBlock cblock ;
	private Creator creator ;
	private Expression expression ;
	private Item item ;
	private LanguageBlock lblock ;
	private Manifestation manifestation ;
	private Relation relation ;
	private Rights rights ;
	
	// TMP
	private StringBuilder tmp ;
	private String language ;
	private String thesaurus ;
	private String classification ;
	private Item tmpItem ;
	private Manifestation tmpManifestation ;
	
	// EXERNAL
	private String potentialLanguages ;
	private String mtdLanguage ;
	private String providerId ;
	private String manifestationType = "landingPage" ;
	
	public void setPotentialLanguages( String potentialLanguages )
	{
		this.potentialLanguages = potentialLanguages ;
	}
	
	public void setMtdLanguage( String mtdLanguage )
	{
		this.mtdLanguage = mtdLanguage ;
	}
	
	public void setManifestationType( String manifestationType )
	{
		this.manifestationType = manifestationType ;
	}
	
	public void setProviderId( String providerId )
	{
		this.providerId = providerId ;
	}
	
	public List<Agrif> getAgrifs()
	{
		return agrifs ;
	}
	
	private void init()
	{
		agrif = new Agrif() ;
		agrif.setSet( providerId ) ;
		citation  = new Citation() ;
		cblock = new ControlledBlock() ;
		expression = new Expression() ;
		item = new Item() ;
		lblock = new LanguageBlock() ;
		manifestation = new Manifestation() ;
		relation = new Relation() ;
		rights = new Rights() ;
	}
	
	private String utcNow() 
	{
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat( "yyyy-MM-dd" );
		return sdf.format(cal.getTime());
	}
	
	private String extract( String element )
	{	
		return element.substring(element.indexOf(">") + 1 , element.indexOf("</") );
	}
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AGRIS2AGRIF(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AGRIS2AGRIF(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 64: 
          { creator = new Creator( "organization", extract( yytext() ) ) ;
		agrif.setCreator( creator ) ;
          }
        case 70: break;
        case 16: 
          { yybegin( FORMAT ) ;
          }
        case 71: break;
        case 43: 
          { yybegin( DESCRIPTION ) ;
		String text = tmp.toString() ;
		lblock.setNotes( ParamManager.getInstance().getLanguageFor(text), text ) ;
          }
        case 72: break;
        case 44: 
          { agrifs = new ArrayList<Agrif>() ;
		init() ;
		agrif.setOrigin( providerId, "" ) ;
		yybegin( AGRIF ) ;
          }
        case 73: break;
        case 17: 
          { lblock.setTitle( language, tmp.toString() ) ;
		yybegin( AGRIF ) ;
          }
        case 74: break;
        case 4: 
          { tmp.append( " " ) ;
          }
        case 75: break;
        case 22: 
          { lblock.setKeyword( language, tmp.toString() ) ;
		yybegin( SUBJECT ) ;
          }
        case 76: break;
        case 36: 
          { cblock.setType( "dc:type", extract( yytext() ) ) ;
          }
        case 77: break;
        case 63: 
          { String tmpLanguage = extract( yytext() ) ;
		try
		{
			tmpLanguage = Toolbox.getInstance().toISO6391( tmpLanguage ) ;
		}
		catch( ToolboxException te ){}
		expression.setLanguage( tmpLanguage ) ;
          }
        case 78: break;
        case 56: 
          { tmp = new StringBuilder() ;
		yybegin( CLASSIFICATION ) ;
          }
        case 79: break;
        case 8: 
          { thesaurus = tmp.toString() ;
		tmp = new StringBuilder() ;
		yybegin( DESCRIPTOR ) ;
          }
        case 80: break;
        case 48: 
          { tmp = new StringBuilder() ;
		yybegin( AVAILOCATION ) ;
          }
        case 81: break;
        case 51: 
          { tmp = new StringBuilder() ;
		yybegin( LABSTRACT ) ;
          }
        case 82: break;
        case 37: 
          { String text = extract( yytext() ) ;
		lblock.setTitle( ParamManager.getInstance().getLanguageFor(text), text ) ;
          }
        case 83: break;
        case 10: 
          { language = tmp.toString() ;
		if ( language.length() == 3 )
		{
			try
			{
				language = Toolbox.getInstance().toISO6391( language ) ;
			}
			catch( ToolboxException te )
			{
			}
		}
		tmp = new StringBuilder() ;
		yybegin( ABSTRACT ) ;
          }
        case 84: break;
        case 59: 
          { expression.setPublisher( null, null, extract( yytext() ) ) ;
          }
        case 85: break;
        case 12: 
          { citation.setTitle( extract( yytext() ) ) ;
          }
        case 86: break;
        case 19: 
          { yybegin( CREATOR ) ;
          }
        case 87: break;
        case 5: 
          { language = tmp.toString() ;
		if ( language.length() == 3 )
		{
			try
			{
				language = Toolbox.getInstance().toISO6391( language ) ;
			}
			catch( ToolboxException te )
			{
			}
		}
		yybegin( KEYWORD ) ;
		tmp = new StringBuilder() ;
          }
        case 88: break;
        case 52: 
          { tmp = new StringBuilder() ;
		yybegin( LNOTE ) ;
          }
        case 89: break;
        case 50: 
          { cblock.setDescriptor( classification, tmp.toString() ) ;
		yybegin( SUBJECT ) ;
		tmp = null ;
          }
        case 90: break;
        case 57: 
          { expression.setPublisher( extract( yytext() ), null, null ) ;
          }
        case 91: break;
        case 7: 
          { language = tmp.toString() ;
		if ( language.length() == 3 )
		{
			try
			{
				language = Toolbox.getInstance().toISO6391( language ) ;
			}
			catch( ToolboxException te )
			{
			}
		}
		yybegin( TITLE ) ;
		tmp = new StringBuilder() ;
          }
        case 92: break;
        case 14: 
          { yybegin( DATE ) ;
          }
        case 93: break;
        case 58: 
          { expression.setPublisher( null,  extract( yytext() ), null ) ;
          }
        case 94: break;
        case 40: 
          { agrifs = new ArrayList<Agrif>() ;
		init() ;
		yybegin( ARN ) ;
		tmp = new StringBuilder() ;
          }
        case 95: break;
        case 23: 
          { yybegin( RESOURCES ) ;
		agrifs = new ArrayList<Agrif>() ;
          }
        case 96: break;
        case 21: 
          { yybegin( AGRIF ) ;
		if (tmp != null )
		{
			String text = tmp.toString().trim() ;
			if ( !text.isEmpty() )
			{
				lblock.setKeyword( ParamManager.getInstance().getLanguageFor(text), text ) ;
			}
		}
          }
        case 97: break;
        case 30: 
          { item.setDigitalItem( tmp.toString() ) ;
		manifestation.setItem( item ) ;
		manifestation.setManifestationType( manifestationType ) ;
		yybegin( AGRIF ) ;
          }
        case 98: break;
        case 29: 
          { yybegin( DESCRIPTION ) ;
          }
        case 99: break;
        case 20: 
          { yybegin( COVERAGE ) ;
          }
        case 100: break;
        case 32: 
          { language = null ;
		tmp = new StringBuilder() ;
		yybegin( ABSTRACT ) ;
          }
        case 101: break;
        case 9: 
          { classification = tmp.toString() ;
		tmp = new StringBuilder() ;
		yybegin( CLASS ) ;
          }
        case 102: break;
        case 61: 
          { citation.setCitationNumber( extract( yytext() ) ) ;
          }
        case 103: break;
        case 47: 
          { yybegin( LKEYWORD ) ;
		tmp = new StringBuilder() ;
		tmp.append( "en" ) ;
          }
        case 104: break;
        case 60: 
          { expression.setDateIssued( extract( yytext() ) ) ;
		// System.out.println( extract( yytext() ) ) ;
          }
        case 105: break;
        case 38: 
          { yybegin( LKEYWORD ) ;
		tmp = new StringBuilder() ;
          }
        case 106: break;
        case 28: 
          { yybegin( YYINITIAL ) ;
          }
        case 107: break;
        case 1: 
          { //throw new Error("Illegal character <"+ yytext()+">") ;
          }
        case 108: break;
        case 26: 
          { if ( !manifestation.toJSONObject().isEmpty() )
		{
			expression.setManifestation( manifestation ) ;
		}
		agrif.setExpression( expression ) ;
		agrif.setLanguageBlocks( lblock ) ;
		agrif.setControlled( cblock ) ;
		agrifs.add( agrif ) ;
		yybegin( RESOURCES ) ;
          }
        case 109: break;
        case 41: 
          { init() ;
		yybegin( ARN ) ;
		tmp = new StringBuilder() ;
          }
        case 110: break;
        case 68: 
          { citation.setCitationChronology( extract( yytext() ) ) ;
          }
        case 111: break;
        case 53: 
          { tmp = new StringBuilder() ;
		yybegin( THESAURUS ) ;
          }
        case 112: break;
        case 49: 
          { tmpItem.setPhysicalLocation( tmp.toString() ) ;
		yybegin( AVAILABILITY ) ;
          }
        case 113: break;
        case 31: 
          { yybegin( AVAILABILITY ) ;
		tmpItem = new Item() ;
		tmpManifestation = new Manifestation() ;
          }
        case 114: break;
        case 27: 
          { yybegin( AGRIF ) ;
		expression.setCitation( citation ) ;
          }
        case 115: break;
        case 66: 
          { expression.setLanguage( extract( yytext() ) ) ;
          }
        case 116: break;
        case 33: 
          { yybegin( DESCRIPTION ) ;
		String text = tmp.toString() ;
		lblock.setAbstract( ParamManager.getInstance().getLanguageFor(text), text ) ;
          }
        case 117: break;
        case 18: 
          { yybegin( SUBJECT ) ;
		tmp = new StringBuilder() ;
          }
        case 118: break;
        case 15: 
          { yybegin( AGRIF ) ;
          }
        case 119: break;
        case 62: 
          { creator = new Creator( "person", extract( yytext() ) ) ;
		agrif.setCreator( creator ) ;
          }
        case 120: break;
        case 3: 
          { if (tmp != null )
		{
			tmp.append( yytext() ) ;
		}
          }
        case 121: break;
        case 11: 
          { language = tmp.toString() ;
		if ( language.length() == 3 )
		{
			try
			{
				language = Toolbox.getInstance().toISO6391( language ) ;
			}
			catch( ToolboxException te )
			{
			}
		}
		tmp = new StringBuilder() ;
		yybegin( DESCRIPTIONNOTE ) ;
          }
        case 122: break;
        case 24: 
          { yybegin( CITATION ) ;
		citation = new Citation() ;
          }
        case 123: break;
        case 54: 
          { tmp = new StringBuilder() ;
		yybegin( URL ) ;
          }
        case 124: break;
        case 67: 
          { tmpItem.setPhysicalNumber( extract( yytext() ) ) ;
          }
        case 125: break;
        case 35: 
          { yybegin( LTITLE ) ;
		tmp = new StringBuilder() ;
          }
        case 126: break;
        case 39: 
          { language = null ;
		tmp = new StringBuilder() ;
		yybegin( DESCRIPTIONNOTE ) ;
          }
        case 127: break;
        case 55: 
          { cblock.setSpatialCoverage( "dc:spatial", extract( yytext() ) ) ;
          }
        case 128: break;
        case 6: 
          { agrif.setOrigin( providerId, tmp.toString() ) ;
		yybegin( AGRIF ) ;
          }
        case 129: break;
        case 42: 
          { cblock.setDescriptor( thesaurus, tmp.toString() ) ;
		yybegin( SUBJECT ) ;
		tmp = null ;
          }
        case 130: break;
        case 34: 
          { yybegin( AGRIF ) ;
		tmpManifestation.setItem( tmpItem ) ;
		tmpManifestation.setManifestationType( "physicalLocation" ) ;
		expression.setManifestation( tmpManifestation ) ;
          }
        case 131: break;
        case 45: 
          { manifestation.setSize( extract( yytext() ) ) ;
          }
        case 132: break;
        case 2: 
          { tmp.append( yytext() ) ;
          }
        case 133: break;
        case 46: 
          { manifestation.setFormat( extract( yytext() ) ) ;
          }
        case 134: break;
        case 25: 
          { yybegin( PUBLISHER ) ;
          }
        case 135: break;
        case 69: 
          { citation.setIdentifier( "ISSN", extract( yytext() ) ) ;
          }
        case 136: break;
        case 65: 
          { creator = new Creator( "conference", extract( yytext() ) ) ;
		agrif.setCreator( creator ) ;
          }
        case 137: break;
        case 13: 
          { 
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AGRIS2AGRIF <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        AGRIS2AGRIF scanner = null;
        try {
          scanner = new AGRIS2AGRIF( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
