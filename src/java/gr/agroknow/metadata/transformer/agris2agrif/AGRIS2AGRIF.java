/* The following code was generated by JFlex 1.4.1 on 6/7/13 9:11 PM */

package gr.agroknow.metadata.transformer.agris2agrif;

import gr.agroknow.metadata.agrif.Agrif;
import gr.agroknow.metadata.agrif.Citation;
import gr.agroknow.metadata.agrif.ControlledBlock;
import gr.agroknow.metadata.agrif.Creator;
import gr.agroknow.metadata.agrif.Expression;
import gr.agroknow.metadata.agrif.Item;
import gr.agroknow.metadata.agrif.LanguageBlock;
import gr.agroknow.metadata.agrif.Manifestation;
import gr.agroknow.metadata.agrif.Relation;
import gr.agroknow.metadata.agrif.Rights;

import gr.agroknow.metadata.transformer.ParamManager;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.ArrayList;

import net.zettadata.generator.tools.Toolbox;
import net.zettadata.generator.tools.ToolboxException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6/7/13 9:11 PM from the specification file
 * <tt>/Users/dmssrt/home/projects/agroKnow/code/agris2agrif/src/conf/agris2agrif.jflex</tt>
 */
class AGRIS2AGRIF {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CLASS = 13;
  public static final int ARN = 2;
  public static final int DATE = 8;
  public static final int COVERAGE = 23;
  public static final int THESAURUS = 10;
  public static final int URL = 24;
  public static final int LABSTRACT = 16;
  public static final int LNOTE = 18;
  public static final int PUBLISHER = 7;
  public static final int AVAILABILITY = 19;
  public static final int AGRIF = 3;
  public static final int LKEYWORD = 25;
  public static final int KEYWORD = 26;
  public static final int DESCRIPTION = 14;
  public static final int RESOURCES = 1;
  public static final int TITLE = 5;
  public static final int DESCRIPTOR = 11;
  public static final int CITATION = 22;
  public static final int CLASSIFICATION = 12;
  public static final int LTITLE = 4;
  public static final int DESCRIPTIONNOTE = 17;
  public static final int ABSTRACT = 15;
  public static final int FORMAT = 21;
  public static final int SUBJECT = 9;
  public static final int AVAILOCATION = 20;
  public static final int YYINITIAL = 0;
  public static final int CREATOR = 6;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\13\25\0\1\23\1\62\1\20\3\0\1\60\6\0\1\51"+
    "\1\35\1\21\1\0\1\36\1\52\1\47\2\0\1\46\2\0\1\50"+
    "\1\5\1\61\1\1\1\17\1\22\2\0\1\14\1\0\1\64\1\65"+
    "\4\0\1\43\2\0\1\70\1\0\1\16\1\45\1\71\1\0\1\15"+
    "\1\44\1\66\1\42\5\0\1\63\1\0\1\67\1\0\1\57\1\0"+
    "\1\2\1\37\1\12\1\24\1\7\1\41\1\3\1\33\1\26\1\40"+
    "\1\56\1\27\1\31\1\32\1\10\1\34\1\0\1\6\1\4\1\25"+
    "\1\11\1\53\1\55\1\30\1\54\uff86\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\33\0\3\1\2\2\1\1\3\2\3\1\2\3\4\2"+
    "\1\1\6\2\1\1\1\2\1\4\3\1\3\2\3\0"+
    "\1\5\3\0\1\6\14\0\1\7\1\0\1\10\7\0"+
    "\1\11\1\0\1\12\12\0\1\13\11\0\1\14\u010b\0"+
    "\1\15\75\0\1\16\55\0\1\17\1\0\1\20\42\0"+
    "\1\21\1\0\1\22\4\0\1\14\2\0\1\14\50\0"+
    "\1\23\21\0\1\24\24\0\1\25\3\0\1\26\15\0"+
    "\1\27\43\0\1\30\45\0\1\31\6\0\1\32\5\0"+
    "\1\33\42\0\1\34\57\0\1\35\30\0\1\36\54\0"+
    "\1\37\3\0\1\40\22\0\1\41\1\0\1\41\1\42"+
    "\113\0\1\43\20\0\1\44\20\0\1\45\1\46\23\0"+
    "\1\47\3\0\1\50\14\0\1\51\1\52\31\0\1\53"+
    "\1\54\76\0\1\55\40\0\1\56\32\0\1\57\1\0"+
    "\1\60\150\0\1\61\1\62\57\0\1\63\1\0\1\53"+
    "\1\54\35\0\1\64\20\0\1\65\17\0\1\61\44\0"+
    "\1\66\20\0\1\67\5\0\1\70\32\0\1\71\1\0"+
    "\1\72\30\0\1\73\23\0\1\74\2\0\1\75\24\0"+
    "\1\76\17\0\1\77\2\0\1\100\73\0\1\101\22\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1678];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u061e\0\u06cc"+
    "\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u061e"+
    "\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32"+
    "\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02"+
    "\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2"+
    "\0\u061e\0\u0e0c\0\u0e46\0\u0e80\0\u061e\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe"+
    "\0\u1138\0\u1138\0\u1172\0\u061e\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u061e\0\u1342\0\u061e\0\u137c\0\u13b6"+
    "\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586"+
    "\0\u061e\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u061e\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2"+
    "\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82"+
    "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22"+
    "\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2"+
    "\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2"+
    "\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392"+
    "\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562"+
    "\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732"+
    "\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902"+
    "\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2"+
    "\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2"+
    "\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72"+
    "\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042"+
    "\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e\0\u31d8\0\u3212"+
    "\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2"+
    "\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2"+
    "\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782"+
    "\0\u37bc\0\u37f6\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952"+
    "\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\u3b22"+
    "\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2"+
    "\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2"+
    "\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\u3fe4\0\u401e\0\u4058\0\u4092"+
    "\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4\0\u41ee\0\u4228\0\u4262"+
    "\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384\0\u43be\0\u43f8\0\u4432"+
    "\0\u446c\0\u44a6\0\u44e0\0\u451a\0\u4554\0\u458e\0\u45c8\0\u4602"+
    "\0\u463c\0\u4676\0\u46b0\0\u46ea\0\u4724\0\u475e\0\u4798\0\u47d2"+
    "\0\u480c\0\u4846\0\u4880\0\u48ba\0\u48f4\0\u492e\0\u4968\0\u49a2"+
    "\0\u49dc\0\u4a16\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe\0\u4b38\0\u4b72"+
    "\0\u4bac\0\u4be6\0\u4c20\0\u4c5a\0\u4c94\0\u4cce\0\u4d08\0\u4d42"+
    "\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a\0\u4e64\0\u4e9e\0\u4ed8\0\u4f12"+
    "\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa\0\u5034\0\u506e\0\u50a8\0\u50e2"+
    "\0\u511c\0\u5156\0\u5190\0\u51ca\0\u5204\0\u523e\0\u5278\0\u52b2"+
    "\0\u52ec\0\u5326\0\u5360\0\u539a\0\u53d4\0\u540e\0\u061e\0\u5448"+
    "\0\u5482\0\u54bc\0\u54f6\0\u5530\0\u556a\0\u55a4\0\u55de\0\u5618"+
    "\0\u5652\0\u568c\0\u56c6\0\u5700\0\u573a\0\u5774\0\u57ae\0\u57e8"+
    "\0\u5822\0\u585c\0\u5896\0\u58d0\0\u590a\0\u5944\0\u597e\0\u59b8"+
    "\0\u59f2\0\u5a2c\0\u5a66\0\u5aa0\0\u5ada\0\u5b14\0\u5b4e\0\u5b88"+
    "\0\u5bc2\0\u5bfc\0\u5c36\0\u5c70\0\u5caa\0\u5ce4\0\u5d1e\0\u5d58"+
    "\0\u5d92\0\u5dcc\0\u5e06\0\u5e40\0\u5e7a\0\u5eb4\0\u5eee\0\u5f28"+
    "\0\u5f62\0\u5f9c\0\u5fd6\0\u6010\0\u604a\0\u6084\0\u60be\0\u60f8"+
    "\0\u6132\0\u616c\0\u61a6\0\u61e0\0\u061e\0\u621a\0\u6254\0\u628e"+
    "\0\u62c8\0\u6302\0\u633c\0\u6376\0\u63b0\0\u63ea\0\u6424\0\u645e"+
    "\0\u6498\0\u64d2\0\u650c\0\u6546\0\u6580\0\u65ba\0\u65f4\0\u662e"+
    "\0\u6668\0\u66a2\0\u66dc\0\u6716\0\u6750\0\u678a\0\u67c4\0\u67fe"+
    "\0\u6838\0\u6872\0\u68ac\0\u68e6\0\u6920\0\u695a\0\u6994\0\u69ce"+
    "\0\u6a08\0\u6a42\0\u6a7c\0\u6ab6\0\u6af0\0\u6b2a\0\u6b64\0\u6b9e"+
    "\0\u6bd8\0\u6c12\0\u061e\0\u6c4c\0\u061e\0\u6c86\0\u6cc0\0\u6cfa"+
    "\0\u6d34\0\u6d6e\0\u6da8\0\u6de2\0\u6e1c\0\u6e56\0\u6e90\0\u6eca"+
    "\0\u6f04\0\u6f3e\0\u6f78\0\u6fb2\0\u6fec\0\u7026\0\u7060\0\u709a"+
    "\0\u70d4\0\u710e\0\u7148\0\u7182\0\u71bc\0\u71f6\0\u7230\0\u726a"+
    "\0\u72a4\0\u72de\0\u7318\0\u7352\0\u738c\0\u73c6\0\u7400\0\u061e"+
    "\0\u743a\0\u061e\0\u7474\0\u74ae\0\u74e8\0\u7522\0\u5f62\0\u755c"+
    "\0\u7596\0\u6ab6\0\u75d0\0\u760a\0\u7644\0\u767e\0\u76b8\0\u76f2"+
    "\0\u772c\0\u7766\0\u77a0\0\u77da\0\u7814\0\u784e\0\u7888\0\u78c2"+
    "\0\u78fc\0\u7936\0\u7970\0\u79aa\0\u79e4\0\u7a1e\0\u7a58\0\u7a92"+
    "\0\u7acc\0\u7b06\0\u7b40\0\u7b7a\0\u7bb4\0\u7bee\0\u7c28\0\u7c62"+
    "\0\u7c9c\0\u7cd6\0\u7d10\0\u7d4a\0\u7d84\0\u7dbe\0\u7df8\0\u7e32"+
    "\0\u7e6c\0\u7ea6\0\u061e\0\u7ee0\0\u7f1a\0\u7f54\0\u7f8e\0\u7fc8"+
    "\0\u8002\0\u803c\0\u8076\0\u80b0\0\u80ea\0\u8124\0\u815e\0\u8198"+
    "\0\u81d2\0\u820c\0\u8246\0\u8280\0\u061e\0\u82ba\0\u82f4\0\u832e"+
    "\0\u8368\0\u83a2\0\u83dc\0\u8416\0\u8450\0\u848a\0\u84c4\0\u84fe"+
    "\0\u8538\0\u8572\0\u85ac\0\u85e6\0\u8620\0\u865a\0\u8694\0\u86ce"+
    "\0\u8708\0\u8708\0\u8742\0\u877c\0\u87b6\0\u061e\0\u87f0\0\u882a"+
    "\0\u8864\0\u889e\0\u88d8\0\u8912\0\u894c\0\u8986\0\u89c0\0\u89fa"+
    "\0\u8a34\0\u8a6e\0\u8aa8\0\u061e\0\u8ae2\0\u8b1c\0\u8b56\0\u8b90"+
    "\0\u8bca\0\u8c04\0\u8c3e\0\u8c78\0\u8cb2\0\u8cec\0\u8d26\0\u8d60"+
    "\0\u8d9a\0\u8dd4\0\u8e0e\0\u8e48\0\u8e82\0\u8ebc\0\u8ef6\0\u8f30"+
    "\0\u8f6a\0\u8fa4\0\u8fde\0\u9018\0\u9052\0\u908c\0\u90c6\0\u9100"+
    "\0\u913a\0\u9174\0\u91ae\0\u91e8\0\u9222\0\u925c\0\u9296\0\u061e"+
    "\0\u92d0\0\u930a\0\u9344\0\u937e\0\u93b8\0\u93f2\0\u942c\0\u9466"+
    "\0\u94a0\0\u94da\0\u9514\0\u954e\0\u9588\0\u95c2\0\u95fc\0\u9636"+
    "\0\u9670\0\u96aa\0\u96e4\0\u971e\0\u9758\0\u9792\0\u97cc\0\u9806"+
    "\0\u9840\0\u987a\0\u98b4\0\u98ee\0\u9928\0\u9962\0\u999c\0\u99d6"+
    "\0\u9a10\0\u9a4a\0\u9a84\0\u9abe\0\u9af8\0\u061e\0\u9b32\0\u9b6c"+
    "\0\u9ba6\0\u9be0\0\u9c1a\0\u9c54\0\u061e\0\u9c8e\0\u9cc8\0\u9d02"+
    "\0\u9d3c\0\u9d76\0\u061e\0\u9db0\0\u9dea\0\u9e24\0\u9e5e\0\u9e98"+
    "\0\u9ed2\0\u9f0c\0\u9f46\0\u9f80\0\u9fba\0\u9ff4\0\ua02e\0\ua068"+
    "\0\ua0a2\0\ua0dc\0\ua116\0\ua150\0\ua18a\0\ua1c4\0\ua1fe\0\ua238"+
    "\0\ua272\0\ua2ac\0\ua2e6\0\ua320\0\ua35a\0\ua394\0\ua3ce\0\ua408"+
    "\0\ua442\0\ua47c\0\ua4b6\0\ua4f0\0\ua52a\0\u061e\0\ua564\0\ua59e"+
    "\0\ua5d8\0\ua612\0\ua64c\0\ua686\0\ua6c0\0\ua6fa\0\ua734\0\ua76e"+
    "\0\ua7a8\0\ua7e2\0\ua81c\0\ua856\0\ua890\0\ua8ca\0\ua904\0\ua93e"+
    "\0\ua978\0\ua9b2\0\ua9ec\0\uaa26\0\uaa60\0\uaa9a\0\uaad4\0\uab0e"+
    "\0\uab48\0\uab82\0\uabbc\0\uabf6\0\uac30\0\uac6a\0\uaca4\0\uacde"+
    "\0\uad18\0\uad52\0\uad8c\0\uadc6\0\uae00\0\uae3a\0\uae74\0\uaeae"+
    "\0\uaee8\0\uaf22\0\uaf5c\0\uaf96\0\uafd0\0\u061e\0\ub00a\0\ub044"+
    "\0\ub07e\0\ub0b8\0\ub0f2\0\ub12c\0\ub166\0\ub1a0\0\ub1da\0\ub214"+
    "\0\ub24e\0\ub288\0\ub2c2\0\ub2fc\0\ub336\0\ub370\0\ub3aa\0\ub3e4"+
    "\0\ub41e\0\ub458\0\ub492\0\ub4cc\0\ub506\0\ub540\0\u061e\0\ub57a"+
    "\0\ub5b4\0\ub5ee\0\ub628\0\ub662\0\ub69c\0\ub6d6\0\ub710\0\ub74a"+
    "\0\ub784\0\ub7be\0\ub7f8\0\ub832\0\ub86c\0\ub8a6\0\ub8e0\0\ub91a"+
    "\0\ub954\0\ub98e\0\ub9c8\0\uba02\0\uba3c\0\uba76\0\ubab0\0\ubaea"+
    "\0\ubb24\0\ubb5e\0\ubb98\0\ubbd2\0\ubc0c\0\ubc46\0\ubc80\0\ubcba"+
    "\0\ubcf4\0\ubd2e\0\ubd68\0\ubda2\0\ubddc\0\ube16\0\ube50\0\ube8a"+
    "\0\ubec4\0\ubefe\0\ubf38\0\u061e\0\ubf72\0\ubfac\0\ubfe6\0\u061e"+
    "\0\uc020\0\uc05a\0\uc094\0\uc0ce\0\uc108\0\uc142\0\uc17c\0\uc1b6"+
    "\0\uc1f0\0\uc22a\0\uc264\0\uc29e\0\uc2d8\0\uc312\0\uc34c\0\uc386"+
    "\0\uc3c0\0\uc3fa\0\u5f62\0\uc434\0\u6ab6\0\u5fd6\0\uc46e\0\uc4a8"+
    "\0\uc4e2\0\uc51c\0\uc556\0\uc590\0\uc5ca\0\uc604\0\uc63e\0\uc678"+
    "\0\uc6b2\0\uc6ec\0\uc726\0\uc760\0\uc79a\0\uc7d4\0\uc80e\0\uc848"+
    "\0\uc882\0\uc8bc\0\uc8f6\0\uc930\0\uc96a\0\uc9a4\0\uc9de\0\uca18"+
    "\0\uca52\0\uca8c\0\ucac6\0\ucb00\0\ucb3a\0\ucb74\0\ucbae\0\ucbe8"+
    "\0\ucc22\0\ucc5c\0\ucc96\0\uccd0\0\ucd0a\0\ucd44\0\ucd7e\0\ucdb8"+
    "\0\ucdf2\0\uce2c\0\uce66\0\ucea0\0\uceda\0\ucf14\0\ucf4e\0\ucf88"+
    "\0\ucfc2\0\ucffc\0\ud036\0\ud070\0\ud0aa\0\ud0e4\0\ud11e\0\ud158"+
    "\0\ud192\0\ud1cc\0\ud206\0\ud240\0\ud27a\0\ud2b4\0\ud2ee\0\ud328"+
    "\0\ud362\0\ud39c\0\ud3d6\0\ud410\0\ud44a\0\ud484\0\ud4be\0\ud4f8"+
    "\0\ud532\0\u6ab6\0\ud56c\0\ud5a6\0\ud5e0\0\ud61a\0\ud654\0\ud68e"+
    "\0\ud6c8\0\ud702\0\ud73c\0\ud776\0\ud7b0\0\ud7ea\0\ud824\0\ud85e"+
    "\0\ud898\0\ud8d2\0\u061e\0\ud90c\0\ud946\0\ud980\0\ud9ba\0\ud9f4"+
    "\0\uda2e\0\uda68\0\udaa2\0\udadc\0\udb16\0\udb50\0\udb8a\0\udbc4"+
    "\0\udbfe\0\udc38\0\udc72\0\udcac\0\u061e\0\udce6\0\udd20\0\udd5a"+
    "\0\udd94\0\uddce\0\ude08\0\ude42\0\ude7c\0\udeb6\0\udef0\0\udf2a"+
    "\0\udf64\0\udf9e\0\udfd8\0\ue012\0\ue04c\0\ue086\0\ue0c0\0\ue0fa"+
    "\0\u061e\0\ue134\0\ue16e\0\ue1a8\0\u061e\0\ue1e2\0\ue21c\0\ue256"+
    "\0\ue290\0\ue2ca\0\ue304\0\ue33e\0\ue378\0\ue3b2\0\ue3ec\0\ue426"+
    "\0\ue460\0\u061e\0\u8708\0\ue49a\0\ue4d4\0\ue50e\0\ue548\0\ue582"+
    "\0\ue5bc\0\ue5f6\0\ue630\0\ue66a\0\ue6a4\0\ue6de\0\ue718\0\ue752"+
    "\0\ue78c\0\ue7c6\0\ue800\0\ue83a\0\ue874\0\ue8ae\0\ue8e8\0\ue922"+
    "\0\ue95c\0\ue996\0\ue9d0\0\uea0a\0\u7acc\0\u7b06\0\uea44\0\uea7e"+
    "\0\ueab8\0\ueaf2\0\ueb2c\0\ueb66\0\ueba0\0\uebda\0\uec14\0\uec4e"+
    "\0\uec88\0\uecc2\0\uecfc\0\ued36\0\ued70\0\uedaa\0\uede4\0\uee1e"+
    "\0\uee58\0\uee92\0\ueecc\0\uef06\0\uef40\0\uef7a\0\uefb4\0\uefee"+
    "\0\uf028\0\uf062\0\uf09c\0\uf0d6\0\uf110\0\uf14a\0\uf184\0\uf1be"+
    "\0\uf1f8\0\uf232\0\uf26c\0\uf2a6\0\uf2e0\0\uf31a\0\uf354\0\uf38e"+
    "\0\uf3c8\0\uf402\0\uf43c\0\uf476\0\uf4b0\0\uf4ea\0\uf524\0\uf55e"+
    "\0\uf598\0\uf5d2\0\uf60c\0\uf646\0\uf680\0\uf6ba\0\uf6f4\0\uf72e"+
    "\0\uf768\0\uf7a2\0\uf7dc\0\uf816\0\u061e\0\uf850\0\uf88a\0\uf8c4"+
    "\0\uf8fe\0\uf938\0\uf972\0\uf9ac\0\uf9e6\0\ufa20\0\ufa5a\0\ufa94"+
    "\0\uface\0\ufb08\0\ufb42\0\ufb7c\0\ufbb6\0\ufbf0\0\ufc2a\0\ufc64"+
    "\0\ufc9e\0\ufcd8\0\ufd12\0\ufd4c\0\ufd86\0\ufdc0\0\ufdfa\0\ufe34"+
    "\0\ufe6e\0\ufea8\0\ufee2\0\uff1c\0\uff56\0\u061e\0\uff90\0\uffca"+
    "\1\4\1\76\1\170\1\262\1\354\1\u0126\1\u0160\1\u019a"+
    "\1\u01d4\1\u020e\1\u0248\1\u0282\1\u02bc\1\u02f6\1\u0330\1\u036a"+
    "\1\u03a4\1\u03de\1\u0418\1\u0452\1\u048c\1\u04c6\1\u0500\1\u053a"+
    "\0\u061e\1\u0574\0\u061e\1\u05ae\1\u05e8\1\u0622\1\u065c\1\u0696"+
    "\1\u06d0\1\u070a\1\u0744\1\u077e\1\u07b8\1\u07f2\1\u082c\1\u0866"+
    "\1\u08a0\1\u08da\1\u0914\1\u094e\1\u0988\1\u09c2\1\u09fc\1\u0a36"+
    "\1\u0a70\1\u0aaa\1\u0ae4\1\u0b1e\1\u0b58\1\u0b92\1\u0bcc\1\u0c06"+
    "\1\u0c40\1\u0c7a\1\u0cb4\1\u0cee\1\u0d28\1\u0d62\1\u0d9c\1\u0dd6"+
    "\1\u0e10\1\u0e4a\1\u0e84\1\u0ebe\1\u0ef8\1\u0f32\1\u0f6c\1\u0fa6"+
    "\1\u0fe0\1\u101a\1\u1054\1\u108e\1\u10c8\1\u1102\1\u113c\1\u1176"+
    "\1\u11b0\1\u11ea\1\u1224\1\u125e\1\u1298\1\u12d2\1\u130c\1\u1346"+
    "\1\u1380\1\u13ba\1\u13f4\1\u142e\1\u1468\1\u14a2\1\u14dc\1\u1516"+
    "\1\u1550\1\u158a\1\u15c4\1\u15fe\1\u1638\1\u1672\1\u16ac\1\u16e6"+
    "\1\u1720\1\u175a\1\u1794\1\u17ce\1\u1808\1\u1842\1\u187c\1\u18b6"+
    "\1\u18f0\1\u192a\1\u1964\1\u199e\1\u19d8\1\u1a12\1\u1a4c\1\u1a86"+
    "\1\u1ac0\1\u1afa\1\u1b34\1\u1b6e\1\u1ba8\1\u1be2\1\u1c1c\1\u1c56"+
    "\1\u1c90\1\u1cca\1\u1d04\0\ud824\0\u061e\1\u1d3e\1\u1d78\1\u1db2"+
    "\1\u1dec\1\u1e26\1\u1e60\1\u1e9a\1\u1ed4\1\u1f0e\1\u1f48\1\u1f82"+
    "\1\u1fbc\1\u1ff6\1\u2030\1\u206a\1\u20a4\1\u20de\1\u2118\1\u2152"+
    "\1\u218c\1\u21c6\1\u2200\1\u223a\1\u2274\1\u22ae\1\u22e8\1\u2322"+
    "\1\u235c\1\u2396\1\u23d0\1\u240a\1\u2444\1\u247e\1\u24b8\1\u24f2"+
    "\1\u252c\1\u2566\1\u25a0\1\u25da\1\u2614\1\u264e\1\u2688\1\u26c2"+
    "\1\u26fc\1\u2736\1\u2770\1\u27aa\0\ud824\1\u27e4\0\uadc6\0\uae00"+
    "\1\u281e\1\u2858\1\u2892\1\u28cc\1\u2906\1\u2940\1\u297a\1\u29b4"+
    "\1\u29ee\1\u2a28\1\u2a62\1\u2a9c\1\u2ad6\1\u2b10\1\u2b4a\1\u2b84"+
    "\1\u2bbe\1\u2bf8\1\u2c32\1\u2c6c\1\u2ca6\1\u2ce0\1\u2d1a\1\u2d54"+
    "\1\u2d8e\1\u2dc8\1\u2e02\1\u2e3c\1\u2e76\0\u061e\1\u2eb0\1\u2eea"+
    "\1\u2f24\1\u2f5e\1\u2f98\1\u2fd2\1\u300c\1\u3046\1\u3080\1\u30ba"+
    "\1\u30f4\1\u312e\1\u3168\1\u31a2\1\u31dc\1\u3216\0\ub8a6\1\u3250"+
    "\1\u328a\1\u32c4\1\u32fe\1\u3338\1\u3372\1\u33ac\1\u33e6\1\u3420"+
    "\1\u345a\1\u3494\1\u34ce\1\u3508\1\u3542\1\u357c\0\ufdc0\1\u35b6"+
    "\1\u35f0\1\u362a\1\u3664\1\u369e\1\u36d8\1\u3712\1\u374c\1\u3786"+
    "\1\u37c0\1\u37fa\1\u3834\1\u386e\1\u38a8\1\u38e2\1\u391c\1\u3956"+
    "\1\u3990\1\u39ca\1\u3a04\1\u3a3e\1\u3a78\1\u3ab2\1\u3aec\1\u3b26"+
    "\1\u3b60\1\u3b9a\1\u3bd4\1\u3c0e\1\u3c48\1\u3c82\1\u3cbc\1\u3cf6"+
    "\1\u3d30\1\u3d6a\1\u3da4\0\ufdc0\1\u3dde\1\u3e18\1\u3e52\1\u3e8c"+
    "\1\u3ec6\1\u3f00\1\u3f3a\1\u3f74\1\u3fae\1\u3fe8\1\u4022\1\u405c"+
    "\1\u4096\1\u40d0\1\u410a\1\u4144\0\uc63e\1\u417e\1\u41b8\1\u41f2"+
    "\1\u422c\1\u4266\0\uca52\1\u42a0\1\u42da\1\u4314\1\u434e\1\u4388"+
    "\1\u43c2\1\u43fc\1\u4436\1\u4470\1\u44aa\1\u44e4\1\u451e\1\u4558"+
    "\1\u4592\1\u45cc\1\u4606\1\u4640\1\u467a\1\u46b4\1\u46ee\1\u4728"+
    "\1\u4762\1\u479c\1\u47d6\1\u4810\1\u484a\0\ucf14\1\u4884\0\ud27a"+
    "\1\u48be\1\u48f8\1\u4932\1\u496c\1\u49a6\1\u49e0\1\u4a1a\1\u4a54"+
    "\1\u4a8e\1\u4ac8\1\u4b02\1\u4b3c\1\u4b76\1\u4bb0\1\u4bea\1\u4c24"+
    "\1\u4c5e\1\u4c98\1\u4cd2\1\u4d0c\1\u4d46\1\u4d80\1\u4dba\1\u4df4"+
    "\0\ud73c\1\u4e2e\1\u4e68\1\u4ea2\1\u4edc\1\u4f16\1\u4f50\1\u4f8a"+
    "\1\u4fc4\1\u4ffe\1\u5038\1\u5072\1\u50ac\1\u50e6\1\u5120\1\u515a"+
    "\1\u5194\1\u51ce\1\u5208\1\u5242\1\u1ac0\1\u527c\1\u52b6\0\udf64"+
    "\1\u52f0\1\u532a\1\u5364\1\u539e\1\u53d8\1\u5412\1\u544c\1\u5486"+
    "\1\u54c0\1\u54fa\1\u5534\1\u556e\1\u55a8\1\u55e2\1\u561c\1\u5656"+
    "\1\u5690\1\u56ca\1\u5704\1\u573e\0\ue752\1\u5778\1\u57b2\1\u57ec"+
    "\1\u5826\1\u5860\1\u589a\1\u58d4\1\u590e\1\u5948\1\u5982\1\u59bc"+
    "\1\u59f6\1\u5a30\1\u5a6a\1\u5aa4\1\u2eb0\1\u5ade\1\u5b18\0\uf0d6"+
    "\1\u5b52\1\u5b8c\1\u5bc6\1\u5c00\1\u5c3a\1\u5c74\1\u5cae\1\u5ce8"+
    "\1\u5d22\1\u5d5c\1\u5d96\1\u5dd0\1\u5e0a\1\u5e44\1\u5e7e\1\u5eb8"+
    "\1\u5ef2\1\u5f2c\1\u5f66\1\u5fa0\1\u5fda\1\u6014\1\u604e\1\u6088"+
    "\1\u60c2\1\u60fc\1\u6136\1\u6170\1\u61aa\1\u61e4\1\u621e\1\u6258"+
    "\1\u6292\1\u62cc\1\u6306\1\u6340\1\u637a\1\u63b4\1\u63ee\1\u6428"+
    "\1\u6462\1\u649c\1\u64d6\1\u6510\1\u654a\1\u6584\1\u65be\1\u65f8"+
    "\1\u6632\1\u666c\1\u66a6\1\u66e0\1\u671a\1\u6754\1\u678e\1\u67c8"+
    "\1\u6802\1\u683c\1\u6876\1\u4bb0\1\u68b0\1\u68ea\1\u6924\1\u695e"+
    "\1\u6998\1\u69d2\1\u6a0c\1\u6a46\1\u6a80\1\u6aba\1\u6af4\1\u6b2e"+
    "\1\u6b68\1\u6ba2\1\u6bdc\1\u6c16\1\u6c50\1\u6c8a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1678];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\34\1\35\71\34\1\36\70\34\13\37\1\34\4\37"+
    "\1\40\51\37\1\34\1\41\70\34\13\37\1\34\4\37"+
    "\1\42\52\37\1\43\11\37\1\34\53\37\1\44\2\37"+
    "\1\34\1\45\71\34\1\46\71\34\1\47\70\34\1\50"+
    "\1\51\11\50\1\34\56\50\13\37\1\34\4\37\1\52"+
    "\52\37\1\53\11\37\1\34\71\37\1\34\4\37\1\54"+
    "\52\37\1\55\11\37\1\34\56\37\1\34\1\56\70\34"+
    "\1\37\1\57\11\37\1\34\44\37\1\60\6\37\1\61"+
    "\15\37\1\34\4\37\1\62\52\37\1\63\11\37\1\34"+
    "\71\37\1\34\4\37\1\64\51\37\1\34\1\65\70\34"+
    "\1\37\1\66\11\37\1\67\56\37\1\34\1\70\71\34"+
    "\1\71\71\34\1\72\70\34\1\37\1\73\11\37\1\34"+
    "\44\37\1\60\6\37\1\61\15\37\1\34\4\37\1\74"+
    "\52\37\1\75\11\37\1\34\56\37\74\0\1\76\71\0"+
    "\1\77\16\0\1\100\72\0\1\101\51\0\1\102\16\0"+
    "\1\103\2\0\1\104\67\0\1\105\70\0\1\106\40\0"+
    "\1\107\76\0\1\110\4\0\1\111\16\0\1\112\52\0"+
    "\1\113\16\0\1\114\71\0\1\115\2\0\1\116\47\0"+
    "\1\117\16\0\1\120\50\0\13\121\1\0\6\121\1\122"+
    "\47\121\21\0\1\123\72\0\1\124\70\0\1\125\52\0"+
    "\1\126\16\0\1\127\2\0\1\130\66\0\1\131\40\0"+
    "\1\107\36\0\1\132\131\0\1\133\24\0\1\134\70\0"+
    "\1\135\72\0\1\136\51\0\1\137\16\0\1\140\71\0"+
    "\1\141\63\0\1\67\77\0\1\142\2\0\1\143\47\0"+
    "\1\144\16\0\1\145\71\0\1\146\2\0\1\147\66\0"+
    "\1\150\40\0\1\107\31\0\1\151\70\0\1\152\53\0"+
    "\1\153\71\0\1\154\70\0\1\155\72\0\1\156\70\0"+
    "\1\157\101\0\1\160\103\0\1\161\130\0\1\162\30\0"+
    "\1\163\52\0\1\164\112\0\1\165\50\0\1\166\112\0"+
    "\1\167\71\0\1\170\57\0\1\171\62\0\1\172\112\0"+
    "\1\173\45\0\13\121\1\0\4\121\1\174\51\121\2\0"+
    "\1\175\71\0\1\176\72\0\1\177\112\0\1\200\57\0"+
    "\1\201\103\0\1\202\72\0\1\203\66\0\1\163\35\0"+
    "\1\204\13\0\1\205\72\0\1\206\70\0\1\207\71\0"+
    "\1\210\113\0\1\211\57\0\1\212\62\0\1\213\70\0"+
    "\1\214\113\0\1\215\57\0\1\216\103\0\1\217\47\0"+
    "\1\220\73\0\1\221\71\0\1\222\70\0\1\223\72\0"+
    "\1\224\22\0\1\225\45\0\1\226\73\0\1\227\76\0"+
    "\1\230\143\0\1\231\11\0\1\232\77\0\1\233\63\0"+
    "\1\234\77\0\1\235\71\0\1\236\104\0\1\237\50\0"+
    "\1\240\77\0\1\241\57\0\13\121\1\0\4\121\1\174"+
    "\1\121\1\122\47\121\3\0\1\242\71\0\1\243\72\0"+
    "\1\244\77\0\1\245\104\0\1\246\56\0\1\247\140\0"+
    "\1\250\13\0\1\251\71\0\1\252\72\0\1\253\70\0"+
    "\1\254\71\0\1\255\100\0\1\256\64\0\1\257\17\0"+
    "\1\260\50\0\1\261\70\0\1\262\100\0\1\263\104\0"+
    "\1\264\56\0\1\265\62\0\1\266\73\0\1\267\71\0"+
    "\1\270\70\0\1\271\72\0\1\272\70\0\1\273\71\0"+
    "\1\274\71\0\1\275\5\0\1\276\11\0\1\277\1\300"+
    "\1\301\1\302\4\0\1\303\4\0\1\304\35\0\1\305"+
    "\151\0\1\306\11\0\1\307\71\0\1\310\71\0\1\311"+
    "\71\0\1\312\71\0\1\313\73\0\1\314\67\0\1\315"+
    "\71\0\1\316\70\0\1\317\71\0\1\320\72\0\1\321"+
    "\71\0\1\322\73\0\1\323\107\0\1\324\126\0\1\107"+
    "\34\0\1\325\50\0\1\326\72\0\1\327\70\0\1\330"+
    "\22\0\1\331\46\0\1\332\72\0\1\333\73\0\1\334"+
    "\21\0\1\335\47\0\1\336\67\0\1\337\70\0\1\340"+
    "\72\0\1\341\73\0\1\342\67\0\1\343\70\0\1\344"+
    "\73\0\1\345\71\0\1\346\70\0\1\347\66\0\1\350"+
    "\7\0\1\351\64\0\1\352\71\0\1\353\75\0\1\354"+
    "\66\0\1\355\1\0\1\356\63\0\1\357\4\0\1\360"+
    "\110\0\1\361\25\0\1\362\41\0\1\363\47\0\1\364"+
    "\100\0\1\365\70\0\1\366\106\0\1\367\60\0\1\370"+
    "\67\0\1\371\71\0\1\372\113\0\1\373\71\0\1\374"+
    "\61\0\1\375\53\0\1\376\67\0\1\377\71\0\1\u0100"+
    "\72\0\1\u0101\71\0\1\u0102\110\0\1\u0103\71\0\1\u0104"+
    "\53\0\1\u0105\72\0\1\u0106\143\0\1\163\15\0\1\u0107"+
    "\66\0\1\u0108\74\0\1\u0109\70\0\1\330\72\0\1\u010a"+
    "\125\0\1\u010b\60\0\1\u010c\50\0\1\u010d\70\0\1\u010e"+
    "\75\0\1\u010f\64\0\1\u0110\76\0\1\u0111\65\0\1\u0112"+
    "\111\0\1\u0113\50\0\1\u0114\73\0\1\u0115\71\0\1\u0116"+
    "\70\0\1\u0117\136\0\1\u0118\44\0\1\u0119\45\0\1\u011a"+
    "\75\0\1\u011b\122\0\1\u011c\41\0\1\u011d\135\0\1\u011e"+
    "\43\0\1\u011f\50\0\1\u0120\112\0\1\u0121\100\0\1\u0122"+
    "\44\0\1\u0123\114\0\1\u0124\76\0\1\u0125\40\0\1\u0126"+
    "\111\0\1\u0127\131\0\1\u0128\11\0\1\u0129\71\0\1\u012a"+
    "\74\0\1\u012b\71\0\1\u012c\62\0\1\u012d\120\0\1\u012e"+
    "\51\0\1\u012f\71\0\1\u0130\64\0\1\u0131\71\0\1\u0132"+
    "\74\0\1\u0133\71\0\1\u0134\113\0\1\u0135\46\0\1\u0136"+
    "\107\0\1\u0137\120\0\1\u0138\20\0\1\u0139\71\0\1\u013a"+
    "\77\0\1\u013b\106\0\1\u013c\70\0\1\u013d\76\0\1\u013e"+
    "\66\0\1\u013f\55\0\1\u0140\67\0\1\u0141\112\0\1\u0142"+
    "\64\0\1\u0143\51\0\1\u0144\71\0\1\u0145\71\0\1\u0146"+
    "\74\0\1\u0147\64\0\1\u0148\114\0\1\u0149\117\0\1\u014a"+
    "\25\0\1\u014b\122\0\1\u014c\33\0\1\u014d\76\0\1\u014e"+
    "\71\0\1\u014f\74\0\1\u0150\106\0\1\u0151\51\0\1\u0152"+
    "\114\0\1\u0153\42\0\1\u0154\115\0\1\u0155\73\0\1\u0156"+
    "\65\0\1\u0157\60\0\1\u0158\64\0\1\u0159\71\0\1\u015a"+
    "\121\0\1\u015b\71\0\1\u015c\57\0\1\u015d\50\0\1\u015e"+
    "\124\0\1\u015f\71\0\1\u0160\43\0\1\u0161\71\0\1\u0162"+
    "\64\0\1\u0163\71\0\1\u0164\71\0\1\u0165\116\0\1\u0166"+
    "\47\0\1\u0167\64\0\1\u0168\142\0\1\u0169\71\0\1\u016a"+
    "\24\0\1\u016b\72\0\1\u016c\110\0\1\u016d\47\0\1\u016e"+
    "\112\0\1\u016f\72\0\1\u0170\116\0\1\u0171\22\0\1\u0172"+
    "\74\0\1\u0173\73\0\1\u0174\70\0\1\u0175\71\0\1\u0176"+
    "\65\0\1\u0177\113\0\1\u0178\45\0\1\u0179\71\0\1\u017a"+
    "\73\0\1\u017b\74\0\1\u017c\107\0\1\u017d\52\0\1\u017e"+
    "\105\0\1\u017f\1\u0180\54\0\1\u0181\72\0\1\u0182\104\0"+
    "\1\u0183\74\0\1\u0184\55\0\1\u0185\106\0\1\u0186\45\0"+
    "\1\u0187\116\0\1\u0188\125\0\1\163\10\0\1\u0189\71\0"+
    "\1\u018a\116\0\1\u018b\71\0\1\u018c\51\0\1\u018d\67\0"+
    "\1\u018e\124\0\1\u018f\71\0\1\u0190\70\0\1\u0191\71\0"+
    "\1\u0192\44\0\1\u0193\71\0\1\u0194\64\0\1\u0195\70\0"+
    "\1\u0196\71\0\1\u0197\113\0\1\u0198\45\0\1\u0199\71\0"+
    "\1\u019a\120\0\1\u019b\72\0\1\u019c\50\0\1\u019d\65\0"+
    "\1\u019e\66\0\1\u019f\114\0\1\u01a0\53\0\1\u01a1\67\0"+
    "\1\u01a2\116\0\1\u01a3\76\0\1\u01a4\43\0\1\u01a5\71\0"+
    "\1\u01a6\70\0\1\u01a7\110\0\1\u01a8\67\0\1\u01a9\72\0"+
    "\1\u01aa\53\0\1\u01ab\73\0\1\u01ac\67\0\1\u01ad\63\0"+
    "\1\u01ae\117\0\1\u01af\67\0\1\u01b0\43\0\13\u01b1\1\0"+
    "\6\u01b1\1\u01b2\47\u01b1\13\u01b3\1\0\56\u01b3\26\0\1\u01b4"+
    "\45\0\1\u01b5\73\0\1\u01b6\112\0\1\u01b7\53\0\1\u01b8"+
    "\107\0\1\u01b9\71\0\1\u01ba\72\0\1\u01bb\71\0\1\u01bc"+
    "\65\0\1\u01bd\73\0\1\u01be\54\0\1\u01bf\71\0\1\u01c0"+
    "\122\0\1\u01c1\71\0\1\u01c2\37\0\1\u01c3\71\0\1\u01c4"+
    "\65\0\1\u01c5\74\0\1\u01c6\76\0\1\u01c7\106\0\1\u01c8"+
    "\70\0\1\u01c9\71\0\1\u01ca\45\0\1\u01cb\114\0\1\u01cc"+
    "\75\0\1\u01cd\47\0\1\u01ce\21\0\1\u01cf\65\0\1\u01d0"+
    "\46\0\1\u01d1\75\0\1\u01d2\67\0\1\u01d3\112\0\1\u01d4"+
    "\104\0\1\u01d5\37\0\1\u01d6\71\0\1\u01d7\74\0\1\u01d8"+
    "\62\0\1\u01d9\115\0\1\u01da\72\0\1\u01db\53\0\1\u01dc"+
    "\105\0\1\u01dd\52\0\1\u01de\66\0\1\u01df\117\0\1\u01e0"+
    "\74\0\1\u01e1\35\0\13\u01b1\1\0\5\u01b1\1\u01e2\6\u01b1"+
    "\1\u01e3\41\u01b1\13\u01e4\1\0\5\u01e4\1\u01e5\6\u01e4\1\u01e6"+
    "\41\u01e4\1\u01b3\1\u01e7\11\u01b3\1\0\56\u01b3\41\0\1\u01e8"+
    "\33\0\1\u01e9\121\0\1\u01ea\60\0\1\u01eb\1\u01ec\70\0"+
    "\1\u01ed\57\0\1\u01ee\71\0\1\u01ef\65\0\1\u01f0\71\0"+
    "\1\u01f1\67\0\1\u01f2\101\0\1\u01f3\71\0\1\u01f4\66\0"+
    "\1\u01f5\71\0\1\u01f6\110\0\1\u01f7\71\0\1\u01f8\102\0"+
    "\1\u01f9\34\0\1\u01fa\75\0\1\u01fb\65\0\1\u01fc\116\0"+
    "\1\u01fd\71\0\1\u01fe\67\0\1\u018d\66\0\1\u01ff\71\0"+
    "\1\u0200\77\0\1\u0201\50\0\1\u0202\110\0\1\u0203\70\0"+
    "\1\u0204\46\0\1\u0205\123\0\1\u0206\63\0\1\u0207\52\0"+
    "\1\u0208\74\0\1\u0209\71\0\1\u020a\65\0\1\u020b\122\0"+
    "\1\u020c\42\0\1\u020d\63\0\1\u020e\75\0\1\u020f\105\0"+
    "\1\u0210\1\u0211\70\0\1\u0212\1\u0213\55\0\1\u0214\111\0"+
    "\1\u0215\67\0\1\u0216\44\0\13\u01b1\1\0\5\u01b1\1\u01e2"+
    "\1\u0217\5\u01b1\1\u01e3\54\u01b1\1\0\5\u01b1\1\u01e2\6\u01b1"+
    "\1\u01e3\1\u0218\40\u01b1\1\u01e4\1\u0219\11\u01e4\1\0\5\u01e4"+
    "\1\u01e5\6\u01e4\1\u01e6\42\u01e4\1\u0219\11\u01e4\1\0\5\u01e4"+
    "\1\u01e5\1\u021a\5\u01e4\1\u01e6\42\u01e4\1\u0219\11\u01e4\1\0"+
    "\5\u01e4\1\u01e5\6\u01e4\1\u01e6\1\u021b\40\u01e4\1\u01b3\1\u01e7"+
    "\11\u01b3\1\0\5\u01b3\1\u021c\50\u01b3\26\0\1\u021d\52\0"+
    "\1\u021e\71\0\1\u021f\112\0\1\u0220\47\0\1\u0221\71\0"+
    "\1\u018d\116\0\1\u0222\71\0\1\u0223\63\0\1\u0224\71\0"+
    "\1\u0225\71\0\1\u0226\56\0\1\u0227\71\0\1\u0228\113\0"+
    "\1\u0229\71\0\1\u022a\41\0\1\u022b\124\0\1\u022c\60\0"+
    "\1\u022d\102\0\1\u022e\34\0\1\u022f\71\0\1\u0230\67\0"+
    "\13\u0231\1\0\56\u0231\13\u0232\1\0\56\u0232\25\0\1\u0233"+
    "\70\0\1\u0234\55\0\1\u0235\107\0\1\u0236\46\0\1\u015d"+
    "\70\0\1\u0237\130\0\1\u0238\42\0\1\u0239\66\0\1\u023a"+
    "\71\0\1\u023b\74\0\1\u023c\105\0\1\u023d\75\0\1\u023e"+
    "\76\0\1\u023f\44\0\1\u0240\107\0\1\u0241\71\0\1\u0242"+
    "\63\0\1\u0243\101\0\1\u0244\65\0\1\u0245\43\0\13\u01b1"+
    "\1\0\5\u01b1\1\u01e2\5\u01b1\1\u0246\1\u01e3\41\u01b1\1\u01e4"+
    "\1\u0219\11\u01e4\1\0\5\u01e4\1\u0247\6\u01e4\1\u01e6\42\u01e4"+
    "\1\u0219\11\u01e4\1\0\5\u01e4\1\u01e5\5\u01e4\1\u0248\1\u01e6"+
    "\41\u01e4\1\u01b3\1\u01e7\11\u01b3\1\0\10\u01b3\1\u0249\45\u01b3"+
    "\7\0\1\u024a\62\0\13\u024b\1\0\7\u024b\1\u024c\46\u024b"+
    "\6\0\1\u024d\114\0\1\u024e\124\0\1\u024f\4\0\1\u0250"+
    "\7\0\1\u0251\71\0\1\u01ef\71\0\1\u0252\146\0\1\u0253"+
    "\1\0\1\u0254\25\0\1\u0255\74\0\1\u0256\71\0\1\u0257"+
    "\71\0\1\u0258\71\0\1\u0259\71\0\1\u025a\50\0\1\u025b"+
    "\121\0\1\u025c\63\0\1\u025d\102\0\1\u025e\71\0\1\u025f"+
    "\32\0\1\u0231\1\u0260\11\u0231\1\0\56\u0231\1\u0232\1\u0261"+
    "\11\u0232\1\0\56\u0232\7\0\1\u0262\110\0\1\u0263\75\0"+
    "\1\u0264\47\0\1\u0265\106\0\1\u0266\72\0\1\u0267\70\0"+
    "\1\u0268\44\0\4\u0269\1\u026a\6\u0269\1\0\56\u0269\23\0"+
    "\1\u026b\55\0\1\u026c\111\0\1\u026d\64\0\1\u026e\75\0"+
    "\1\u026f\52\0\1\u0270\113\0\1\u0271\71\0\1\u0272\44\0"+
    "\1\u0273\75\0\1\u0274\61\0\5\u01b1\1\u0275\5\u01b1\1\0"+
    "\5\u01b1\1\u01e2\6\u01b1\1\u01e3\41\u01b1\1\u01e4\1\u0219\11\u01e4"+
    "\1\0\5\u01e4\1\u01e5\1\u021a\1\u01e4\1\u0276\3\u01e4\1\u01e6"+
    "\42\u01e4\1\u0219\3\u01e4\1\u0277\5\u01e4\1\0\5\u01e4\1\u01e5"+
    "\6\u01e4\1\u01e6\41\u01e4\1\u01b3\1\u01e7\10\u01b3\1\u0278\1\0"+
    "\56\u01b3\6\0\1\u0279\63\0\4\u024b\1\u027a\6\u024b\1\0"+
    "\62\u024b\1\u027b\6\u024b\1\0\56\u024b\22\0\1\u027c\1\u027d"+
    "\75\0\1\u027e\52\0\1\u027f\70\0\1\u0280\70\0\1\u0281"+
    "\126\0\1\u0282\55\0\1\u0283\75\0\1\u0284\124\0\1\u0285"+
    "\67\0\1\u0286\33\0\1\u0287\71\0\1\u0288\51\0\1\u0289"+
    "\110\0\1\u028a\71\0\1\u028b\73\0\1\u028c\70\0\1\u028d"+
    "\71\0\1\u028e\43\0\1\u0231\1\u0260\11\u0231\1\0\5\u0231"+
    "\1\u028f\50\u0231\1\u0232\1\u0261\11\u0232\1\0\5\u0232\1\u0290"+
    "\50\u0232\32\0\1\u0291\50\0\1\u0292\76\0\1\u0293\24\0"+
    "\1\u0294\22\0\1\u0295\35\0\1\u0296\65\0\1\u0297\52\0"+
    "\1\u0298\146\0\1\u0299\1\0\1\u029a\3\0\2\u0269\1\u029b"+
    "\10\u0269\1\0\56\u0269\2\0\1\u029c\73\0\1\u029d\113\0"+
    "\1\u029e\72\0\1\u029f\64\0\1\u02a0\76\0\1\u02a1\71\0"+
    "\1\u02a2\47\0\1\u02a3\116\0\1\u02a4\37\0\13\u01b1\1\0"+
    "\5\u01b1\1\u01e2\5\u01b1\1\u02a5\1\u01e3\41\u01b1\1\u01e4\1\u0219"+
    "\10\u01e4\1\u02a6\1\0\5\u01e4\1\u01e5\6\u01e4\1\u01e6\42\u01e4"+
    "\1\u0219\11\u01e4\1\0\5\u01e4\1\u01e5\5\u01e4\1\u02a7\1\u01e6"+
    "\41\u01e4\1\u01b3\1\u01e7\3\u01b3\1\u02a8\5\u01b3\1\0\56\u01b3"+
    "\23\0\1\u02a9\46\0\4\u024b\1\u027a\5\u024b\1\u02aa\1\0"+
    "\62\u024b\1\u027a\5\u024b\1\u02ab\1\0\56\u024b\30\0\1\u02ac"+
    "\73\0\1\u02ad\45\0\1\u02ae\23\0\1\u02af\45\0\1\u02b0"+
    "\101\0\1\u02b1\57\0\1\u02b2\67\0\1\u02b3\76\0\1\u02b4"+
    "\115\0\1\u02b5\65\0\1\u02b6\52\0\1\u02b7\71\0\1\u02b8"+
    "\63\0\1\u02b9\75\0\1\u02ba\111\0\1\u02bb\71\0\1\u02bc"+
    "\72\0\1\u02bd\71\0\1\u02be\42\0\1\u0231\1\u0260\11\u0231"+
    "\1\0\10\u0231\1\u02bf\45\u0231\1\u0232\1\u0261\11\u0232\1\0"+
    "\10\u0232\1\u02c0\45\u0232\25\0\1\u02c1\75\0\1\u02c2\51\0"+
    "\1\u02c3\104\0\1\u02c4\73\0\1\u02c5\65\0\1\u02c6\51\0"+
    "\1\u02c7\75\0\1\u02c8\112\0\1\u02c9\75\0\1\u02ca\36\0"+
    "\2\u0269\1\u029b\1\u02cb\7\u0269\1\0\56\u0269\3\0\1\u02cc"+
    "\110\0\1\u02cd\74\0\1\u02ce\72\0\1\u02cf\75\0\1\u02d0"+
    "\71\0\1\u02d1\63\0\1\u02d2\67\0\1\u02d3\1\u02d4\46\0"+
    "\2\u01b1\1\u02d5\10\u01b1\1\0\5\u01b1\1\u01e2\6\u01b1\1\u01e3"+
    "\41\u01b1\1\u01e4\1\u0219\3\u01e4\1\u02d6\5\u01e4\1\0\5\u01e4"+
    "\1\u01e5\6\u01e4\1\u01e6\42\u01e4\1\u0219\1\u02d7\10\u01e4\1\0"+
    "\5\u01e4\1\u01e5\6\u01e4\1\u01e6\41\u01e4\1\u01b3\1\u01e7\11\u01b3"+
    "\1\0\11\u01b3\1\u02d8\44\u01b3\4\0\1\u02d9\65\0\4\u024b"+
    "\1\u027a\6\u024b\1\0\17\u024b\1\u02da\42\u024b\1\u027a\6\u024b"+
    "\1\0\17\u024b\1\u02db\36\u024b\31\0\1\u02dc\44\0\1\u02dd"+
    "\121\0\1\u02de\76\0\1\u02df\34\0\1\u02e0\67\0\1\u02e1"+
    "\73\0\1\u02e2\71\0\1\u02e3\71\0\1\u02e4\74\0\1\u02e5"+
    "\64\0\1\u02e6\121\0\1\u02e7\71\0\1\u018d\51\0\1\u02e8"+
    "\61\0\1\u02e9\77\0\1\u02ea\106\0\1\u02eb\72\0\1\u02ec"+
    "\71\0\1\u02ed\43\0\1\u0231\1\u0260\10\u0231\1\u02ee\1\0"+
    "\56\u0231\1\u0232\1\u0261\10\u0232\1\u02ef\1\0\56\u0232\22\0"+
    "\1\u02f0\71\0\1\u02f1\100\0\1\u02f2\47\0\1\u02f3\107\0"+
    "\1\u02f4\73\0\1\u02f5\64\0\1\u02f6\51\0\1\u02f7\76\0"+
    "\1\u02f8\62\0\2\u0269\1\u029b\1\u0269\1\u02f9\6\u0269\1\0"+
    "\56\u0269\4\0\1\u02fa\141\0\1\u02fb\42\0\1\u02fc\50\0"+
    "\1\u02fd\71\0\1\u02fe\77\0\1\u02ff\107\0\1\u0300\41\0"+
    "\13\u01b1\1\0\5\u01b1\1\u01e2\6\u01b1\1\u01e3\1\u01b1\1\u0301"+
    "\37\u01b1\1\u01e4\1\u0219\11\u01e4\1\0\5\u01e4\1\u01e5\3\u01e4"+
    "\1\u0302\2\u01e4\1\u01e6\42\u01e4\1\u0219\11\u01e4\1\0\5\u01e4"+
    "\1\u01e5\6\u01e4\1\u01e6\1\u01e4\1\u0303\37\u01e4\1\u01b3\1\u01e7"+
    "\11\u01b3\1\0\40\u01b3\1\u0304\15\u01b3\12\0\1\u0305\57\0"+
    "\4\u024b\1\u027a\2\u024b\1\u0306\3\u024b\1\0\62\u024b\1\u027a"+
    "\2\u024b\1\u0307\3\u024b\1\0\56\u024b\27\0\1\u0308\47\0"+
    "\1\u0309\74\0\1\u030a\70\0\1\u030b\72\0\1\u030c\112\0"+
    "\1\u030d\51\0\1\u030e\64\0\1\u030f\67\0\1\u0310\73\0"+
    "\1\u0311\71\0\1\u0312\103\0\1\u0313\100\0\1\u0314\56\0"+
    "\1\u0315\111\0\1\u0316\113\0\1\u0317\42\0\1\u0318\71\0"+
    "\1\u0319\44\0\1\u0231\1\u0260\3\u0231\1\u031a\5\u0231\1\0"+
    "\56\u0231\1\u0232\1\u0261\3\u0232\1\u031b\5\u0232\1\0\56\u0232"+
    "\13\u031c\1\0\56\u031c\13\u031d\1\0\56\u031d\37\0\1\u031e"+
    "\64\0\1\u031f\66\0\1\u0320\64\0\1\u0321\53\0\1\u0322"+
    "\71\0\1\u0323\65\0\2\u0269\1\u029b\2\u0269\1\u0324\5\u0269"+
    "\1\0\56\u0269\5\0\1\u0325\106\0\1\u0326\123\0\1\u0327"+
    "\22\0\1\u0328\71\0\1\u0329\103\0\1\u032a\103\0\1\u032b"+
    "\40\0\3\u01b1\1\u032c\7\u01b1\1\0\5\u01b1\1\u01e2\6\u01b1"+
    "\1\u01e3\41\u01b1\1\u01e4\1\u0219\11\u01e4\1\0\5\u01e4\1\u01e5"+
    "\4\u01e4\1\u032d\1\u01e4\1\u01e6\42\u01e4\1\u0219\1\u01e4\1\u032e"+
    "\7\u01e4\1\0\5\u01e4\1\u01e5\6\u01e4\1\u01e6\41\u01e4\1\u01b3"+
    "\1\u01e7\11\u01b3\1\0\20\u01b3\1\u032f\35\u01b3\33\0\1\u0330"+
    "\36\0\4\u024b\1\u027a\6\u024b\1\0\15\u024b\1\u0331\44\u024b"+
    "\1\u027a\6\u024b\1\0\15\u024b\1\u0332\40\u024b\32\0\1\u0333"+
    "\63\0\1\u0334\53\0\1\u0335\71\0\1\u0336\115\0\1\u0337"+
    "\46\0\1\u0338\71\0\1\u0339\110\0\1\u033a\54\0\1\u033b"+
    "\62\0\1\u033c\73\0\1\u033d\75\0\1\u033e\103\0\1\u033f"+
    "\1\u0340\73\0\1\u0341\62\0\1\u0342\71\0\1\u0343\51\0"+
    "\1\u0344\55\0\1\u0345\71\0\1\u0346\15\0\1\u0231\1\u0260"+
    "\5\u0231\1\u0347\3\u0231\1\0\56\u0231\1\u0232\1\u0261\11\u0232"+
    "\1\0\15\u0232\1\u0348\40\u0232\1\u031c\1\u0349\11\u031c\1\0"+
    "\56\u031c\1\u031d\1\u034a\11\u031d\1\0\56\u031d\7\0\1\u034b"+
    "\107\0\1\u034c\53\0\1\u034d\62\0\13\u034e\1\0\56\u034e"+
    "\4\0\1\u034f\67\0\1\u0350\67\0\2\u0269\1\u029b\10\u0269"+
    "\1\0\1\u0351\55\u0269\14\0\1\u0352\77\0\1\u0326\1\u0353"+
    "\72\0\1\u0354\71\0\1\u0355\65\0\1\u0356\100\0\1\u0357"+
    "\42\0\13\u01b1\1\0\3\u01b1\1\u0358\1\u01b1\1\u01e2\6\u01b1"+
    "\1\u01e3\41\u01b1\1\u01e4\1\u0219\11\u01e4\1\0\5\u01e4\1\u01e5"+
    "\3\u01e4\1\u0359\2\u01e4\1\u01e6\42\u01e4\1\u0219\11\u01e4\1\0"+
    "\3\u01e4\1\u035a\1\u01e4\1\u01e5\6\u01e4\1\u01e6\41\u01e4\1\u01b3"+
    "\1\u01e7\5\u01b3\1\u035b\3\u01b3\1\0\56\u01b3\7\0\1\u035c"+
    "\62\0\4\u024b\1\u027a\2\u024b\1\u035d\3\u024b\1\0\62\u024b"+
    "\1\u027a\2\u024b\1\u035e\3\u024b\1\0\56\u024b\4\0\1\u035f"+
    "\77\0\1\u0360\61\0\1\u0361\76\0\1\u0362\64\0\1\u0363"+
    "\111\0\1\u0364\73\0\1\u0365\106\0\1\u0366\36\0\1\u0367"+
    "\74\0\1\u0368\106\0\1\u0369\70\0\1\u036a\74\0\1\u036b"+
    "\63\0\1\u036c\57\0\1\u036d\72\0\1\u036e\70\0\1\u036f"+
    "\103\0\1\u0370\137\0\1\u0371\1\0\1\u0231\1\u0260\11\u0231"+
    "\1\0\14\u0231\1\u0372\41\u0231\1\u0232\1\u0261\5\u0232\1\u0373"+
    "\3\u0232\1\0\56\u0232\1\u031c\1\u0349\11\u031c\1\0\5\u031c"+
    "\1\u0374\50\u031c\1\u031d\1\u034a\11\u031d\1\0\5\u031d\1\u0375"+
    "\50\u031d\6\0\1\u0376\111\0\1\u0377\65\0\1\u0378\47\0"+
    "\1\u034e\1\u0379\11\u034e\1\0\56\u034e\26\0\1\u037a\54\0"+
    "\1\u037b\60\0\2\u0269\1\u029b\10\u0269\1\0\1\u0269\1\u037c"+
    "\54\u0269\15\0\1\u037d\104\0\1\u037e\53\0\1\u037f\71\0"+
    "\1\u0380\112\0\1\u0381\70\0\1\u0382\37\0\13\u01b1\1\0"+
    "\4\u01b1\1\u0383\1\u01e2\6\u01b1\1\u01e3\41\u01b1\1\u01e4\1\u0219"+
    "\11\u01e4\1\0\5\u01e4\1\u01e5\5\u01e4\1\u0384\1\u01e6\42\u01e4"+
    "\1\u0219\11\u01e4\1\0\4\u01e4\1\u0385\1\u01e5\6\u01e4\1\u01e6"+
    "\41\u01e4\1\u01b3\1\u01e7\11\u01b3\1\0\6\u01b3\1\u0386\47\u01b3"+
    "\31\0\1\u0387\40\0\4\u024b\1\u027a\6\u024b\1\0\3\u024b"+
    "\1\u0388\56\u024b\1\u027a\6\u024b\1\0\3\u024b\1\u0389\52\u024b"+
    "\5\0\1\u038a\103\0\1\u038b\77\0\1\u038c\76\0\1\u038d"+
    "\66\0\1\u038e\42\0\13\u038f\1\0\56\u038f\22\0\1\u0390"+
    "\75\0\1\u0391\54\0\1\u0392\66\0\1\u0393\124\0\1\u0394"+
    "\37\0\1\u0395\113\0\1\u0396\65\0\1\u0397\75\0\1\u0398"+
    "\52\0\1\u0399\67\0\1\u039a\61\0\1\u0231\1\u0260\11\u0231"+
    "\1\0\11\u0231\1\u039b\44\u0231\1\u0232\1\u0261\11\u0232\1\0"+
    "\10\u0232\1\u039c\45\u0232\1\u031c\1\u0349\11\u031c\1\0\10\u031c"+
    "\1\u039d\45\u031c\1\u031d\1\u034a\11\u031d\1\0\10\u031d\1\u039e"+
    "\45\u031d\22\0\1\u039f\110\0\1\u03a0\30\0\13\u03a1\1\0"+
    "\56\u03a1\1\u034e\1\u0379\11\u034e\1\0\5\u034e\1\u03a2\50\u034e"+
    "\41\0\1\u03a3\36\0\1\u03a4\63\0\2\u0269\1\u029b\10\u0269"+
    "\1\0\2\u0269\1\u03a5\53\u0269\16\0\1\u03a6\104\0\1\u03a7"+
    "\57\0\1\u03a8\71\0\1\u03a9\77\0\1\u03aa\50\0\1\u03ab"+
    "\65\0\1\u01e4\1\u0219\5\u01e4\1\u03ac\3\u01e4\1\0\5\u01e4"+
    "\1\u01e5\6\u01e4\1\u01e6\41\u01e4\7\0\1\u03ad\62\0\4\u024b"+
    "\1\u027a\6\u024b\1\0\4\u024b\1\u03ae\55\u024b\1\u027a\6\u024b"+
    "\1\0\4\u024b\1\u03af\51\u024b\24\0\1\u03b0\65\0\1\u03b1"+
    "\60\0\1\u03b2\74\0\1\u03b3\101\0\1\u03b4\47\0\1\u038f"+
    "\1\u03b5\11\u038f\1\0\56\u038f\13\u03b6\1\0\56\u03b6\12\0"+
    "\1\u03b7\63\0\1\u03b8\76\0\1\u03b9\106\0\1\u03ba\47\0"+
    "\1\u03bb\114\0\1\u03bc\51\0\1\u03bd\121\0\1\u03be\34\0"+
    "\1\u03bf\101\0\1\u03c0\57\0\1\u0231\1\u0260\5\u0231\1\u03c1"+
    "\3\u0231\1\0\56\u0231\1\u0232\1\u0261\11\u0232\1\0\12\u0232"+
    "\1\u03c2\43\u0232\1\u031c\1\u0349\10\u031c\1\u03c3\1\0\56\u031c"+
    "\1\u031d\1\u034a\10\u031d\1\u03c4\1\0\56\u031d\13\u03c5\1\0"+
    "\56\u03c5\26\0\1\u03c6\43\0\1\u03a1\1\u03c7\11\u03a1\1\0"+
    "\56\u03a1\1\u034e\1\u0379\11\u034e\1\0\10\u034e\1\u03c8\45\u034e"+
    "\26\0\1\u03c9\54\0\1\u03ca\60\0\2\u0269\1\u029b\10\u0269"+
    "\1\0\3\u0269\1\u03cb\52\u0269\17\0\1\u03cc\101\0\1\u03cd"+
    "\62\0\1\u03ce\71\0\1\u03cf\76\0\1\u03d0\51\0\1\u03d1"+
    "\64\0\1\u01e4\1\u0219\11\u01e4\1\0\5\u01e4\1\u01e5\1\u03d2"+
    "\5\u01e4\1\u01e6\41\u01e4\17\0\1\u03d3\52\0\4\u024b\1\u027a"+
    "\6\u024b\1\0\10\u024b\1\u03d4\47\u024b\1\u03d5\1\u024b\1\u027a"+
    "\6\u024b\1\0\10\u024b\1\u03d4\16\u024b\1\u03d6\26\u024b\12\0"+
    "\1\u03d7\112\0\1\u03d8\60\0\1\u03d9\56\0\1\u03da\62\0"+
    "\13\u03db\1\0\56\u03db\1\u038f\1\u03b5\11\u038f\1\0\5\u038f"+
    "\1\u03dc\50\u038f\1\u03b6\1\u03dd\11\u03b6\1\0\56\u03b6\2\0"+
    "\1\u03de\67\0\13\u03df\1\0\7\u03df\1\u03e0\46\u03df\4\0"+
    "\1\u03e1\77\0\1\u03e2\101\0\1\u03e3\1\u03e4\53\0\1\u03e5"+
    "\70\0\1\u03e6\74\0\1\u03e7\107\0\1\u03e8\46\0\1\u03e9"+
    "\67\0\1\u0231\1\u0260\11\u0231\1\0\16\u0231\1\u03ea\37\u0231"+
    "\1\u0232\1\u0261\7\u0232\1\u03eb\1\u0232\1\0\56\u0232\1\u031c"+
    "\1\u0349\11\u031c\1\0\11\u031c\1\u03ec\44\u031c\1\u031d\1\u034a"+
    "\11\u031d\1\0\11\u031d\1\u03ed\44\u031d\1\u03c5\1\u03ee\11\u03c5"+
    "\1\0\56\u03c5\7\0\1\u03ef\62\0\1\u03a1\1\u03c7\11\u03a1"+
    "\1\0\5\u03a1\1\u03f0\50\u03a1\1\u034e\1\u0379\10\u034e\1\u03f1"+
    "\1\0\56\u034e\12\0\1\u03f2\63\0\1\u03f3\65\0\2\u0269"+
    "\1\u029b\10\u0269\1\0\4\u0269\1\u03f4\51\u0269\20\0\1\u03f5"+
    "\103\0\1\u03f6\72\0\1\u03f7\71\0\1\u03f8\72\0\1\u03f9"+
    "\61\0\1\u03fa\65\0\1\u03fb\51\0\4\u024b\1\u027a\5\u024b"+
    "\1\u03fc\1\0\61\u024b\1\u03fd\1\u027a\6\u024b\1\0\62\u024b"+
    "\1\u027a\6\u024b\1\0\30\u024b\1\u03fe\25\u024b\17\0\1\u03ff"+
    "\77\0\1\u0400\44\0\13\u0401\1\0\56\u0401\22\0\1\u0402"+
    "\47\0\1\u03db\1\u0403\11\u03db\1\0\56\u03db\1\u038f\1\u03b5"+
    "\1\u0404\10\u038f\1\0\56\u038f\1\u03b6\1\u03dd\11\u03b6\1\0"+
    "\5\u03b6\1\u0405\50\u03b6\25\0\1\u0406\44\0\4\u03df\1\u0407"+
    "\6\u03df\1\0\62\u03df\1\u0407\6\u03df\1\0\14\u03df\1\u0408"+
    "\41\u03df\22\0\1\u0409\51\0\1\u040a\117\0\1\u040b\70\0"+
    "\1\u040c\64\0\1\u040d\55\0\1\u040e\111\0\1\u040f\70\0"+
    "\1\u0410\44\0\1\u0231\1\u0260\11\u0231\1\0\11\u0231\1\u0411"+
    "\44\u0231\1\u0232\1\u0261\11\u0232\1\0\15\u0232\1\u0412\40\u0232"+
    "\1\u031c\1\u0349\5\u031c\1\u0413\3\u031c\1\0\56\u031c\1\u031d"+
    "\1\u034a\5\u031d\1\u0414\3\u031d\1\0\56\u031d\1\u03c5\1\u03ee"+
    "\11\u03c5\1\0\5\u03c5\1\u0415\50\u03c5\6\0\1\u0416\63\0"+
    "\1\u03a1\1\u03c7\1\u0417\10\u03a1\1\0\56\u03a1\1\u034e\1\u0379"+
    "\11\u034e\1\0\11\u034e\1\u0418\44\u034e\2\0\1\u0419\111\0"+
    "\1\u041a\47\0\2\u0269\1\u029b\10\u0269\1\0\4\u0269\1\u041b"+
    "\51\u0269\4\0\1\u041c\112\0\1\u041d\71\0\1\u041e\51\0"+
    "\1\u041f\76\0\1\u0420\103\0\1\u0421\45\0\4\u024b\1\u027a"+
    "\6\u024b\1\0\11\u024b\1\u0422\50\u024b\1\u0423\6\u024b\1\0"+
    "\62\u024b\1\u027a\6\u024b\1\0\31\u024b\1\u0424\24\u024b\20\0"+
    "\1\u0425\76\0\1\u0426\44\0\1\u0401\1\u0427\11\u0401\1\0"+
    "\56\u0401\13\u0428\1\0\56\u0428\1\u03db\1\u0403\11\u03db\1\0"+
    "\5\u03db\1\u0429\50\u03db\1\u038f\1\u03b5\1\u038f\1\u042a\7\u038f"+
    "\1\0\56\u038f\1\u03b6\1\u03dd\11\u03b6\1\0\10\u03b6\1\u042b"+
    "\45\u03b6\26\0\1\u042c\43\0\4\u03df\1\u0407\5\u03df\1\u042d"+
    "\1\0\62\u03df\1\u0407\6\u03df\1\0\15\u03df\1\u042e\40\u03df"+
    "\25\0\1\u042f\75\0\1\u0430\42\0\1\u0431\111\0\1\u0432"+
    "\57\0\1\u0433\107\0\1\u0434\43\0\1\u0231\1\u0260\11\u0231"+
    "\1\0\6\u0231\1\u0435\47\u0231\1\u0232\1\u0261\11\u0232\1\0"+
    "\6\u0232\1\u0436\47\u0232\1\u031c\1\u0349\4\u031c\1\u0437\4\u031c"+
    "\1\0\56\u031c\1\u031d\1\u034a\4\u031d\1\u0438\4\u031d\1\0"+
    "\56\u031d\1\u03c5\1\u03ee\1\u0439\10\u03c5\1\0\56\u03c5\23\0"+
    "\1\u043a\46\0\1\u03a1\1\u03c7\1\u03a1\1\u043b\7\u03a1\1\0"+
    "\56\u03a1\1\u034e\1\u0379\5\u034e\1\u043c\3\u034e\1\0\56\u034e"+
    "\25\0\1\u043d\51\0\1\u043e\111\0\1\u043f\71\0\1\u0440"+
    "\65\0\1\u0441\67\0\1\u0442\64\0\1\u0443\57\0\4\u024b"+
    "\1\u027a\2\u024b\1\u0444\3\u024b\1\0\62\u024b\1\u027a\1\u0445"+
    "\4\u024b\1\u02aa\1\0\62\u024b\1\u027a\6\u024b\1\0\32\u024b"+
    "\1\u0446\23\u024b\33\0\1\u0447\72\0\1\u0448\35\0\1\u0401"+
    "\1\u0427\11\u0401\1\0\5\u0401\1\u0449\50\u0401\1\u0428\1\u044a"+
    "\11\u0428\1\0\56\u0428\1\u03db\1\u0403\1\u044b\10\u03db\1\0"+
    "\56\u03db\1\u038f\1\u03b5\2\u038f\1\u044c\6\u038f\1\0\56\u038f"+
    "\1\u03b6\1\u03dd\10\u03b6\1\u044d\1\0\56\u03b6\10\0\1\u044e"+
    "\61\0\4\u03df\1\u0407\6\u03df\1\0\17\u03df\1\u044f\42\u03df"+
    "\1\u0407\6\u03df\1\0\13\u03df\1\u0450\42\u03df\26\0\1\u0451"+
    "\72\0\1\u0452\74\0\1\u0453\37\0\13\u0454\1\0\56\u0454"+
    "\32\0\1\u0455\47\0\1\u0456\61\0\1\u031c\1\u0349\11\u031c"+
    "\1\0\15\u031c\1\u0457\40\u031c\1\u031d\1\u034a\11\u031d\1\0"+
    "\15\u031d\1\u0458\40\u031d\1\u03c5\1\u03ee\1\u03c5\1\u0459\7\u03c5"+
    "\1\0\56\u03c5\4\0\1\u045a\65\0\1\u03a1\1\u03c7\2\u03a1"+
    "\1\u045b\6\u03a1\1\0\56\u03a1\1\u034e\1\u0379\4\u034e\1\u045c"+
    "\4\u034e\1\0\56\u034e\26\0\1\u045d\45\0\1\u045e\123\0"+
    "\1\u045f\71\0\1\u0460\56\0\1\u0461\103\0\1\u0462\63\0"+
    "\1\u0463\44\0\4\u024b\1\u027a\1\u024b\1\u0464\4\u024b\1\0"+
    "\62\u024b\1\u027a\6\u024b\1\0\27\u024b\1\u0465\32\u024b\1\u027a"+
    "\6\u024b\1\0\33\u024b\1\u0466\22\u024b\25\0\1\u0467\51\0"+
    "\1\u0468\64\0\1\u0401\1\u0427\1\u0469\10\u0401\1\0\56\u0401"+
    "\1\u0428\1\u044a\11\u0428\1\0\5\u0428\1\u046a\50\u0428\1\u03db"+
    "\1\u0403\1\u03db\1\u046b\7\u03db\1\0\56\u03db\1\u038f\1\u03b5"+
    "\3\u038f\1\u046c\5\u038f\1\0\56\u038f\1\u03b6\1\u03dd\11\u03b6"+
    "\1\0\11\u03b6\1\u046d\44\u03b6\32\0\1\u046e\37\0\4\u03df"+
    "\1\u0407\2\u03df\1\u046f\3\u03df\1\0\62\u03df\1\u0407\1\u0470"+
    "\5\u03df\1\0\56\u03df\10\0\1\u0471\66\0\1\u0472\67\0"+
    "\1\u0473\66\0\1\u0454\1\u0474\11\u0454\1\0\56\u0454\22\0"+
    "\1\u0475\101\0\1\u0476\37\0\1\u031c\1\u0349\2\u031c\1\u0477"+
    "\6\u031c\1\0\56\u031c\1\u031d\1\u034a\2\u031d\1\u0478\6\u031d"+
    "\1\0\56\u031d\1\u03c5\1\u03ee\2\u03c5\1\u0479\6\u03c5\1\0"+
    "\56\u03c5\12\0\1\u047a\57\0\1\u03a1\1\u03c7\3\u03a1\1\u047b"+
    "\5\u03a1\1\0\56\u03a1\1\u034e\1\u0379\11\u034e\1\0\15\u034e"+
    "\1\u047c\40\u034e\10\0\1\u047d\64\0\1\u047e\73\0\1\u047f"+
    "\71\0\1\u0480\120\0\1\u0481\62\0\1\u0482\53\0\1\u0483"+
    "\62\0\4\u024b\1\u027a\6\u024b\1\0\15\u024b\1\u0484\44\u024b"+
    "\1\u027a\6\u024b\1\0\30\u024b\1\u0485\31\u024b\1\u027a\6\u024b"+
    "\1\0\34\u024b\1\u0486\21\u024b\25\0\1\u0487\65\0\1\u0488"+
    "\50\0\1\u0401\1\u0427\1\u0401\1\u0489\7\u0401\1\0\56\u0401"+
    "\1\u0428\1\u044a\1\u048a\10\u0428\1\0\56\u0428\1\u03db\1\u0403"+
    "\2\u03db\1\u048b\6\u03db\1\0\56\u03db\1\u038f\1\u03b5\11\u038f"+
    "\1\0\20\u038f\1\u048c\35\u038f\1\u03b6\1\u03dd\5\u03b6\1\u048d"+
    "\3\u03b6\1\0\56\u03b6\13\u048e\1\0\7\u048e\1\u048f\46\u048e"+
    "\4\u03df\1\u0407\6\u03df\1\0\15\u03df\1\u0490\44\u03df\1\u0407"+
    "\6\u03df\1\0\13\u03df\1\u0491\42\u03df\32\0\1\u0492\66\0"+
    "\1\u0493\61\0\1\u0494\52\0\1\u0454\1\u0474\11\u0454\1\0"+
    "\5\u0454\1\u0495\50\u0454\22\0\1\u0496\47\0\1\u031c\1\u0349"+
    "\3\u031c\1\u0497\5\u031c\1\0\56\u031c\1\u031d\1\u034a\3\u031d"+
    "\1\u0498\5\u031d\1\0\56\u031d\1\u03c5\1\u03ee\3\u03c5\1\u0499"+
    "\5\u03c5\1\0\56\u03c5\33\0\1\u049a\36\0\1\u03a1\1\u03c7"+
    "\10\u03a1\1\u049b\1\0\56\u03a1\1\u034e\1\u0379\2\u034e\1\u049c"+
    "\6\u034e\1\0\56\u034e\32\0\1\u03f3\66\0\1\u049d\63\0"+
    "\1\u049e\71\0\1\u049f\61\0\1\u04a0\105\0\1\u04a1\52\0"+
    "\1\u04a2\63\0\4\u024b\1\u04a3\6\u024b\1\0\62\u024b\1\u027a"+
    "\6\u024b\1\0\31\u024b\1\u04a4\30\u024b\1\u027a\6\u024b\1\0"+
    "\35\u024b\1\u04a5\20\u024b\34\0\1\u04a6\56\0\1\u04a7\50\0"+
    "\1\u0401\1\u0427\2\u0401\1\u04a8\6\u0401\1\0\56\u0401\1\u0428"+
    "\1\u044a\1\u0428\1\u04a9\7\u0428\1\0\56\u0428\1\u03db\1\u0403"+
    "\3\u03db\1\u04aa\5\u03db\1\0\56\u03db\1\u038f\1\u03b5\7\u038f"+
    "\1\u04ab\1\u038f\1\0\56\u038f\1\u03b6\1\u03dd\4\u03b6\1\u04ac"+
    "\4\u03b6\1\0\56\u03b6\4\u048e\1\u04ad\6\u048e\1\0\62\u048e"+
    "\1\u04ad\6\u048e\1\0\14\u048e\1\u04ae\41\u048e\4\u03df\1\u0407"+
    "\2\u03df\1\u04af\3\u03df\1\0\60\u03df\1\u04b0\1\u03df\1\u0407"+
    "\6\u03df\1\0\56\u03df\22\0\1\u04b1\51\0\1\u04b2\107\0"+
    "\1\u04b3\51\0\1\u0454\1\u0474\1\u04b4\10\u0454\1\0\56\u0454"+
    "\1\u031c\1\u0349\5\u031c\1\u04b5\3\u031c\1\0\56\u031c\1\u031d"+
    "\1\u034a\11\u031d\1\0\15\u031d\1\u04b6\40\u031d\1\u03c5\1\u03ee"+
    "\10\u03c5\1\u04b7\1\0\56\u03c5\7\0\1\u04b8\62\0\1\u03a1"+
    "\1\u03c7\11\u03a1\1\0\12\u03a1\1\u04b9\43\u03a1\1\u034e\1\u0379"+
    "\3\u034e\1\u04ba\5\u034e\1\0\56\u034e\4\0\1\u04bb\106\0"+
    "\1\u04bc\71\0\1\u04bd\56\0\1\u04be\117\0\1\u04bf\66\0"+
    "\1\u04c0\40\0\4\u024b\1\u027a\1\u04c1\4\u024b\1\u02aa\1\0"+
    "\62\u024b\1\u027a\6\u024b\1\0\32\u024b\1\u04c2\27\u024b\1\u027a"+
    "\6\u024b\1\0\36\u024b\1\u04c3\17\u024b\5\0\1\u04c4\120\0"+
    "\1\u04c5\35\0\1\u0401\1\u0427\3\u0401\1\u04c6\5\u0401\1\0"+
    "\56\u0401\1\u0428\1\u044a\2\u0428\1\u04c7\6\u0428\1\0\56\u0428"+
    "\1\u03db\1\u0403\10\u03db\1\u04c8\1\0\56\u03db\1\u038f\1\u03b5"+
    "\11\u038f\1\0\23\u038f\1\u04c9\32\u038f\1\u03b6\1\u03dd\11\u03b6"+
    "\1\0\15\u03b6\1\u04ca\40\u03b6\4\u048e\1\u04ad\5\u048e\1\u04cb"+
    "\1\0\62\u048e\1\u04ad\6\u048e\1\0\15\u048e\1\u04cc\40\u048e"+
    "\4\u03df\1\u0407\6\u03df\1\0\3\u03df\1\u04cd\56\u03df\1\u0407"+
    "\6\u03df\1\0\16\u03df\1\u04ce\37\u03df\32\0\1\u04cf\37\0"+
    "\1\u0454\1\u0474\1\u0454\1\u04d0\7\u0454\1\0\56\u0454\1\u031c"+
    "\1\u0349\11\u031c\1\0\14\u031c\1\u04d1\41\u031c\1\u031d\1\u034a"+
    "\5\u031d\1\u04d2\3\u031d\1\0\56\u031d\1\u03c5\1\u03ee\11\u03c5"+
    "\1\0\12\u03c5\1\u04d3\43\u03c5\31\0\1\u04d4\40\0\1\u03a1"+
    "\1\u03c7\11\u03a1\1\0\11\u03a1\1\u04d5\44\u03a1\1\u034e\1\u0379"+
    "\2\u034e\1\u04d6\6\u034e\1\0\56\u034e\17\0\1\u04d7\106\0"+
    "\1\u04d8\71\0\1\u04d9\64\0\1\u04da\47\0\1\u02d3\70\0"+
    "\1\u04db\65\0\4\u024b\1\u027a\6\u024b\1\0\27\u024b\1\u03d6"+
    "\32\u024b\1\u027a\6\u024b\1\0\33\u024b\1\u04dc\26\u024b\1\u027a"+
    "\6\u024b\1\0\4\u024b\1\u04dd\51\u024b\21\0\1\u04de\61\0"+
    "\1\u04df\60\0\1\u0401\1\u0427\10\u0401\1\u04e0\1\0\56\u0401"+
    "\1\u0428\1\u044a\3\u0428\1\u04e1\5\u0428\1\0\56\u0428\1\u03db"+
    "\1\u0403\4\u03db\1\u04e2\4\u03db\1\0\56\u03db\1\u038f\1\u03b5"+
    "\11\u038f\1\0\13\u038f\1\u04e3\42\u038f\1\u03b6\1\u03dd\2\u03b6"+
    "\1\u04e4\6\u03b6\1\0\56\u03b6\4\u048e\1\u04ad\6\u048e\1\0"+
    "\17\u048e\1\u04e5\42\u048e\1\u04ad\6\u048e\1\0\13\u048e\1\u04e6"+
    "\42\u048e\4\u03df\1\u0407\6\u03df\1\0\4\u03df\1\u04e7\54\u03df"+
    "\1\u04e8\1\u0407\6\u03df\1\0\56\u03df\3\0\1\u04e9\66\0"+
    "\1\u0454\1\u0474\2\u0454\1\u04ea\6\u0454\1\0\56\u0454\1\u031c"+
    "\1\u0349\11\u031c\1\0\11\u031c\1\u04eb\44\u031c\1\u031d\1\u034a"+
    "\11\u031d\1\0\10\u031d\1\u04ec\45\u031d\1\u03c5\1\u03ee\11\u03c5"+
    "\1\0\11\u03c5\1\u04ed\44\u03c5\7\0\1\u04ee\62\0\1\u03a1"+
    "\1\u03c7\1\u04ef\10\u03a1\1\0\56\u03a1\1\u034e\1\u0379\11\u034e"+
    "\1\0\20\u034e\1\u04f0\35\u034e\20\0\1\u04f1\62\0\1\u04f2"+
    "\71\0\1\u04f3\115\0\1\u04f4\41\0\1\u04f5\64\0\4\u024b"+
    "\1\u027a\6\u024b\1\0\34\u024b\1\u04f6\25\u024b\1\u027a\6\u024b"+
    "\1\0\6\u024b\1\u04f7\47\u024b\21\0\1\u04f8\56\0\1\u04f9"+
    "\63\0\1\u0401\1\u0427\4\u0401\1\u04fa\4\u0401\1\0\56\u0401"+
    "\1\u0428\1\u044a\10\u0428\1\u04fb\1\0\56\u0428\1\u03db\1\u0403"+
    "\5\u03db\1\u04fc\3\u03db\1\0\56\u03db\1\u038f\1\u03b5\11\u038f"+
    "\1\0\12\u038f\1\u04fd\43\u038f\1\u03b6\1\u03dd\3\u03b6\1\u04fe"+
    "\5\u03b6\1\0\56\u03b6\4\u048e\1\u04ad\2\u048e\1\u04ff\3\u048e"+
    "\1\0\62\u048e\1\u04ad\1\u0500\5\u048e\1\0\56\u048e\2\u03df"+
    "\1\u0501\1\u03df\1\u0407\6\u03df\1\0\62\u03df\1\u0407\6\u03df"+
    "\1\0\3\u03df\1\u0502\52\u03df\17\0\1\u0503\52\0\1\u0454"+
    "\1\u0474\3\u0454\1\u0504\5\u0454\1\0\56\u0454\1\u031c\1\u0349"+
    "\5\u031c\1\u0505\3\u031c\1\0\56\u031c\1\u031d\1\u034a\11\u031d"+
    "\1\0\12\u031d\1\u0506\43\u031d\1\u03c5\1\u03ee\1\u0507\10\u03c5"+
    "\1\0\56\u03c5\17\0\1\u0508\52\0\1\u03a1\1\u03c7\11\u03a1"+
    "\1\0\11\u03a1\1\u0509\44\u03a1\1\u034e\1\u0379\1\u050a\10\u034e"+
    "\1\0\56\u034e\33\0\1\u050b\44\0\1\u050c\71\0\1\u050d"+
    "\73\0\1\u050e\123\0\1\u050f\27\0\4\u024b\1\u027a\6\u024b"+
    "\1\0\35\u024b\1\u0510\20\u024b\13\u0511\1\0\56\u0511\34\0"+
    "\1\u0512\64\0\1\u0513\42\0\1\u0401\1\u0427\5\u0401\1\u0514"+
    "\3\u0401\1\0\56\u0401\1\u0428\1\u044a\4\u0428\1\u0515\4\u0428"+
    "\1\0\56\u0428\1\u03db\1\u0403\1\u0516\10\u03db\1\0\56\u03db"+
    "\1\u038f\1\u03b5\2\u038f\1\u0517\6\u038f\1\0\56\u038f\1\u03b6"+
    "\1\u03dd\11\u03b6\1\0\10\u03b6\1\u0518\45\u03b6\4\u048e\1\u04ad"+
    "\6\u048e\1\0\15\u048e\1\u0519\44\u048e\1\u04ad\6\u048e\1\0"+
    "\13\u048e\1\u051a\42\u048e\3\u03df\1\u051b\1\u0407\6\u03df\1\0"+
    "\62\u03df\1\u0407\6\u03df\1\0\4\u03df\1\u051c\51\u03df\20\0"+
    "\1\u051d\51\0\1\u0454\1\u0474\1\u051e\10\u0454\1\0\56\u0454"+
    "\1\u031c\1\u0349\11\u031c\1\0\16\u031c\1\u051f\37\u031c\1\u031d"+
    "\1\u034a\7\u031d\1\u0520\1\u031d\1\0\56\u031d\1\u03c5\1\u03ee"+
    "\11\u03c5\1\0\11\u03c5\1\u0521\44\u03c5\20\0\1\u0522\51\0"+
    "\1\u03a1\1\u03c7\11\u03a1\1\0\12\u03a1\1\u0523\43\u03a1\1\u034e"+
    "\1\u0379\11\u034e\1\0\11\u034e\1\u0524\44\u034e\25\0\1\u0525"+
    "\73\0\1\u0526\71\0\1\u0527\50\0\1\u0528\100\0\1\u0529"+
    "\54\0\4\u024b\1\u027a\6\u024b\1\0\22\u024b\1\u052a\33\u024b"+
    "\1\u0511\1\u052b\11\u0511\1\0\56\u0511\11\0\1\u052c\115\0"+
    "\1\u052d\34\0\1\u0401\1\u0427\1\u052e\10\u0401\1\0\56\u0401"+
    "\1\u0428\1\u044a\5\u0428\1\u052f\3\u0428\1\0\56\u0428\1\u03db"+
    "\1\u0403\11\u03db\1\0\11\u03db\1\u0530\44\u03db\1\u038f\1\u03b5"+
    "\11\u038f\1\0\17\u038f\1\u0531\36\u038f\1\u03b6\1\u03dd\1\u0532"+
    "\10\u03b6\1\0\56\u03b6\4\u048e\1\u04ad\2\u048e\1\u0533\3\u048e"+
    "\1\0\60\u048e\1\u0534\1\u048e\1\u04ad\6\u048e\1\0\56\u048e"+
    "\4\u03df\1\u0535\6\u03df\1\0\56\u03df\1\u0454\1\u0474\11\u0454"+
    "\1\0\37\u0454\1\u0536\16\u0454\1\u031c\1\u0349\11\u031c\1\0"+
    "\11\u031c\1\u0537\44\u031c\1\u031d\1\u034a\11\u031d\1\0\15\u031d"+
    "\1\u0538\40\u031d\1\u03c5\1\u03ee\11\u03c5\1\0\12\u03c5\1\u0539"+
    "\43\u03c5\2\0\1\u053a\67\0\1\u03a1\1\u03c7\6\u03a1\1\u053b"+
    "\2\u03a1\1\0\56\u03a1\1\u034e\1\u0379\11\u034e\1\0\12\u034e"+
    "\1\u053c\43\u034e\25\0\1\u053d\101\0\1\u053e\71\0\1\u053f"+
    "\37\0\1\u0540\131\0\1\u0541\26\0\4\u024b\1\u027a\6\u024b"+
    "\1\0\4\u024b\1\u0542\51\u024b\1\u0511\1\u052b\11\u0511\1\0"+
    "\5\u0511\1\u0543\50\u0511\6\0\1\u0544\73\0\1\u0545\61\0"+
    "\1\u0401\1\u0427\11\u0401\1\0\11\u0401\1\u0546\44\u0401\1\u0428"+
    "\1\u044a\1\u0547\10\u0428\1\0\56\u0428\1\u03db\1\u0403\6\u03db"+
    "\1\u0548\2\u03db\1\0\56\u03db\1\u038f\1\u03b5\5\u038f\1\u0549"+
    "\3\u038f\1\0\56\u038f\1\u03b6\1\u03dd\11\u03b6\1\0\11\u03b6"+
    "\1\u054a\44\u03b6\4\u048e\1\u04ad\6\u048e\1\0\3\u048e\1\u054b"+
    "\56\u048e\1\u04ad\6\u048e\1\0\16\u048e\1\u054c\37\u048e\4\u03df"+
    "\1\u0407\1\u054d\4\u03df\1\u042d\1\0\56\u03df\1\u0454\1\u0474"+
    "\1\u054e\10\u0454\1\0\56\u0454\1\u031c\1\u0349\11\u031c\1\0"+
    "\6\u031c\1\u054f\47\u031c\1\u031d\1\u034a\11\u031d\1\0\6\u031d"+
    "\1\u0550\47\u031d\1\u03c5\1\u03ee\6\u03c5\1\u0551\2\u03c5\1\0"+
    "\56\u03c5\3\0\1\u0552\66\0\1\u03a1\1\u03c7\11\u03a1\1\0"+
    "\16\u03a1\1\u0553\37\u03a1\1\u034e\1\u0379\1\u0554\10\u034e\1\0"+
    "\56\u034e\34\0\1\u0555\45\0\1\u0556\71\0\1\u0557\102\0"+
    "\1\u0558\70\0\1\u0559\51\0\4\u024b\1\u027a\6\u024b\1\0"+
    "\6\u024b\1\u055a\47\u024b\1\u0511\1\u052b\11\u0511\1\0\10\u0511"+
    "\1\u055b\45\u0511\27\0\1\u055c\50\0\1\u055d\63\0\1\u0401"+
    "\1\u0427\6\u0401\1\u055e\2\u0401\1\0\56\u0401\1\u0428\1\u044a"+
    "\11\u0428\1\0\11\u0428\1\u055f\44\u0428\1\u03db\1\u0403\4\u03db"+
    "\1\u0560\4\u03db\1\0\56\u03db\1\u038f\1\u03b5\4\u038f\1\u0561"+
    "\4\u038f\1\0\56\u038f\1\u03b6\1\u03dd\5\u03b6\1\u0562\3\u03b6"+
    "\1\0\56\u03b6\4\u048e\1\u04ad\6\u048e\1\0\4\u048e\1\u0563"+
    "\54\u048e\1\u0564\1\u04ad\6\u048e\1\0\56\u048e\1\u0454\1\u0474"+
    "\11\u0454\1\0\12\u0454\1\u0565\43\u0454\1\u03c5\1\u03ee\11\u03c5"+
    "\1\0\16\u03c5\1\u0566\37\u03c5\4\0\1\u0567\65\0\1\u03a1"+
    "\1\u03c7\11\u03a1\1\0\52\u03a1\1\u0568\3\u03a1\1\u034e\1\u0379"+
    "\11\u034e\1\0\13\u034e\1\u0569\42\u034e\5\0\1\u056a\72\0"+
    "\1\u056b\71\0\1\u056c\107\0\1\u056d\67\0\1\u056e\47\0"+
    "\13\u056f\1\0\56\u056f\1\u0511\1\u052b\10\u0511\1\u0570\1\0"+
    "\56\u0511\35\0\1\u0571\37\0\1\u0572\66\0\1\u0401\1\u0427"+
    "\4\u0401\1\u0573\4\u0401\1\0\56\u0401\1\u0428\1\u044a\6\u0428"+
    "\1\u0574\2\u0428\1\0\56\u0428\1\u03db\1\u0403\11\u03db\1\0"+
    "\55\u03db\1\u0575\1\u038f\1\u03b5\11\u038f\1\0\2\u038f\1\u0576"+
    "\53\u038f\1\u03b6\1\u03dd\11\u03b6\1\0\27\u03b6\1\u0577\26\u03b6"+
    "\2\u048e\1\u0578\1\u048e\1\u04ad\6\u048e\1\0\10\u048e\1\u0579"+
    "\51\u048e\1\u04ad\6\u048e\1\0\3\u048e\1\u057a\52\u048e\1\u0454"+
    "\1\u0474\11\u0454\1\0\13\u0454\1\u057b\42\u0454\1\u03c5\1\u03ee"+
    "\11\u03c5\1\0\2\u03c5\1\u057c\53\u03c5\5\0\1\u057d\64\0"+
    "\1\u03a1\1\u03c7\11\u03a1\1\0\12\u03a1\1\u057e\43\u03a1\1\u034e"+
    "\1\u0379\11\u034e\1\0\6\u034e\1\u057f\47\u034e\21\0\1\u0580"+
    "\53\0\1\u0581\71\0\1\u0582\100\0\1\u0583\57\0\1\u056f"+
    "\1\u0584\11\u056f\1\0\56\u056f\1\u0511\1\u052b\3\u0511\1\u0585"+
    "\5\u0511\1\0\56\u0511\10\0\1\u0586\102\0\1\u0587\50\0"+
    "\1\u0401\1\u0427\11\u0401\1\0\50\u0401\1\u0588\5\u0401\1\u0428"+
    "\1\u044a\4\u0428\1\u0589\4\u0428\1\0\56\u0428\1\u03db\1\u0403"+
    "\5\u03db\1\u058a\3\u03db\1\0\56\u03db\1\u038f\1\u03b5\1\u058b"+
    "\10\u038f\1\0\56\u038f\1\u03b6\1\u03dd\2\u03b6\1\u058c\6\u03b6"+
    "\1\0\56\u03b6\3\u048e\1\u058d\1\u04ad\6\u048e\1\0\62\u048e"+
    "\1\u04ad\5\u048e\1\u058e\1\0\62\u048e\1\u04ad\6\u048e\1\0"+
    "\4\u048e\1\u058f\51\u048e\1\u0454\1\u0474\1\u0590\10\u0454\1\0"+
    "\56\u0454\1\u03c5\1\u03ee\7\u03c5\1\u0591\1\u03c5\1\0\56\u03c5"+
    "\43\0\1\u0592\26\0\1\u03a1\1\u03c7\11\u03a1\1\0\11\u03a1"+
    "\1\u0593\44\u03a1\21\0\1\u0594\71\0\1\u0595\71\0\1\u0596"+
    "\71\0\1\u0597\50\0\1\u056f\1\u0584\11\u056f\1\0\5\u056f"+
    "\1\u0598\50\u056f\1\u0511\1\u052b\11\u0511\1\0\13\u0511\1\u0599"+
    "\42\u0511\6\0\1\u059a\107\0\1\u059b\45\0\1\u0401\1\u0427"+
    "\6\u0401\1\u059c\2\u0401\1\0\56\u0401\1\u0428\1\u044a\11\u0428"+
    "\1\0\50\u0428\1\u059d\5\u0428\1\u03db\1\u0403\4\u03db\1\u059e"+
    "\4\u03db\1\0\56\u03db\1\u038f\1\u03b5\11\u038f\1\0\15\u038f"+
    "\1\u059f\40\u038f\1\u03b6\1\u03dd\2\u03b6\1\u05a0\6\u03b6\1\0"+
    "\56\u03b6\4\u048e\1\u05a1\6\u048e\1\0\62\u048e\1\u04ad\6\u048e"+
    "\1\0\11\u048e\1\u05a2\44\u048e\1\u0454\1\u0474\11\u0454\1\0"+
    "\23\u0454\1\u05a3\32\u0454\1\u03c5\1\u03ee\11\u03c5\1\0\15\u03c5"+
    "\1\u05a4\40\u03c5\44\0\1\u05a5\25\0\1\u03a1\1\u03c7\11\u03a1"+
    "\1\0\13\u03a1\1\u05a6\42\u03a1\55\0\1\u05a7\40\0\1\u05a8"+
    "\71\0\1\u05a9\54\0\1\u05aa\62\0\1\u056f\1\u0584\11\u056f"+
    "\1\0\10\u056f\1\u05ab\45\u056f\1\u0511\1\u052b\1\u05ac\10\u0511"+
    "\1\0\56\u0511\3\0\1\u05ad\100\0\1\u05ae\57\0\1\u0401"+
    "\1\u0427\4\u0401\1\u05af\4\u0401\1\0\56\u0401\1\u0428\1\u044a"+
    "\6\u0428\1\u05b0\2\u0428\1\0\56\u0428\1\u03db\1\u0403\2\u03db"+
    "\1\u05b1\6\u03db\1\0\56\u03db\1\u038f\1\u03b5\5\u038f\1\u05b2"+
    "\3\u038f\1\0\56\u038f\1\u03b6\1\u03dd\7\u03b6\1\u05b3\1\u03b6"+
    "\1\0\56\u03b6\4\u048e\1\u04ad\1\u05b4\4\u048e\1\u04cb\1\0"+
    "\62\u048e\1\u04ad\2\u048e\1\u05b5\3\u048e\1\0\56\u048e\1\u0454"+
    "\1\u0474\11\u0454\1\0\12\u0454\1\u05b6\43\u0454\1\u03c5\1\u03ee"+
    "\11\u03c5\1\0\23\u03c5\1\u05b7\32\u03c5\44\0\1\u05b8\25\0"+
    "\1\u03a1\1\u03c7\5\u03a1\1\u05b9\3\u03a1\1\0\56\u03a1\55\0"+
    "\1\u05ba\26\0\1\u05bb\71\0\1\u05bc\106\0\1\u05bd\42\0"+
    "\1\u056f\1\u0584\10\u056f\1\u05be\1\0\56\u056f\1\u0511\1\u052b"+
    "\11\u0511\1\0\16\u0511\1\u05bf\37\u0511\21\0\1\u05c0\71\0"+
    "\1\u05c1\50\0\1\u0401\1\u0427\11\u0401\1\0\20\u0401\1\u05c2"+
    "\35\u0401\1\u0428\1\u044a\11\u0428\1\0\16\u0428\1\u05c3\37\u0428"+
    "\1\u03db\1\u0403\6\u03db\1\u05c4\2\u03db\1\0\56\u03db\1\u038f"+
    "\1\u03b5\11\u038f\1\0\6\u038f\1\u05c5\47\u038f\1\u03b6\1\u03dd"+
    "\5\u03b6\1\u05c6\3\u03b6\1\0\56\u03b6\4\u048e\1\u04ad\1\u048e"+
    "\1\u05c7\4\u048e\1\0\56\u048e\1\u0454\1\u0474\11\u0454\1\0"+
    "\13\u0454\1\u05c8\42\u0454\1\u03c5\1\u03ee\5\u03c5\1\u05c9\3\u03c5"+
    "\1\0\56\u03c5\16\0\1\u05ca\53\0\1\u03a1\1\u03c7\11\u03a1"+
    "\1\0\6\u03a1\1\u05cb\47\u03a1\55\0\1\u05cc\35\0\1\u05cd"+
    "\71\0\1\u05ce\57\0\1\u05cf\62\0\1\u056f\1\u0584\3\u056f"+
    "\1\u05d0\5\u056f\1\0\56\u056f\1\u0511\1\u052b\1\u0511\1\u05d1"+
    "\7\u0511\1\0\56\u0511\24\0\1\u05d2\54\0\1\u05d3\62\0"+
    "\1\u0401\1\u0427\6\u0401\1\u05d4\2\u0401\1\0\56\u0401\1\u0428"+
    "\1\u044a\11\u0428\1\0\25\u0428\1\u05d5\30\u0428\1\u03db\1\u0403"+
    "\11\u03db\1\0\16\u03db\1\u05d6\37\u03db\1\u03b6\1\u03dd\11\u03b6"+
    "\1\0\10\u03b6\1\u05d7\45\u03b6\4\u048e\1\u04ad\6\u048e\1\0"+
    "\15\u048e\1\u058d\40\u048e\1\u0454\1\u0474\11\u0454\1\0\12\u0454"+
    "\1\u05d8\43\u0454\1\u03c5\1\u03ee\4\u03c5\1\u05d9\4\u03c5\1\0"+
    "\56\u03c5\20\0\1\u05da\106\0\1\u05db\43\0\1\u05dc\71\0"+
    "\1\u05dd\113\0\1\u05de\40\0\1\u056f\1\u0584\11\u056f\1\0"+
    "\13\u056f\1\u05df\42\u056f\1\u0511\1\u052b\7\u0511\1\u05e0\1\u0511"+
    "\1\0\56\u0511\12\0\1\u05e1\106\0\1\u05e2\42\0\1\u0401"+
    "\1\u0427\4\u0401\1\u05e3\4\u0401\1\0\56\u0401\1\u0428\1\u044a"+
    "\5\u0428\1\u05e4\3\u0428\1\0\56\u0428\1\u03db\1\u0403\1\u05e5"+
    "\10\u03db\1\0\56\u03db\1\u03b6\1\u03dd\11\u03b6\1\0\6\u03b6"+
    "\1\u05e6\47\u03b6\1\u0454\1\u0474\11\u0454\1\0\11\u0454\1\u05e7"+
    "\44\u0454\1\u03c5\1\u03ee\11\u03c5\1\0\6\u03c5\1\u05e8\47\u03c5"+
    "\22\0\1\u05e9\101\0\1\u05ea\66\0\1\u05eb\71\0\1\u05ec"+
    "\51\0\1\u05ed\62\0\1\u056f\1\u0584\1\u05ee\10\u056f\1\0"+
    "\56\u056f\1\u0511\1\u052b\1\u05ef\10\u0511\1\0\56\u0511\21\0"+
    "\1\u05f0\57\0\1\u05f1\62\0\1\u0401\1\u0427\1\u05f2\10\u0401"+
    "\1\0\56\u0401\1\u0428\1\u044a\4\u0428\1\u05f3\4\u0428\1\0"+
    "\56\u0428\1\u03db\1\u0403\11\u03db\1\0\13\u03db\1\u05f4\42\u03db"+
    "\1\u0454\1\u0474\11\u0454\1\0\40\u0454\1\u05f5\15\u0454\13\u05f6"+
    "\1\0\56\u05f6\2\0\1\u05f7\76\0\1\u05f8\71\0\1\u05f9"+
    "\114\0\1\u05fa\37\0\1\u056f\1\u0584\11\u056f\1\0\16\u056f"+
    "\1\u05fb\37\u056f\1\u0511\1\u052b\1\u0511\1\u05fc\7\u0511\1\0"+
    "\56\u0511\7\0\1\u05fd\113\0\1\u05fe\40\0\1\u0401\1\u0427"+
    "\11\u0401\1\0\11\u0401\1\u05ff\44\u0401\1\u0428\1\u044a\5\u0428"+
    "\1\u0600\3\u0428\1\0\56\u0428\1\u03db\1\u0403\11\u03db\1\0"+
    "\6\u03db\1\u0601\47\u03db\1\u0454\1\u0474\11\u0454\1\0\2\u0454"+
    "\1\u0602\53\u0454\1\u05f6\1\u0603\11\u05f6\1\0\56\u05f6\2\0"+
    "\1\u0604\120\0\1\u0605\71\0\1\u0606\65\0\1\u0607\44\0"+
    "\1\u056f\1\u0584\1\u056f\1\u0608\7\u056f\1\0\56\u056f\1\u0511"+
    "\1\u052b\5\u0511\1\u0609\3\u0511\1\0\56\u0511\27\0\1\u060a"+
    "\51\0\1\u060b\62\0\1\u0401\1\u0427\5\u0401\1\u060c\3\u0401"+
    "\1\0\56\u0401\1\u0428\1\u044a\11\u0428\1\0\16\u0428\1\u060d"+
    "\37\u0428\1\u0454\1\u0474\7\u0454\1\u060e\1\u0454\1\0\56\u0454"+
    "\1\u05f6\1\u0603\11\u05f6\1\0\5\u05f6\1\u060f\50\u05f6\35\0"+
    "\1\u0610\43\0\1\u0611\71\0\1\u0612\66\0\1\u0613\65\0"+
    "\1\u056f\1\u0584\7\u056f\1\u0614\1\u056f\1\0\56\u056f\1\u0511"+
    "\1\u052b\11\u0511\1\0\6\u0511\1\u0615\47\u0511\7\0\1\u0616"+
    "\114\0\1\u0617\37\0\1\u0401\1\u0427\11\u0401\1\0\6\u0401"+
    "\1\u0618\47\u0401\1\u0428\1\u044a\10\u0428\1\u0619\1\0\56\u0428"+
    "\1\u0454\1\u0474\11\u0454\1\0\15\u0454\1\u061a\40\u0454\1\u05f6"+
    "\1\u0603\1\u061b\10\u05f6\1\0\56\u05f6\3\0\1\u061c\120\0"+
    "\1\u061d\71\0\1\u061e\60\0\1\u061f\50\0\1\u056f\1\u0584"+
    "\1\u0620\10\u056f\1\0\56\u056f\31\0\1\u0621\65\0\1\u0622"+
    "\44\0\1\u0428\1\u044a\5\u0428\1\u0623\3\u0428\1\0\56\u0428"+
    "\1\u0454\1\u0474\11\u0454\1\0\23\u0454\1\u0624\32\u0454\1\u05f6"+
    "\1\u0603\1\u05f6\1\u0625\7\u05f6\1\0\56\u05f6\10\0\1\u0626"+
    "\106\0\1\u0627\71\0\1\u0628\102\0\1\u0629\33\0\1\u056f"+
    "\1\u0584\1\u056f\1\u062a\7\u056f\1\0\56\u056f\7\0\1\u062b"+
    "\66\0\1\u062c\65\0\1\u0428\1\u044a\11\u0428\1\0\6\u0428"+
    "\1\u062d\47\u0428\1\u0454\1\u0474\5\u0454\1\u062e\3\u0454\1\0"+
    "\56\u0454\1\u05f6\1\u0603\2\u05f6\1\u062f\6\u05f6\1\0\56\u05f6"+
    "\53\0\1\u0630\22\0\1\u0631\71\0\1\u0632\122\0\1\u0633"+
    "\34\0\1\u056f\1\u0584\5\u056f\1\u0634\3\u056f\1\0\56\u056f"+
    "\32\0\1\u0635\60\0\1\u0636\50\0\1\u0454\1\u0474\4\u0454"+
    "\1\u0637\4\u0454\1\0\56\u0454\1\u05f6\1\u0603\3\u05f6\1\u0638"+
    "\5\u05f6\1\0\56\u05f6\35\0\1\u0639\55\0\1\u063a\71\0"+
    "\1\u063b\106\0\1\u063c\33\0\1\u056f\1\u0584\11\u056f\1\0"+
    "\6\u056f\1\u063d\47\u056f\25\0\1\u063e\102\0\1\u063f\33\0"+
    "\1\u0454\1\u0474\11\u0454\1\0\6\u0454\1\u0640\47\u0454\1\u05f6"+
    "\1\u0603\10\u05f6\1\u0641\1\0\56\u05f6\2\0\1\u0642\125\0"+
    "\1\u0643\71\0\1\u0644\54\0\1\u0645\54\0\1\u0646\122\0"+
    "\1\u0647\34\0\1\u05f6\1\u0603\11\u05f6\1\0\12\u05f6\1\u0648"+
    "\43\u05f6\11\0\1\u0649\115\0\1\u064a\71\0\1\u064b\54\0"+
    "\1\u064c\72\0\1\u064d\106\0\1\u064e\33\0\1\u05f6\1\u0603"+
    "\11\u05f6\1\0\11\u05f6\1\u064f\44\u05f6\21\0\1\u0650\106\0"+
    "\1\u0651\71\0\1\u0652\55\0\1\u017f\105\0\1\u0653\54\0"+
    "\1\u0654\50\0\1\u05f6\1\u0603\1\u0655\10\u05f6\1\0\56\u05f6"+
    "\6\0\1\u0656\104\0\1\u0657\71\0\1\u0658\105\0\1\u0659"+
    "\54\0\1\u065a\51\0\1\u05f6\1\u0603\11\u05f6\1\0\11\u05f6"+
    "\1\u065b\44\u05f6\7\0\1\u065c\102\0\1\u065d\71\0\1\u065e"+
    "\107\0\1\u065f\55\0\1\u01eb\47\0\1\u05f6\1\u0603\11\u05f6"+
    "\1\0\12\u05f6\1\u0660\43\u05f6\12\0\1\u0661\101\0\1\u0210"+
    "\71\0\1\u0212\70\0\1\u0662\50\0\1\u05f6\1\u0603\6\u05f6"+
    "\1\u0663\2\u05f6\1\0\56\u05f6\10\0\1\u0664\101\0\1\u0665"+
    "\51\0\1\u05f6\1\u0603\11\u05f6\1\0\16\u05f6\1\u0666\37\u05f6"+
    "\6\0\1\u0667\105\0\1\u027c\47\0\1\u05f6\1\u0603\11\u05f6"+
    "\1\0\27\u05f6\1\u0668\26\u05f6\24\0\1\u0669\45\0\1\u05f6"+
    "\1\u0603\11\u05f6\1\0\10\u05f6\1\u066a\45\u05f6\56\0\1\u066b"+
    "\13\0\1\u05f6\1\u0603\5\u05f6\1\u066c\3\u05f6\1\0\56\u05f6"+
    "\7\0\1\u066d\62\0\1\u05f6\1\u0603\11\u05f6\1\0\16\u05f6"+
    "\1\u066e\37\u05f6\7\0\1\u066f\62\0\1\u05f6\1\u0603\11\u05f6"+
    "\1\0\11\u05f6\1\u0670\44\u05f6\34\0\1\u0671\35\0\1\u05f6"+
    "\1\u0603\11\u05f6\1\0\12\u05f6\1\u0672\43\u05f6\26\0\1\u0673"+
    "\43\0\1\u05f6\1\u0603\11\u05f6\1\0\25\u05f6\1\u0674\30\u05f6"+
    "\32\0\1\u0675\37\0\1\u05f6\1\u0603\11\u05f6\1\0\12\u05f6"+
    "\1\u0676\43\u05f6\3\0\1\u0677\66\0\1\u05f6\1\u0603\5\u05f6"+
    "\1\u0678\3\u05f6\1\0\56\u05f6\21\0\1\u0679\50\0\1\u05f6"+
    "\1\u0603\4\u05f6\1\u067a\4\u05f6\1\0\56\u05f6\3\0\1\u067b"+
    "\66\0\1\u05f6\1\u0603\11\u05f6\1\0\6\u05f6\1\u067c\47\u05f6"+
    "\10\0\1\u067d\134\0\1\u067e\75\0\1\u067f\22\0\1\u0680"+
    "\113\0\1\u0681\66\0\1\u0682\70\0\1\u0683\75\0\1\u0684"+
    "\46\0\1\u0685\103\0\1\u0686\52\0\1\u0687\72\0\1\u0688"+
    "\115\0\1\u0689\46\0\1\u068a\106\0\1\u068b\106\0\1\u068c"+
    "\70\0\1\u068d\106\0\1\u068e\37\0\1\u02fb\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[93380];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\33\0\1\11\2\1\1\11\10\1\1\11\25\1\3\0"+
    "\1\11\3\0\1\11\14\0\1\1\1\0\1\11\7\0"+
    "\1\11\1\0\1\11\12\0\1\11\11\0\1\11\u010b\0"+
    "\1\11\75\0\1\11\55\0\1\11\1\0\1\11\42\0"+
    "\1\11\1\0\1\11\4\0\1\1\2\0\1\1\50\0"+
    "\1\11\21\0\1\11\24\0\1\1\3\0\1\11\15\0"+
    "\1\11\43\0\1\11\45\0\1\11\6\0\1\11\5\0"+
    "\1\11\42\0\1\11\57\0\1\11\30\0\1\11\54\0"+
    "\1\11\3\0\1\11\22\0\1\1\1\0\2\1\113\0"+
    "\1\1\20\0\1\11\20\0\1\1\1\11\23\0\1\11"+
    "\3\0\1\11\14\0\1\11\1\1\31\0\2\1\76\0"+
    "\1\11\40\0\1\11\32\0\1\11\1\0\1\11\150\0"+
    "\1\1\1\11\57\0\1\1\1\0\2\1\35\0\1\11"+
    "\20\0\1\1\17\0\1\1\44\0\1\1\20\0\1\1"+
    "\5\0\1\1\32\0\1\1\1\0\1\1\30\0\1\1"+
    "\23\0\1\1\2\0\1\1\24\0\1\1\17\0\1\1"+
    "\2\0\1\1\73\0\1\1\22\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1678];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	// AGRIF
	private List<Agrif> agrifs ;
	private Agrif agrif ;
	private Citation citation ;
	private ControlledBlock cblock ;
	private Creator creator ;
	private Expression expression ;
	private Item item ;
	private LanguageBlock lblock ;
	private Manifestation manifestation ;
	private Relation relation ;
	private Rights rights ;
	
	// TMP
	private StringBuilder tmp ;
	private String language ;
	private String thesaurus ;
	private String classification ;
	private Item tmpItem ;
	private Manifestation tmpManifestation ;
	
	// EXERNAL
	private String potentialLanguages ;
	private String mtdLanguage ;
	private String providerId ;
	private String manifestationType = "landingPage" ;
	
	public void setPotentialLanguages( String potentialLanguages )
	{
		this.potentialLanguages = potentialLanguages ;
	}
	
	public void setMtdLanguage( String mtdLanguage )
	{
		this.mtdLanguage = mtdLanguage ;
	}
	
	public void setManifestationType( String manifestationType )
	{
		this.manifestationType = manifestationType ;
	}
	
	public void setProviderId( String providerId )
	{
		this.providerId = providerId ;
	}
	
	public List<Agrif> getAgrifs()
	{
		return agrifs ;
	}
	
	private void init()
	{
		agrif = new Agrif() ;
		agrif.setSet( providerId ) ;
		citation  = new Citation() ;
		cblock = new ControlledBlock() ;
		expression = new Expression() ;
		item = new Item() ;
		lblock = new LanguageBlock() ;
		manifestation = new Manifestation() ;
		relation = new Relation() ;
		rights = new Rights() ;
	}
	
	private String utcNow() 
	{
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat( "yyyy-MM-dd" );
		return sdf.format(cal.getTime());
	}
	
	private String extract( String element )
	{	
		return element.substring(element.indexOf(">") + 1 , element.indexOf("</") );
	}
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AGRIS2AGRIF(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AGRIS2AGRIF(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 61: 
          { creator = new Creator( "organization", extract( yytext() ) ) ;
		agrif.setCreator( creator ) ;
          }
        case 66: break;
        case 15: 
          { yybegin( FORMAT ) ;
          }
        case 67: break;
        case 40: 
          { yybegin( DESCRIPTION ) ;
		String text = tmp.toString() ;
		lblock.setNotes( ParamManager.getInstance().getLanguageFor(text), text ) ;
          }
        case 68: break;
        case 42: 
          { agrifs = new ArrayList<Agrif>() ;
		init() ;
		agrif.setOrigin( providerId, "" ) ;
		yybegin( AGRIF ) ;
          }
        case 69: break;
        case 16: 
          { lblock.setTitle( language, tmp.toString() ) ;
		yybegin( AGRIF ) ;
          }
        case 70: break;
        case 4: 
          { tmp.append( " " ) ;
          }
        case 71: break;
        case 41: 
          { lblock.setKeyword( language, tmp.toString() ) ;
		yybegin( SUBJECT ) ;
          }
        case 72: break;
        case 34: 
          { cblock.setType( "dc:type", extract( yytext() ) ) ;
          }
        case 73: break;
        case 60: 
          { String tmpLanguage = extract( yytext() ) ;
		try
		{
			tmpLanguage = Toolbox.getInstance().toISO6391( tmpLanguage ) ;
		}
		catch( ToolboxException te ){}
		expression.setLanguage( tmpLanguage ) ;
          }
        case 74: break;
        case 54: 
          { tmp = new StringBuilder() ;
		yybegin( CLASSIFICATION ) ;
          }
        case 75: break;
        case 7: 
          { thesaurus = tmp.toString() ;
		tmp = new StringBuilder() ;
		yybegin( DESCRIPTOR ) ;
          }
        case 76: break;
        case 45: 
          { tmp = new StringBuilder() ;
		yybegin( AVAILOCATION ) ;
          }
        case 77: break;
        case 48: 
          { tmp = new StringBuilder() ;
		yybegin( LABSTRACT ) ;
          }
        case 78: break;
        case 35: 
          { String text = extract( yytext() ) ;
		lblock.setTitle( ParamManager.getInstance().getLanguageFor(text), text ) ;
          }
        case 79: break;
        case 9: 
          { language = tmp.toString() ;
		if ( language.length() == 3 )
		{
			try
			{
				language = Toolbox.getInstance().toISO6391( language ) ;
			}
			catch( ToolboxException te )
			{
			}
		}
		tmp = new StringBuilder() ;
		yybegin( ABSTRACT ) ;
          }
        case 80: break;
        case 56: 
          { citation.setTitle( extract( yytext() ) ) ;
          }
        case 81: break;
        case 18: 
          { yybegin( CREATOR ) ;
          }
        case 82: break;
        case 11: 
          { language = tmp.toString() ;
		if ( language.length() == 3 )
		{
			try
			{
				language = Toolbox.getInstance().toISO6391( language ) ;
			}
			catch( ToolboxException te )
			{
			}
		}
		yybegin( KEYWORD ) ;
		tmp = new StringBuilder() ;
          }
        case 83: break;
        case 50: 
          { tmp = new StringBuilder() ;
		yybegin( LNOTE ) ;
          }
        case 84: break;
        case 47: 
          { cblock.setDescriptor( classification, tmp.toString() ) ;
		yybegin( SUBJECT ) ;
		tmp = null ;
          }
        case 85: break;
        case 55: 
          { expression.setPublisher( extract( yytext() ), null, null ) ;
          }
        case 86: break;
        case 6: 
          { language = tmp.toString() ;
		if ( language.length() == 3 )
		{
			try
			{
				language = Toolbox.getInstance().toISO6391( language ) ;
			}
			catch( ToolboxException te )
			{
			}
		}
		yybegin( TITLE ) ;
		tmp = new StringBuilder() ;
          }
        case 87: break;
        case 13: 
          { yybegin( DATE ) ;
          }
        case 88: break;
        case 37: 
          { agrifs = new ArrayList<Agrif>() ;
		init() ;
		yybegin( ARN ) ;
		tmp = new StringBuilder() ;
          }
        case 89: break;
        case 21: 
          { yybegin( RESOURCES ) ;
		agrifs = new ArrayList<Agrif>() ;
          }
        case 90: break;
        case 20: 
          { yybegin( AGRIF ) ;
		if (tmp != null )
		{
			String text = tmp.toString().trim() ;
			if ( !text.isEmpty() )
			{
				lblock.setKeyword( ParamManager.getInstance().getLanguageFor(text), text ) ;
			}
		}
          }
        case 91: break;
        case 28: 
          { item.setDigitalItem( tmp.toString() ) ;
		manifestation.setItem( item ) ;
		manifestation.setManifestationType( manifestationType ) ;
		yybegin( AGRIF ) ;
          }
        case 92: break;
        case 27: 
          { yybegin( DESCRIPTION ) ;
          }
        case 93: break;
        case 19: 
          { yybegin( COVERAGE ) ;
          }
        case 94: break;
        case 30: 
          { language = null ;
		tmp = new StringBuilder() ;
		yybegin( ABSTRACT ) ;
          }
        case 95: break;
        case 8: 
          { classification = tmp.toString() ;
		tmp = new StringBuilder() ;
		yybegin( CLASS ) ;
          }
        case 96: break;
        case 58: 
          { citation.setCitationNumber( extract( yytext() ) ) ;
          }
        case 97: break;
        case 57: 
          { expression.setDateIssued( extract( yytext() ) ) ;
		// System.out.println( extract( yytext() ) ) ;
          }
        case 98: break;
        case 49: 
          { yybegin( LKEYWORD ) ;
		tmp = new StringBuilder() ;
          }
        case 99: break;
        case 26: 
          { yybegin( YYINITIAL ) ;
          }
        case 100: break;
        case 1: 
          { //throw new Error("Illegal character <"+ yytext()+">") ;
          }
        case 101: break;
        case 24: 
          { if ( !manifestation.toJSONObject().isEmpty() )
		{
			expression.setManifestation( manifestation ) ;
		}
		agrif.setExpression( expression ) ;
		agrif.setLanguageBlocks( lblock ) ;
		agrif.setControlled( cblock ) ;
		agrifs.add( agrif ) ;
		yybegin( RESOURCES ) ;
          }
        case 102: break;
        case 38: 
          { init() ;
		yybegin( ARN ) ;
		tmp = new StringBuilder() ;
          }
        case 103: break;
        case 51: 
          { tmp = new StringBuilder() ;
		yybegin( THESAURUS ) ;
          }
        case 104: break;
        case 46: 
          { tmpItem.setPhysicalLocation( tmp.toString() ) ;
		yybegin( AVAILABILITY ) ;
          }
        case 105: break;
        case 29: 
          { yybegin( AVAILABILITY ) ;
		tmpItem = new Item() ;
		tmpManifestation = new Manifestation() ;
          }
        case 106: break;
        case 25: 
          { yybegin( AGRIF ) ;
		expression.setCitation( citation ) ;
          }
        case 107: break;
        case 63: 
          { expression.setLanguage( extract( yytext() ) ) ;
          }
        case 108: break;
        case 31: 
          { yybegin( DESCRIPTION ) ;
		String text = tmp.toString() ;
		lblock.setAbstract( ParamManager.getInstance().getLanguageFor(text), text ) ;
          }
        case 109: break;
        case 17: 
          { yybegin( SUBJECT ) ;
		tmp = new StringBuilder() ;
          }
        case 110: break;
        case 14: 
          { yybegin( AGRIF ) ;
          }
        case 111: break;
        case 59: 
          { creator = new Creator( "person", extract( yytext() ) ) ;
		agrif.setCreator( creator ) ;
          }
        case 112: break;
        case 3: 
          { if (tmp != null )
		{
			tmp.append( yytext() ) ;
		}
          }
        case 113: break;
        case 10: 
          { language = tmp.toString() ;
		if ( language.length() == 3 )
		{
			try
			{
				language = Toolbox.getInstance().toISO6391( language ) ;
			}
			catch( ToolboxException te )
			{
			}
		}
		tmp = new StringBuilder() ;
		yybegin( DESCRIPTIONNOTE ) ;
          }
        case 114: break;
        case 22: 
          { yybegin( CITATION ) ;
		citation = new Citation() ;
          }
        case 115: break;
        case 52: 
          { tmp = new StringBuilder() ;
		yybegin( URL ) ;
          }
        case 116: break;
        case 64: 
          { tmpItem.setPhysicalNumber( extract( yytext() ) ) ;
          }
        case 117: break;
        case 33: 
          { yybegin( LTITLE ) ;
		tmp = new StringBuilder() ;
          }
        case 118: break;
        case 36: 
          { language = null ;
		tmp = new StringBuilder() ;
		yybegin( DESCRIPTIONNOTE ) ;
          }
        case 119: break;
        case 53: 
          { cblock.setSpatialCoverage( "dc:spatial", extract( yytext() ) ) ;
          }
        case 120: break;
        case 5: 
          { agrif.setOrigin( providerId, tmp.toString() ) ;
		yybegin( AGRIF ) ;
          }
        case 121: break;
        case 39: 
          { cblock.setDescriptor( thesaurus, tmp.toString() ) ;
		yybegin( SUBJECT ) ;
		tmp = null ;
          }
        case 122: break;
        case 32: 
          { yybegin( AGRIF ) ;
		tmpManifestation.setItem( tmpItem ) ;
		tmpManifestation.setManifestationType( "physicalLocation" ) ;
		expression.setManifestation( tmpManifestation ) ;
          }
        case 123: break;
        case 43: 
          { manifestation.setSize( extract( yytext() ) ) ;
          }
        case 124: break;
        case 2: 
          { tmp.append( yytext() ) ;
          }
        case 125: break;
        case 44: 
          { manifestation.setFormat( extract( yytext() ) ) ;
          }
        case 126: break;
        case 23: 
          { yybegin( PUBLISHER ) ;
          }
        case 127: break;
        case 65: 
          { citation.setIdentifier( "ISSN", extract( yytext() ) ) ;
          }
        case 128: break;
        case 62: 
          { creator = new Creator( "conference", extract( yytext() ) ) ;
		agrif.setCreator( creator ) ;
          }
        case 129: break;
        case 12: 
          { 
          }
        case 130: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AGRIS2AGRIF <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        AGRIS2AGRIF scanner = null;
        try {
          scanner = new AGRIS2AGRIF( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
